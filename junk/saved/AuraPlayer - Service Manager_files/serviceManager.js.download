;(function() {
"use strict";

angular.module("ap.serviceManager.templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("app/modules/serviceManager/views/dialogs/baseUrlDialog.html","<form name=\"baseUrlForm\" novalidate><md-dialog aria-label=\"Base URL\" class=\"very-wide-dialog overflowed-dialog\"><ap-form-dialog data-title=\"Base URL\" ng-class=\"{\'has-error\' : baseUrlForm.baseUrl.$invalid}\" save-label=\"OK\" cancel-visible=\"::false\" save-callback=\"onSave()\" save-allowed=\"holder.url.length > 0\">Confirm to URL the playback should start at:<br><br><input type=\"text\" ng-model=\"holder.url\" name=\"baseUrl\" required class=\"row-input form-control\"><br><br>Set to: <a href=\"\" ng-click=\"setToHostname()\" class=\"padd-wide-left\">Hostname</a> <a href=\"\" ng-click=\"setToFullpath()\" class=\"padd-wide-left\">Full path</a></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/serviceManager/views/dialogs/parametersSelectorDialog.html","<form name=\"serviceParametersSelectorForm\" novalidate><md-dialog aria-label=\"Service Options\" class=\"wide-dialog\"><div class=\"panel-heading dialog-heading center\"><h4>{{::title}}</h4></div><div class=\"panel-body\"><div><input type=\"search\" class=\"form-control input-sm\" placeholder=\"Search service/parameter..\" ng-model=\"filterValue\" ng-model-options=\"::{debounce : 50}\" focus-me=\"::true\"></div><br><div ng-show=\"!undefinedOrTrue(services[0].ui_hasVisibleServices)\" class=\"treeview\"><strong>No search results.</strong></div><div id=\"paramsTree\" class=\"treeview\" data-role=\"treeview\" ng-show=\"undefinedOrTrue(services[0].ui_hasVisibleServices)\">{{expandIfOnlyOneService()}}<ul><li ng-repeat=\"service in services | serviceParametersTreeFilter:filterValue\" ng-show=\"undefinedOrTrue(service.ui_isVisibleInSearch)\" data-mode=\"checkbox\" class=\"node collapsed\" on-finish-render=\"ngRepeatFinished\"><span class=\"node-toggle\" id=\"{{::service.name}}ServiceToggle\" ng-click=\"onNodeToggleClick(service.name + \'ServiceToggle\')\"></span><label class=\"input-control checkbox small-check\"><input type=\"checkbox\" name=\"{{::service.name}}\" ng-click=\"onCheckboxClick($event)\"> <span class=\"check\"></span></label><span ng-bind-html=\"service.name | highlight:filterValue\" class=\"leaf\" ng-click=\"onNodeToggleClick(service.name + \'ServiceToggle\')\"></span><ul><li ng-if=\"service.inputParams.length > 0\" ng-show=\"undefinedOrTrue(service.ui_hasVisibleInputParams)\" data-mode=\"checkbox\" class=\"node collapsed\"><label class=\"input-control checkbox small-check\"><input type=\"checkbox\" name=\"Input parameters\" ng-click=\"onCheckboxClick($event)\"> <span class=\"check\"></span></label><span class=\"leaf\" ng-click=\"onNodeToggleClick(service.name + \'InputParamsToggle\')\"><i>Input parameters</i></span> <span class=\"node-toggle\" id=\"{{::service.name}}InputParamsToggle\" ng-click=\"onNodeToggleClick(service.name + \'InputParamsToggle\')\"></span><ul><li ng-repeat=\"inputParam in service.inputParams | filter:{visible: true}\" ng-show=\"undefinedOrTrue(inputParam.ui_isVisibleInSearch)\" data-mode=\"checkbox\"><label class=\"input-control checkbox small-check\"><input type=\"checkbox\" name=\"{{::inputParam.id.name}}\" ng-click=\"onCheckboxClick($event)\"> <span class=\"check\"></span></label><span ng-bind-html=\"inputParam.id.name | highlight:filterValue\" class=\"leaf\" ng-click=\"toggleCheckbox($event)\"></span></li></ul></li><li ng-if=\"service.outputParams.length > 0\" ng-show=\"undefinedOrTrue(service.ui_hasVisibleOutputParams)\" data-mode=\"checkbox\" class=\"node collapsed\"><label class=\"input-control checkbox small-check\"><input type=\"checkbox\" name=\"Output parameters\" ng-click=\"onCheckboxClick($event)\"> <span class=\"check\"></span></label><span class=\"leaf\" ng-click=\"onNodeToggleClick(service.name + \'OutputParamsToggle\')\"><i>Output parameters</i></span> <span class=\"node-toggle\" id=\"{{::service.name}}OutputParamsToggle\" ng-click=\"onNodeToggleClick(service.name + \'OutputParamsToggle\')\"></span><ul><li ng-repeat=\"outputParam in service.outputParams | filter:{visible: true}\" ng-show=\"undefinedOrTrue(outputParam.ui_isVisibleInSearch)\" data-mode=\"checkbox\"><label class=\"input-control checkbox small-check\"><input type=\"checkbox\" name=\"{{::outputParam.id.name}}\" ng-click=\"onCheckboxClick($event)\"> <span class=\"check\"></span></label><span ng-bind-html=\"outputParam.id.name | highlight:filterValue\" class=\"leaf\" ng-click=\"toggleCheckbox($event)\" ng-class=\"{\'purple\': !isSelectingTable && outputParam.inTable}\"></span></li></ul></li></ul></li></ul></div><div class=\"panel-footer\"><div id=\"dialogFooterConfig\" style=\"margin-top: 5px\" ng-if=\"::isSelectingTable\"><ap-checkbox title=\"Hidden\" model=\"tableConfig.isHidden\" style=\"color: DimGray\"></ap-checkbox><span style=\"margin-left: 50px; color: DimGray\">Start: <input type=\"number\" min=\"1\" ng-model=\"tableConfig.startIndex\" class=\"row-input form-control\" positive-number=\"zeroAllowed\" required name=\"startIndex\" id=\"app-logo-width\"></span></div><span id=\"dialogFooterButtons\" class=\"pull-right\"><button class=\"btn btn-primary\" ng-click=\"onConfirm()\">Confirm</button> <button title=\"\" class=\"btn btn-default\" ng-click=\"onCancel()\">Cancel</button></span></div></div></md-dialog></form>");
$templateCache.put("app/modules/serviceManager/views/dialogs/servicesSelectorDialog.html","<md-dialog aria-label=\"{{::title}}\" class=\"dialog-with-grid overflowed-dialog\"><ap-form-dialog data-title=\"Select services\" footer-visible=\"::false\"><service-grid services=\"services\" table-actions=\"::tableActions\" visible-columns=\"::systemProperties.SERVICE_TABLE_COLUMNS\" compact-view=\"::true\" read-only=\"::true\" enable-clickable-names=\"::false\"></service-grid></ap-form-dialog></md-dialog>");
$templateCache.put("app/modules/serviceManager/views/main/main.html","<ap-navigation-bar ng-if=\"::isLogged()\"></ap-navigation-bar><service-record-panel ng-show=\"recordingProperties.isRecording\"></service-record-panel><div class=\"main-container\" ng-class=\"{\'navigation-small\' : navProperties.miniMode}\"><ap-navigation-menu nav-properties=\"navProperties\" ng-show=\"!recordingProperties.isRecording\"></ap-navigation-menu><div class=\"main-content\" ng-model-options=\"::{debounce: 200}\"><div class=\"container\" ng-class=\"::{\'no-border\' : !isLogged()}\"><ap-loader indicator=\"::loadingIndicator\"></ap-loader><ng-view></ng-view></div></div></div><div class=\"footer clearfix\"><div class=\"footer-items\"><ap-go-top></ap-go-top></div></div>");
$templateCache.put("app/modules/serviceManager/views/editors/service/hostPortInput.html","<ap-edited-input mode=\"::mode\" model=\"hostModel\" is-required=\"::isRequired\" edited-name=\"host\" edited-type=\"url\" edited-placeholder=\"host\" elimination-options=\"::{eliminateSpecialChars: false}\" edited-classes=\"inline padd-wide-right {{::mode.edit ? \'host-field\' : \'\'}}\"></ap-edited-input><b>:</b><ap-edited-input mode=\"::mode\" model=\"portModel\" is-required=\"::isRequired\" edited-name=\"port\" edited-type=\"number\" edited-placeholder=\"port\" edited-classes=\"inline padd-wide-left port-field\"></ap-edited-input>");
$templateCache.put("app/modules/serviceManager/views/editors/service/inputParamLabelEditor.html","<ng-form name=\"inputParameterLabelForm\" novalidate><div ng-if=\"::mode.new || mode.edit\" ng-class=\"{\'has-error\': inputParameterLabelForm.label.$invalid}\"><input type=\"text\" class=\"form-control input-medium\" placeholder=\"label\" ng-model=\"inputParam.paramLabel\" name=\"label\" ng-model-options=\"::{debounce:150}\" required input-param-label-validator special-char-eliminator=\"::{eliminateDots:true}\" ng-trim=\"true\" ng-disabled=\"::shouldDisable\" input-params=\"service.inputParams\" current-input-param=\"inputParam\"></div><div ng-messages=\"inputParameterLabelForm.label.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Label is required</div><div ng-message=\"label\">Label already exists</div></div><div ng-if=\"::mode.details\">{{inputParam.paramLabel}}</div></ng-form>");
$templateCache.put("app/modules/serviceManager/views/editors/service/outputParamLabelEditor.html","<ng-form name=\"outputParameterLabelForm\" novalidate><div ng-if=\"::mode.new || mode.edit\" ng-class=\"{\'has-error\': outputParameterLabelForm.label.$invalid}\"><input type=\"text\" class=\"form-control input-medium\" placeholder=\"label\" ng-model=\"outputParam.paramLabel\" name=\"label\" ng-model-options=\"::{debounce: 200}\" required output-param-label-validator special-char-eliminator=\"::{eliminateDots:true}\" ng-trim=\"true\" ng-disabled=\"::shouldDisable\" output-params=\"service.outputParams\" current-output-param=\"outputParam\"></div><div ng-messages=\"outputParameterLabelForm.label.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Label is required</div><div ng-message=\"label\">Label already exists</div></div><div ng-if=\"::mode.details\">{{outputParam.paramLabel}}</div></ng-form>");
$templateCache.put("app/modules/serviceManager/views/editors/service/serviceAdvancedDetails.html","<ap-details><ap-detail ng-if=\"::service.type !== \'DB\'\" title=\"Filename\"><input type=\"text\" ng-model=\"service.fileName\" class=\"form-control\" disabled=\"disabled\"></ap-detail><ap-detail ng-if=\"::mode.new || mode.edit\" title=\"Enable Service\"><ap-checkbox model=\"service.isEnabled\" should-disable=\"::mode.details\"></ap-checkbox></ap-detail><ap-detail title=\"Use Labels As Keys\" ng-if=\"::service.type !== \'JS\'\"><ap-checkbox model=\"service.useLabelsAsKeys\" should-disable=\"::mode.details || service.type === \'HTML\'\"></ap-checkbox></ap-detail><ap-detail title=\"Table has header\" ng-if=\"::service.type === \'HTML\'\"><ap-checkbox model=\"service.isTableHasHeader\" should-disable=\"::mode.details\"></ap-checkbox></ap-detail><ap-detail title=\"BLOB Output\" ng-if=\"::service.type === \'DB\'\"><ap-checkbox model=\"service.isSingleOutput\" on-change=\"onIsBlobOutputChange()\" should-disable=\"::mode.details\"></ap-checkbox></ap-detail><ap-detail title=\"Number of Rows\" ng-if=\"::service.type !== \'JS\'\"><ap-edited-input mode=\"::mode\" model=\"service.numOfRowsInTable\" edited-type=\"number\" edited-placeholder=\"number of rows\"></ap-edited-input></ap-detail><ap-detail title=\"Browser Compatibility\" ng-if=\"::service.type === \'HTML\'\"><ap-constant-selector mode=\"::mode\" constants=\"::htmlDrivers\" chosen-constant=\"service.command\" hide-value=\"::true\"></ap-constant-selector></ap-detail><ap-detail title=\"Authentication Type\"><ap-constant-selector mode=\"::mode\" constants=\"::authenticationMethods\" chosen-constant=\"service.authenticationMethod\" hide-value=\"::true\" on-select-callback=\"onAuthenticationMethodSelect(constant.value)\"></ap-constant-selector><div ng-if=\"service.authenticationMethod.value === \'FieldEncryption\'\"><ap-detail title=\"Username\"><ap-constant-selector title=\"Input parameter containing username\" constant-placeholder=\"Select username field\" mode=\"::mode\" constants=\"usernameParamNames\" is-required=\"::true\" edited-name=\"usernameField\" chosen-constant=\"service.authenticationData.username\" on-select-callback=\"onFieldEncryptionUsernameSelect(constant)\"></ap-constant-selector></ap-detail><ap-detail title=\"Password\"><ap-constant-selector title=\"Input parameter containing password\" constant-placeholder=\"Select password field\" mode=\"::mode\" constants=\"passwordParamNames\" is-required=\"::true\" edited-name=\"passwordField\" chosen-constant=\"service.authenticationData.password\" on-select-callback=\"onFieldEncryptionPasswordSelect(constant)\"></ap-constant-selector></ap-detail></div><div ng-if=\"service.authenticationMethod.value === \'Ticket\' && mode.edit\"><i class=\"clip clip-notification\"></i> Refer to ticket fields in input parameter values by using ${ticket.parameter-name} placeholders.</div></ap-detail><ap-detail title=\"Use JSON\"><ap-checkbox model=\"service.isJson\" should-disable=\"::mode.details\"></ap-checkbox></ap-detail><ap-detail ng-if=\"::service.type === \'Forms\' || service.type === \'HTML\'\" title=\"{{::service.type === \'Forms\' ? \'Handle Popups\' : \'Popup Action\'}}\"><ap-checkbox model=\"service.isHandlePopups\" should-disable=\"::mode.details\"></ap-checkbox></ap-detail><ap-detail title=\"Validation Failure Status\"><ap-constant-selector constant-placeholder=\"Response Code\" hide-value=\"::true\" mode=\"::mode\" constants=\"httpResponseCodes\" chosen-constant=\"service.validationResponseCode\" on-select-callback=\"onValidationResponseCodeSelect(constant.value)\"></ap-constant-selector></ap-detail></ap-details>");
$templateCache.put("app/modules/serviceManager/views/editors/service/serviceDbDetails.html","<ng-form name=\"serviceDbDetailsForm\" novalidate><ap-detail title=\"DB Host:Port\" should-paint-background=\"true\"><ap-host-port-input mode=\"::mode\" is-required=\"::true\" host-model=\"service.db.host\" port-model=\"service.db.port\"></ap-host-port-input></ap-detail><ap-detail title=\"DB Name / SID\" detail-class=\"empty-border\" should-paint-background=\"true\"><ap-edited-input mode=\"::mode\" model=\"service.db.name\" is-required=\"::true\" edited-name=\"dbName\" edited-type=\"text\" edited-placeholder=\"Name / SID\" edited-classes=\"inline padd-wide-right db-name-field\"></ap-edited-input></ap-detail><ap-detail title=\"DB Connector\" detail-class=\"empty-border\" should-paint-background=\"true\"><ap-constant-selector title=\"DB type\" constant-placeholder=\"Select type\" mode=\"::mode\" constants=\"dbTypeConstants\" is-required=\"::true\" edited-name=\"dbType\" chosen-constant=\"service.db.type\" edited-classes=\"inline db-connector-field\"></ap-constant-selector><button title=\"Try to connect\" ng-if=\"::mode.edit\" class=\"btn btn-sm btn-teal\" style=\"margin-left: 25px\" ng-disabled=\"!serviceDbDetailsForm.$valid\" ng-click=\"testConnection()\">Test connection</button></ap-detail></ng-form><ap-detail title=\"SQL Statement\"><ap-edited-input mode=\"::mode\" model=\"service.command\" edited-placeholder=\"e.g. SELECT * FROM customers\" edited-type=\"text\" select-all-on-click=\"::false\" edited-name=\"commandInput\" is-required=\"true\" required-err-msg=\"Query is required\" elimination-options=\"::{disabled: true}\"></ap-edited-input><a ng-if=\"mode.edit && !hintsVisible\" href=\"\" ng-click=\"showHints()\" class=\"pull-right\">Hints &#709;</a></ap-detail><div ng-if=\"mode.edit && hintsVisible\" class=\"tabbable tabs-left\"><ul id=\"myTab3\" class=\"nav nav-tabs tab-green\"><li class=\"active\"><a href=\"#_tabswitch_examples\" data-toggle=\"tab\">Examples</a></li><li class=\"\"><a href=\"#_tabswitch_parameters\" data-toggle=\"tab\">Parameters</a></li><li class=\"\"><a href=\"#_tabswitch_types\" data-toggle=\"tab\">Types</a></li><li class=\"\"><a href=\"#_tabswitch_arrays\" data-toggle=\"tab\">Arrays</a></li></ul><div class=\"tab-content\" style=\"padding-left:10px; padding-top:7px; color:gray\"><div class=\"tab-pane active\" id=\"_tabswitch_examples\"><p><b>Select query:</b><br>SELECT * FROM ${table} WHERE POPULATION &lt; ${max_population}</p><p><b>Calling a function:</b><br>SELECT GET_POPULATION(\'${city}\') as result FROM dual</p><p><b>Calling procedure:</b><br>EXECUTE INCREASE_NUMERIC(%{num:INTEGER}, ^{num_original:INTEGER}, ${amount})<br>EXECUTE STORE_BLOB(\'${id}\', ${image:BLOB}) - image input parameter expects the blob in base64 encoding</p></div><div class=\"tab-pane\" id=\"_tabswitch_parameters\"><p>Refer to service parameters in your statement by:</p><ul><li><span class=\"blue-text\">${parameter-name}</span> - input values.</li><li><span class=\"blue-text\">%{parameter-name<b>:</b>type}</span> - to in/out parameters.</li><li><span class=\"blue-text\">^{parameter-name<b>:</b>type}</span> - to out parameters.</li></ul></div><div class=\"tab-pane\" style=\"word-wrap: break-word\" id=\"_tabswitch_types\"><p>Recognised SQL types for parameters:</p><span ng-repeat=\"sqlType in sqlTypes track by $index\" style=\"padding-right: 10px\">{{::sqlType}}</span></div><div class=\"tab-pane\" style=\"word-wrap: break-word\" id=\"_tabswitch_arrays\"><p><span class=\"blue-text\">Custom types must be declared in schema level!</span> Package level custom types are not supported.</p><p><b>Unbounded array declaration in DB, and use in ServiceManager:</b><br>CREATE TYPE <span class=\"blue-text\">string_array</span> IS TABLE OF VARCHAR2(100);<br>EXECUTE example_pkg.get_table(^{table:ARRAY|<span class=\"blue-text\">string_array</span>})</p><p><b>Fixed-size array declaration in DB, and use in ServiceManager:</b><br>CREATE TYPE <span class=\"blue-text\">pair</span> IS VARRAY(2) OF VARCHAR2(100);<br>EXECUTE example_pkg.get_fixedarray(^{array:ARRAY|<span class=\"blue-text\">pair</span>})</p><p><b>2D array declaration in DB, and use in ServiceManager:</b><br>CREATE TYPE pair IS VARRAY(2) OF VARCHAR2(100);<br>CREATE TYPE string_2d_array IS VARRAY(3) OF pair;<br>EXECUTE example_pkg.get_2d_array(^{array:ARRAY|<span class=\"blue-text\">string_2d_array</span>})</p></div></div></div>");
$templateCache.put("app/modules/serviceManager/views/editors/service/serviceDetails.html","<ap-details><ap-detail title=\"Service Name\" detail-class=\"empty-border\"><service-name-editor mode=\"::mode\" service=\"service\" rename-callback=\"renameCallback({ignoreDeps: ignoreDeps})\" cancel-rename-callback=\"cancelRenameCallback()\"></service-name-editor></ap-detail><ap-detail title=\"Description\"><ap-edited-input mode=\"::mode\" model=\"service.description\" edited-placeholder=\"description\" elimination-options=\"::{disabled:true}\"></ap-edited-input></ap-detail><ap-detail title=\"Service Url\" ng-if=\"::mode.details\"><ap-edited-input mode=\"::mode\" model=\"service.serviceUrl\" edited-placeholder=\"service url\" elimination-options=\"::{disabled:true}\"></ap-edited-input></ap-detail><ap-detail title=\"WSDL Url\" ng-if=\"::mode.details\"><ap-edited-input mode=\"::mode\" model=\"service.serviceWsdlUrl\" edited-placeholder=\"wsdl url\" elimination-options=\"::{disabled:true}\"></ap-edited-input></ap-detail><ap-detail title=\"{{::service.type === \'Forms\' ? \'Form URL\' : \'Base Url\'}}\" ng-if=\"::service.type === \'Forms\' || service.type === \'HTML\'\"><ap-edited-input mode=\"::mode\" model=\"service.formUrl\" edited-type=\"url\" edited-name=\"formUrlInput\" is-required=\"true\" required-err-msg=\"Url is required\" url-err-msg=\"Url is invalid\" elimination-options=\"::{eliminateSpecialChars: false}\"></ap-edited-input></ap-detail><ap-detail title=\"Proxy\" ng-if=\"::service.type === \'HTML\' && (mode.edit || hasProxy())\"><ap-host-port-input mode=\"::mode\" is-required=\"::false\" host-model=\"service.proxyHost\" port-model=\"service.proxyPort\"></ap-host-port-input></ap-detail><service-db-details ng-if=\"::service.type === \'DB\'\" service=\"service\" mode=\"::mode\" loading-indicator=\"loadingIndicator\"></service-db-details><ap-detail title=\"Status\" ng-if=\"::mode.details\">{{::service.isEnabled ? \"Active\" : \"Disabled\"}}</ap-detail><ap-detail title=\"Linked applications\" ng-if=\"::mode.details\"><span ng-if=\"::service.apps.length === 0\">(none)</span> <span ng-repeat=\"app in ::service.apps\"><a ng-href=\"#/appEditor/details/{{::app}}\">{{::app}}</a>{{::$last? \'\': \', \'}}</span></ap-detail></ap-details>");
$templateCache.put("app/modules/serviceManager/views/editors/service/serviceEditor.html","<ap-loader indicator=\"::loadingIndicator\"></ap-loader><ng-form name=\"serviceForm\" confirm-unsaved-changes novalidate><div class=\"container-fluid\"><div class=\"row\"><ap-breadcrumbs crumbs=\"::serviceEditorCrumbs\"></ap-breadcrumbs></div><div class=\"row\"><service-editor-header mode=\"::mode\" save-allowed=\"serviceForm.$valid\" save-callback=\"saveService()\" service=\"::service\" license-details=\"::licenseDetails\"></service-editor-header></div><div class=\"row details-page\"><ap-collapsing-panel data-title=\"{{::service.type}} Service Details\" bindable-collapse=\"collapseManager.collapseServiceDetails\"><service-details mode=\"::mode\" service=\"::service\" loading-indicator=\"loadingIndicator\" rename-callback=\"renameService(ignoreDeps)\" cancel-rename-callback=\"cancelRenameService()\"></service-details></ap-collapsing-panel><ap-collapsing-panel data-title=\"Input Parameters\" bindable-collapse=\"collapseManager.collapseInputParameters\"><div ng-if=\"::service.hasInputList\" class=\"purple\"><i class=\"clip clip-info\"></i> Service uses input in loop, some functionality might be unavailable.<br><br></div><service-input-parameter-table mode=\"::mode\" service=\"::service\" quantity-read-only=\"service._isEditingJs\" get-output-enable=\"serviceForm.serviceDbDetailsForm.$valid && serviceForm.commandInputForm.$valid\" get-output-callback=\"getOutputColumns()\" system-properties=\"::systemProperties\"></service-input-parameter-table></ap-collapsing-panel><ap-collapsing-panel data-title=\"Javascript Scenario\" ng-if=\"::service.type === \'JS\'\"><!-- <ap-editor-js-suggestions editor=\"jsEditorHolder.editor\"></ap-editor-js-suggestions> --><ap-editor mode=\"javascript\" edited=\"service.command\" should-disable=\"!mode.edit || !service._isEditingJs\" ap-context-menu=\"jsContextMenu\" editor-reference-holder=\"::jsEditorHolder\"></ap-editor><span class=\"pull-left\" ng-if=\"::mode.edit\"><br><i class=\"clip clip-notification\" style=\"padding-left: 1em\"></i> Right click in editor to open <i style=\"color: #0b64ac\">Auto Complete</i> suggestions.<br></span><button ng-click=\"toggleEditingJs()\" ng-if=\"::mode.edit\" class=\"btn btn-sm btn-teal pull-right\" style=\"margin-top: 20px\">{{service._isEditingJs ? \'Lock edit\' : \'Unlock edit\'}}</button></ap-collapsing-panel><ap-collapsing-panel data-title=\"Output Parameters\" ng-hide=\"service.type === \'JS\' && service._isEditingJs\" bindable-collapse=\"collapseManager.collapseOutputParameters\"><service-output-parameter-table mode=\"::mode\" service=\"::service\" quantity-read-only=\"::service.type === \'JS\'\" table-config=\"::outputParamsTableConfig\"></service-output-parameter-table></ap-collapsing-panel><ap-collapsing-panel data-title=\"Mock Response\" should-collapse=\"::false\"><ap-editor mode=\"{{::mockEditorHolder.mode}}\" edited=\"mockEditorHolder.value\" editor-reference-holder=\"::mockEditorHolder\" should-disable=\"!mode.edit\" click-callback=\"unlockJs()\"></ap-editor></ap-collapsing-panel><ap-collapsing-panel ng-if=\"::!mode.edit && (service.type === \'Forms\' || service.type === \'HTML\')\" data-title=\"Scenario View\" bindable-collapse=\"collapseManager.collapseScenarioView\"><ap-scenario-details service=\"::service\"></ap-scenario-details></ap-collapsing-panel><ap-collapsing-panel data-title=\"Advanced Details\" ng-hide=\"service.type === \'JS\' && service._isEditingJs\" bindable-collapse=\"collapseManager.collapseAdvancedDetails\"><service-advanced-details mode=\"::mode\" service=\"service\" system-properties=\"::systemProperties\" on-is-blob-output-change=\"onIsBlobOutputChange\"></service-advanced-details></ap-collapsing-panel></div><div class=\"row\"><service-editor-header mode=\"::mode\" save-allowed=\"serviceForm.$valid\" save-callback=\"saveService()\" service=\"::service\" license-details=\"::licenseDetails\"></service-editor-header></div></div></ng-form>");
$templateCache.put("app/modules/serviceManager/views/editors/service/serviceEditorHeader.html","<ap-header mode=\"::mode\" context=\"entity\" loading-indicator=\"loadingIndicator\" should-confirm=\"::true\"><a ng-if=\"::mode.details\" check-permission ng-href=\"#/serviceEditor/edit/{{::service.name}}\" class=\"btn btn-sm btn-primary\">Edit </a><a ng-if=\"::mode.details\" check-permission ng-href=\"#/serviceTester/{{::service.name}}\" class=\"btn btn-sm btn-primary\">Test </a><a ng-href=\"#/testCaseEditor/new/{{::service.name}}\" ng-if=\"::isTestCaseManagementPrivileged() && mode.details\" check-permission class=\"btn btn-sm btn-primary\" a-disabled=\"service.hasInputList || service.isSingleOutput || loadingIndicator.isLoading\">Create Test Case </a><button ng-if=\"::mode.edit\" ng-click=\"saveCallback()\" class=\"btn btn-sm btn-primary\" ng-disabled=\"!saveAllowed || loadingIndicator.isLoading\" check-permission>{{::getSaveTitle()}}</button></ap-header>");
$templateCache.put("app/modules/serviceManager/views/editors/service/serviceNameEditor.html","<ng-form name=\"serviceNameForm\" novalidate><div ng-if=\"::(mode.new || mode.duplicate || mode.rename)\" ng-class=\"{\'has-error\': serviceNameForm.serviceName.$invalid}\"><input type=\"text\" class=\"form-control input-medium\" placeholder=\"{{editedPlaceholder !== undefined ? editedPlaceholder : \'Enter service name\'}}\" ng-model=\"service.name\" name=\"serviceName\" ng-model-options=\"::{debounce: 150}\" required service-name-validator=\"{{::!shouldDisable}}\" special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" ng-trim=\"true\" ng-disabled=\"::shouldDisable\" focus-me=\"::true\"> <span ng-if=\"::(mode.edit && !mode.rename) && service.isPartial\" class=\"label partial-label\">Partial</span><ap-control-buttons ng-if=\"mode.rename\" save-allowed=\"serviceNameForm.$valid\" save-callback=\"rename()\" cancel-callback=\"cancelRenameCallback()\" style=\"float:right\"></ap-control-buttons></div><div ng-messages=\"serviceNameForm.serviceName.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Service name is required</div><div ng-message=\"name\">Service already exists!</div></div><div ng-if=\"::((mode.edit && !mode.new && !mode.duplicate) || (mode.details && !mode.rename))\">{{service.name}} <span ng-if=\"::(service.type === \'Forms\' || service.type === \'HTML\') && service.isPartial\" class=\"label partial-label\">Partial</span> <a ng-click=\"onRenameClick($event)\"><button title=\"Rename\" ng-if=\"::mode.details\" type=\"button\" class=\"btn btn-xs btn-link\" style=\"margin-left:2em\"><i class=\"fa fa-edit\"></i></button></a></div></ng-form>");
$templateCache.put("app/modules/serviceManager/views/managers/admin/adminManager.html","<div class=\"container-fluid\"><ap-header main-title=\"Admin Manager\" loading-indicator=\"loadingIndicator\" sub-title=\"Manage your data, system, log, license and mail configuration\"></ap-header><div layout=\"row\"><div flex=\"40\" flex-offset=\"10\" class=\"admin-header-blocks\"><div style=\"text-align:left\"><span class=\"admin-titles\" style=\"padding-top:0px\"><i class=\"clip-data\"></i>Data Management</span> <a ng-href=\"#/recordingsManager\" class=\"btn btn-bricky red-dropdown\" ng-if=\"::user.isManager()\">Recordings </a><a href=\"/ServiceManager/Macro/Backup\" class=\"btn btn-bricky red-dropdown\" ng-if=\"::user.isManager() || licenseDetails.backupCreation\">Backup</a><div class=\"dropdown\" style=\"display:inline-block\" ng-if=\"::user.isAdmin()\"><a href=\"javascript:void(0)\" data-toggle=\"dropdown\" class=\"dropdown-toggle btn red-dropdown\">Restore <b class=\"caret\"></b></a><ul class=\"dropdown-menu\" ng-if=\"::user.isAdmin()\"><li><ap-file-browser mode=\"simple\" file-handler=\"restoreUploadedBackup(file)\" file-filter=\".zip\" browse-label=\"from file\"></ap-file-browser></li><li class=\"divider narrow-divider\"></li><li><a href=\"\" ng-click=\"restoreDailyBackup()\">from daily backup</a></li></ul></div><button ng-click=\"confirmAndReset()\" class=\"btn btn-bricky red-dropdown\" ng-if=\"::user.isAdmin()\">Reset</button> <button ng-click=\"sync()\" class=\"btn btn-bricky red-dropdown\" ng-if=\"::user.isManager()\">Sync</button> <a ng-href=\"#/serverFiles\" ng-if=\"::user.isAdmin()\" class=\"btn btn-bricky red-dropdown\" style=\"margin-top:3px\">Server Files</a></div></div><div flex=\"40\" class=\"admin-header-blocks\"><div style=\"text-align:left\"><span class=\"admin-titles\"><i class=\"fa fa-file-text-o\" style=\"margin-top:3px\"></i> Log &amp; Analytics</span> <a ng-href=\"#/logViewer\" class=\"btn btn-bricky red-dropdown\">View Log </a><a href=\"/ServiceManager/Macro/LogDownload\" class=\"btn btn-bricky red-dropdown\">Download Log </a><button ng-click=\"rotateLog()\" class=\"btn btn-bricky red-dropdown\" ng-if=\"::user.isManager()\">Rotate Log</button> <a ng-href=\"#/statisticsManager\" class=\"btn btn-bricky red-dropdown\">Statistics</a></div></div></div><div layout=\"row\"><div flex=\"40\" flex-offset=\"10\" class=\"admin-header-blocks\" check-permission style=\"margin-bottom:10px\"><div style=\"text-align:left; margin-top:3px\"><span class=\"admin-titles\" style=\"margin-top:3px\"><i class=\"fa fa-cogs\"></i> System</span> <a ng-href=\"#/systemProperties\" class=\"btn btn-bricky red-dropdown\" ng-if=\"::user.isAdmin()\">System Properties </a><a ng-href=\"#/sessionManager\" class=\"btn btn-bricky red-dropdown\">Sessions </a><a ng-href=\"#/domainManager\" class=\"btn btn-bricky red-dropdown\" ng-if=\"::user.isAdmin()\">Domains </a><a class=\"btn btn-bricky red-dropdown link-button\" ng-click=\"openMailConfigurator()\" ng-if=\"::user.isAdmin()\">Mail</a><div class=\"dropdown\" style=\"display:inline-block\" ng-if=\"::user.isAdmin()\"><a href=\"javascript:void(0)\" data-toggle=\"dropdown\" class=\"dropdown-toggle btn red-dropdown\">Advanced <b class=\"caret\"></b></a><ul class=\"dropdown-menu\" ng-if=\"::user.isAdmin()\"><li><a ng-href=\"#/formUrlManager\" style=\"margin-top:3px\">Form Urls</a></li><li class=\"divider narrow-divider\"></li><li><a ng-href=\"#/apis\" style=\"margin-top:3px\">APIs</a></li></ul></div></div></div><div flex=\"40\" class=\"admin-header-blocks\" style=\"margin-bottom:10px\"><div style=\"text-align:left\"><span class=\"admin-titles\"><i class=\"fa fa-key\" style=\"margin-top:3px\"></i> License</span> <a ng-href=\"{{::renewLicenseLink}}\" class=\"btn btn-bricky red-dropdown\">Request License</a><ap-file-browser file-handler=\"uploadLicense(file)\" file-filter=\".jar\" browse-label=\"License\"></ap-file-browser></div></div></div></div><div class=\"details-page admin-page\"><ap-collapsing-panel title=\"License Properties\" should-collapse=\"::true\"><ap-details><ap-detail title=\"Version\" detail-class=\"empty-border\">{{::systemInfo.clientVersion}}	({{::systemInfo.buildDate}}) <span ng-if=\"systemInfo.hasUpdate\" class=\"label label-info\">Update available!</span><br><!-- <a href=\"\" ng-click=\"checkForUpdates()\" class=\"padd-wide-right\">Check for updates</a>&middot; --> <a ng-href=\"#/changelog\">Changelog</a></ap-detail><ap-simple-detail title=\"Player Version\" detail=\"{{::licenseDetails.version}}\"></ap-simple-detail><ap-simple-detail title=\"Licensed to company\" detail=\"{{::licenseDetails.companyName}}\"></ap-simple-detail><ap-simple-detail title=\"Licensed server\" detail=\"{{::licenseDetails.licensedServers}}\"></ap-simple-detail><ap-detail title=\"Expiration\"><strong>{{::licenseDetails.expiration | date: \"dd/MM/yyyy\"}}</strong></ap-detail><ap-detail ng-if=\"::licenseDetails.testManagement\" title=\"Test Management Expiration\"><strong>{{::licenseDetails.testManagementExpiration | date: \"dd/MM/yyyy\"}}</strong></ap-detail><ap-detail ng-if=\"::licenseDetails.testMonitorManagement\" title=\"Monitor Management Expiration\"><strong>{{::licenseDetails.testMonitorManagementExpiration | date: \"dd/MM/yyyy\"}}</strong></ap-detail><ap-simple-detail title=\"Deployment Environment\" detail=\"{{::licenseDetails.deployment}}\"></ap-simple-detail><ap-simple-detail title=\"Active services limit\" detail=\"{{::generateMaxActiveServicesString()}}\"></ap-simple-detail><ap-simple-detail title=\"Created services limit\" detail=\"{{::licenseDetails.totalMaxServices === -1 ? \'Unlimited\' : licenseDetails.totalMaxServices}}\"></ap-simple-detail><ap-simple-detail title=\"Service Management Enabled\" detail=\"{{::licenseDetails.serviceManagement}}\"></ap-simple-detail></ap-details></ap-collapsing-panel></div><div class=\"details-page admin-page\"><ap-collapsing-panel title=\"Server Information\" should-collapse=\"false\"><ap-details><ap-simple-detail title=\"OS / Platform Information\" detail-class=\"empty-border\" detail=\"{{::systemInfo.platformInformation}}\"></ap-simple-detail><ap-simple-detail title=\"Available processors (cores)\" detail=\"{{::systemInfo.availableProcessors}}\"></ap-simple-detail><ap-detail title=\"Used/Total Disk Space\">{{::(systemInfo.totalDiskSpace - systemInfo.freeDiskSpace) | humanReadableFileSize}}&nbsp;&nbsp; / &nbsp;&nbsp;{{::systemInfo.totalDiskSpace | humanReadableFileSize}}&nbsp;&nbsp; ({{::systemInfo.freeDiskSpace | humanReadableFileSize}} free)</ap-detail><ap-detail title=\"Used/Total Memory\">{{::(systemInfo.totalMemory - systemInfo.freeMemory) | humanReadableFileSize}}&nbsp;&nbsp; / &nbsp;&nbsp;{{::systemInfo.totalMemory | humanReadableFileSize}}&nbsp;&nbsp; (up to {{::systemInfo.maxJvmMemory | humanReadableFileSize}})</ap-detail><ap-simple-detail title=\"Server Info\" detail=\"{{::systemInfo.serverInfo}}\"></ap-simple-detail><ap-simple-detail title=\"Server Address\" detail=\"{{::systemInfo.serverAddress}}\"></ap-simple-detail><ap-simple-detail title=\"Java Runtime\" detail=\"{{::systemInfo.javaRuntime}}\"></ap-simple-detail><ap-simple-detail title=\"Java Home\" detail=\"{{::systemInfo.javaHome}}\"></ap-simple-detail><ap-simple-detail title=\"Service Manager Installation Directory\" detail=\"{{::systemInfo.serviceManagerInstallationDirectory}}\"></ap-simple-detail><ap-simple-detail title=\"Service Manager Local Directory\" detail=\"{{::systemInfo.serviceManagerLocalDirectory}}\"></ap-simple-detail><ap-simple-detail title=\"Daily Backups Directory\" detail=\"{{::systemInfo.dailyBackupsDirectory}}\"></ap-simple-detail></ap-details></ap-collapsing-panel></div>");
$templateCache.put("app/modules/serviceManager/views/managers/admin/apiManager.html","<ng-form name=\"apiManagerForm\" novalidate><div class=\"container-fluid\"><ap-header main-title=\"APIs\" sub-title=\"For advanced users only\" context=\"management\" loading-indicator=\"loadingIndicator\"></ap-header><div class=\"row\"><ap-breadcrumbs crumbs=\"::breadcrumbs\"></ap-breadcrumbs></div><br><br><div class=\"row details-page\"><ap-collapsing-panel data-title=\"Service Default Values\" should-collapse=\"::true\">Update default value of an input parameter across all existing services.<br><br><ng-form name=\"updateDefaultValuesForm\" novalidate><ap-details><ap-detail title=\"Param name\" detail-class=\"empty-border\"><input type=\"text\" ng-model=\"holder.paramName\" name=\"paramName\" required class=\"row-input form-control\"></ap-detail><ap-detail title=\"New Value\" detail-class=\"empty-border\"><input type=\"text\" ng-model=\"holder.newValue\" name=\"newValue\" class=\"row-input form-control\"></ap-detail></ap-details></ng-form><button title=\"Update\" class=\"btn btn-sm btn-primary\" ng-disabled=\"!updateDefaultValuesForm.$valid\" ng-click=\"updateDefaultValues()\">Update</button></ap-collapsing-panel><ap-collapsing-panel data-title=\"Replace Service\" should-collapse=\"::true\">Rename <span style=\"color: #0b64ac\">service1</span> to <span style=\"color: #0b64ac\">service1-new-name</span>, and <span style=\"color: #0b64ac\">service2</span> to <span style=\"color: #0b64ac\">service1</span>.<br><br><ng-form name=\"replaceServiceForm\" novalidate><table class=\"table table-full-width\"><tbody><tr style=\"height: 72px\"><td style=\"vertical-align:top; width:45%\"><ap-constant-selector constants=\"serviceConstants\" hide-value=\"true\" edited-name=\"service1\" chosen-constant=\"replaceHolder.service1\" is-required=\"::true\" constant-placeholder=\"service1 (to be replaced)\" search-enabled=\"::true\"></ap-constant-selector></td><td style=\"width: 5%; vertical-align:top; line-height: 40px\"><i class=\"fa fa-arrow-right\"></i></td><td style=\"vertical-align:top\"><service-name-editor mode=\"::{new:true}\" service=\"replaceHolder.service1NewName\" edited-placeholder=\"service1 new name\"></service-name-editor></td></tr><tr style=\"height: 72px\"><td style=\"vertical-align:top; width:45%\"><ap-constant-selector constants=\"serviceConstants\" hide-value=\"true\" edited-name=\"service2\" chosen-constant=\"replaceHolder.service2\" is-required=\"::true\" search-enabled=\"::true\" constant-placeholder=\"service2 (disappears)\"></ap-constant-selector></td><td style=\"width: 5%; vertical-align:top; line-height: 40px\"><i class=\"fa fa-arrow-right\"></i></td><td style=\"vertical-align:top; line-height: 40px\">{{replaceHolder.service1 !== \'\' ? replaceHolder.service1.name : \'(service1)\'}}</td></tr></tbody></table></ng-form><button title=\"Update\" class=\"btn btn-sm btn-primary\" ng-disabled=\"!replaceServiceForm.$valid\" ng-click=\"replaceService()\">Replace</button></ap-collapsing-panel></div></div></ng-form>");
$templateCache.put("app/modules/serviceManager/views/managers/admin/backupSelector.html","<ui-select ng-model=\"backup.properties\" theme=\"bootstrap\" name=\"caseNameInput\" required><ui-select-match placeholder=\"select a backup\">{{$select.selected.displayName}}</ui-select-match><ui-select-choices repeat=\"selectedBackup in backups | filter: {name:$select.search}\" refresh-delay=\"0\" position=\"down\"><div ng-bind-html=\"selectedBackup.displayName | highlight: $select.search\"></div></ui-select-choices></ui-select>");
$templateCache.put("app/modules/serviceManager/views/managers/admin/changelog.html","<div class=\"container-fluid\"><div class=\"row\"><ap-breadcrumbs crumbs=\"::crumbs\"></ap-breadcrumbs></div><div class=\"row\"><ap-header mode=\"::details\" context=\"entity\" main-title=\"Changelog\"></ap-header></div><div class=\"row details-page\"><div ng-if=\"versionData === \'\'\">Version information unavailable, see log for more details.</div><div ng-if=\"versionData !== \'\'\"><!-- <ap-collapsing-panel data-title=\"Current version\">\r\n	    		<ap-details>\r\n		    		<ap-simple-detail title=\"Version\" detail=\"{{::versionData.currentVersionDate}} ({{::versionData.currentVersion}})\"></ap-simple-detail>\r\n		    		<ap-simple-detail title=\"Available updates\" detail=\"{{::versionData.versionDifference}}\"></ap-simple-detail>\r\n		    	</ap-details>\r\n	    	</ap-collapsing-panel> --><ap-collapsing-panel data-title=\"Releases\"><ap-details><ap-detail ng-repeat=\"release in ::versionData.releases\" title=\"{{::release.name}}\">{{::release.date + \'\\r\\n(\' + release.version + \')\'}} <span ng-if=\"::release.version === versionData.currentVersion\" class=\"label label-info\">Current version</span><br><br><ul><li ng-repeat=\"changelogLine in ::release.changelog\">{{::changelogLine}}</li></ul></ap-detail></ap-details><div style=\"color: #9b9b9b; margin-bottom: 15px\">Showing ServiceManager release versions since 11-2017.</div></ap-collapsing-panel></div></div></div>");
$templateCache.put("app/modules/serviceManager/views/managers/admin/dailyBackupDialog.html","<form name=\"dailyBackupDialogForm\" novalidate><md-dialog aria-label=\"{{::title}}\" class=\"normal-dialog overflowed-dialog\"><ap-form-dialog title=\"Select a Daily Backup\" save-label=\"Restore\" save-callback=\"restoreDailyBackup(dailyBackupHolder.dailyBackup.properties)\" save-allowed=\"dailyBackupHolder.dailyBackup.properties.displayName.length > 0\"><ap-backup-selector backup=\"dailyBackupHolder.dailyBackup\" backups=\"::dailyBackups\"></ap-backup-selector></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/serviceManager/views/managers/admin/domainManager.html","<div class=\"container-fluid\"><ap-breadcrumbs crumbs=\"::formDomainManagerCrumbs\"></ap-breadcrumbs><ng-form name=\"domainForm\" novalidate><ap-header context=\"entity\" main-title=\"Domains\" loading-indicator=\"loadingIndicator\"><a href=\"#/formUrlManager\" style=\"margin-right: 15px\">View Form URLs</a> <button class=\"btn btn-sm btn-primary\" ng-click=\"updateFormDomains()\" ng-disabled=\"!domainForm.$valid || !hasSelection\" aria-disabled=\"false\">Update selected</button></ap-header><table id=\"domainsTable\" resizeable mode=\"::\'BasicResizer\'\" class=\"table table-bordered table-striped\"><thead><tr><th><ap-global-selector entities=\"domains\" in-table=\"::false\" selected-property=\"selected\" on-change=\"onCheckboxChange()\"></ap-global-selector></th><th>Original Domain</th><th>New Domain</th><th>Type</th></tr></thead><tbody><tr ng-repeat=\"domain in domains | orderBy:\'-type\' track by $index\"><td class=\"center\"><ap-checkbox model=\"domain.selected\" on-change=\"onCheckboxChange()\" in-table=\"::true\"></ap-checkbox></td><td>{{::assembleUrl(domain.oldDomainInfo, domain.type)}}</td><td><div class=\"row container-fluid\"><ap-constant-selector ng-if=\"::domain.type !== \'DB\'\" hide-value=\"::true\" class=\"col-lg-2\" constants=\"httpProtocols\" chosen-constant=\"domain.newDomainInfo.protocol\"></ap-constant-selector><ap-edited-input model=\"domain.newDomainInfo.hostname\" edited-placeholder=\"{{::domain.oldDomainInfo.hostname}}\" edited-name=\"domainHostnameInput\" model-debounce=\"10\" elimination-options=\"::{eliminateSpecialChars: false}\" is-required=\"true\" required-err-msg=\"hostname is required\" ng-class=\"{\'col-lg-8\': domain.type !== \'DB\'}\"></ap-edited-input><ap-edited-input ng-if=\"::domain.type !== \'DB\'\" model=\"domain.newDomainInfo.port\" edited-placeholder=\"{{::domain.oldDomainInfo.port}}\" elimination-options=\"::{}\" edited-name=\"domainPortInput\" model-debounce=\"200\" edited-type=\"number\" is-required=\"true\" required-err-msg=\"port is required\" min-value=\"80\" min-err-msg=\"port is illegal\" class=\"col-lg-2\"></ap-edited-input></div></td><td>{{::domain.type}}</td></tr></tbody></table></ng-form></div>");
$templateCache.put("app/modules/serviceManager/views/managers/admin/formUrlManager.html","<div class=\"container-fluid\"><ap-breadcrumbs crumbs=\"::crumbs\"></ap-breadcrumbs><ng-form name=\"formUrlsForm\" novalidate><ap-header context=\"entity\" main-title=\"Form URLs\" loading-indicator=\"loadingIndicator\"><a href=\"#/domainManager\" style=\"margin-right: 15px\">View Domains</a> <button class=\"btn btn-sm btn-primary\" ng-click=\"updateFormUrls()\" ng-disabled=\"!formUrlsForm.$valid || !hasSelection\" aria-disabled=\"false\">Update selected</button></ap-header><table id=\"formUrlsTable\" resizeable mode=\"::\'BasicResizer\'\" class=\"table table-bordered table-striped\"><thead><tr><th><ap-global-selector entities=\"formUrls\" in-table=\"::false\" selected-property=\"selected\" on-change=\"onCheckboxChange()\"></ap-global-selector></th><th>Original URL</th><th>New URL</th><th>Type</th></tr></thead><tbody><tr ng-repeat=\"formUrl in formUrls | orderBy:\'-type\' track by $index\"><td class=\"center\"><ap-checkbox model=\"formUrl.selected\" on-change=\"onCheckboxChange()\" in-table=\"::true\"></ap-checkbox></td><td>{{::formUrl.url}}</td><td><div class=\"row container-fluid\"><ap-edited-input model=\"formUrl.newUrl\" edited-placeholder=\"{{::formUrl.newUrl}}\" edited-name=\"formUrlInput\" model-debounce=\"10\" elimination-options=\"::{eliminateSpecialChars: false}\" is-required=\"true\" required-err-msg=\"Form URL is required\"></ap-edited-input></div></td><td>{{::formUrl.type}}</td></tr></tbody></table></ng-form></div>");
$templateCache.put("app/modules/serviceManager/views/managers/admin/sessionManager.html","<div class=\"container-fluid\"><div class=\"row\"><ap-breadcrumbs crumbs=\"::systemPropertiesCrumbs\"></ap-breadcrumbs></div><div class=\"row\"><ap-header mode=\"::details\" context=\"management\" main-title=\"Session Manager\" sub-title=\"Listing of open connections\"></ap-header></div><div class=\"row details-page\"><ap-collapsing-panel data-title=\"General\"><ap-details><ap-detail title=\"Server Time\">{{sessionData.serverTime}}</ap-detail><ap-detail title=\"Max sessions (per url)\">{{sessionData.maxConnections}}</ap-detail></ap-details></ap-collapsing-panel><ap-collapsing-panel data-title=\"Player pools\"><div ng-repeat=\"(pool,poolSessions) in sessionData.playerSessions track by $index\"><ap-details><ap-detail title=\"Active sessions for:\">{{pool}}</ap-detail><ap-detail title=\"Connecting/Waiting:\">{{poolSessions.connectingWorkers}} / {{poolSessions.waitingWorkers}}</ap-detail></ap-details><table class=\"table table-striped table-bordered table-hover table-full-width\"><thead><tr><th>Session Id</th><th>Last Activity (seconds)</th><th>Initialization Time (seconds)</th><th>Actions</th></tr></thead><tbody><tr ng-repeat=\"session in poolSessions.sessions\"><td>{{::session.sessionId}}</td><td>{{session.millisSinceLastActivity != 0 ? (+session.millisSinceLastActivity / 1000).toFixed(2) : \'Now\'}}</td><td>{{::session.initializationDuration != -1 ? (+session.initializationDuration / 1000).toFixed(2) : \'\'}}</td><td><a ng-if=\"::session.sessionId !== undfined\" ng-click=\"killSession(session.sessionId)\" class=\"btn btn-sm btn-danger\">Kill</a></td></tr></tbody></table></div></ap-collapsing-panel><ap-collapsing-panel data-title=\"DB pools\"><ap-details><ap-detail ng-repeat=\"url in sessionData.dbSessions track by $index\">{{url}}</ap-detail></ap-details></ap-collapsing-panel></div></div>");
$templateCache.put("app/modules/serviceManager/views/managers/admin/statisticsManager.html","<div class=\"container-fluid\"><div class=\"row\"><ap-breadcrumbs crumbs=\"::crumbs\"></ap-breadcrumbs></div><div class=\"row\"><ap-header mode=\"::details\" context=\"management\" main-title=\"Statistics\" loading-indicator=\"loadingIndicator\"></ap-header></div><div class=\"row details-page\"><ap-collapsing-panel data-title=\"Service usage\"><ap-details ng-if=\"::statistics.services.length > 0\"><ap-detail title=\"Statistics since\" detail-class=\"empty-border\">{{::statistics.fromDate}} <button class=\"btn btn-sm btn-bricky pull-right\" style=\"margin-right: 20px\" ng-click=\"resetExecutionLog()\"><i class=\"clip clip-file-remove\"></i> Reset</button> <a href=\"/ServiceManager/Macro/ExecutionLogDownload\" class=\"btn btn-sm btn-primary pull-right\" style=\"margin-right: 12px\">Execution Log</a></ap-detail></ap-details><ap-statistics-grid statistics=\"::statistics\" click-callback=\"::openChart(serviceName, type)\"></ap-statistics-grid><br><br><i class=\"clip clip-notification\"></i> AuraTester / Monitoring calls are excluded from statistics view.</ap-collapsing-panel><ap-collapsing-panel data-title=\"{{getChartTitle()}}\" on-open=\"onChartOpen()\" should-collapse=\"selectedService.name === undefined || selectedService.executionLogs !== undefined\"><span ng-if=\"selectedService.name === undefined\">Click on a service to view chart.</span><ap-response-time-chart ng-if=\"selectedService.executionLogs !== undefined\" service-type=\"selectedService.type\" system-properties=\"::systemProperties\" key=\"selectedService.name\" chart-data=\"selectedService.executionLogs\"></ap-response-time-chart></ap-collapsing-panel></div></div>");
$templateCache.put("app/modules/serviceManager/views/managers/admin/systemProperties.html","<div class=\"container-fluid\"><ap-breadcrumbs crumbs=\"::systemPropertiesCrumbs\"></ap-breadcrumbs><ap-header context=\"entity\" main-title=\"System Properties Manager\" loading-indicator=\"loadingIndicator\"><button class=\"btn btn-sm btn-primary\" ng-click=\"updateProperties()\" ng-disabled=\"loadingIndicator.isLoading\">Update properties</button></ap-header><div class=\"row details-page\"><ap-collapsing-panel title=\"System Properties\" should-collapse=\"::true\"><ap-editor mode=\"properties\" edited=\"propertiesHolder.properties\" save-callback=\"updateProperties()\" editor-theme=\"dawn\" editor-height=\"600\"></ap-editor></ap-collapsing-panel></div></div>");
$templateCache.put("app/modules/serviceManager/views/managers/file/fileExplorer.html","<div class=\"col-sm-3 col-md-2 sidebar file-tree animated slow fadeIn\"><ul class=\"nav nav-sidebar file-tree-root\"><li ng-repeat=\"item in fileNavigator.history\" ng-include=\"\'folder-branch-item\'\" ng-class=\"{\'active\': item.name === fileNavigator.currentPath.join(\'/\')}\"></li></ul><script type=\"text/ng-template\" id=\"folder-branch-item\"><a href=\"\" ng-click=\"fileNavigator.folderClick(item.item)\" class=\"animated fast fadeInDown\">\n            <i class=\"glyphicon glyphicon-folder-close mr2\" ng-hide=\"isInThisPath(item.name)\"></i>\n            <i class=\"glyphicon glyphicon-folder-open mr2\" ng-show=\"isInThisPath(item.name)\"></i>\n            {{(item.name.split(\'/\').pop() || \'/\') | strLimit : 24}}\n        </a>\n        <ul class=\"nav nav-sidebar\">\n            <li ng-repeat=\"item in item.nodes\" ng-include=\"\'folder-branch-item\'\"\n                ng-class=\"{\'active\': item.name == fileNavigator.currentPath.join(\'/\')}\">\n            </li>\n        </ul></script></div>");
$templateCache.put("app/modules/serviceManager/views/managers/file/fileExplorerBreadcrumbs.html","<ol class=\"breadcrumb mb0\"><li><a href=\"\" ng-click=\"fileNavigator.goTo(-1)\"><i class=\"glyphicon glyphicon-folder-open mr2\"></i></a></li><li ng-repeat=\"(key, dir) in fileNavigator.currentPath track by key\" ng-class=\"{\'active\':$last}\" class=\"animated medium fadeIn\"><a href=\"\" ng-show=\"!$last\" ng-click=\"fileNavigator.goTo(key)\"><i class=\"glyphicon glyphicon-folder-open mr2\"></i> {{dir}} </a><span ng-show=\"$last\"><i class=\"glyphicon glyphicon-folder-open mr2\"></i> {{dir}}</span></li><li><button class=\"btn btn-primary btn-xs\" ng-click=\"fileNavigator.upDir()\">&crarr;</button></li></ol>");
$templateCache.put("app/modules/serviceManager/views/managers/file/fileGrid.html","<div ng-if=\"files.length === 0\"><h4>No files to manage</h4></div><div ng-if=\"files.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"files\" column-defs=\"::columnDefs\" filtered-columns=\"::filteredColumns\" use-selection=\"::false\"></ap-paged-grid></div>");
$templateCache.put("app/modules/serviceManager/views/managers/file/fileManager.html","<div class=\"row\"><ap-breadcrumbs crumbs=\"::fileManagementCrumbs\"></ap-breadcrumbs></div><div class=\"container-fluid\"><ap-header context=\"management\" main-title=\"Server files\" sub-title=\"File system manager\" loading-indicator=\"loader.indicator\"><div class=\"row management-inline-actions\"><ap-file-browser file-handler=\"handleFileUpload(file)\" mode=\"symbol\" button-tooltip=\"Upload file\"></ap-file-browser></div><div class=\"row\"><ap-file-explorer ng-if=\"fileNavigator.history[0]\"></ap-file-explorer><div class=\"main\" ng-class=\"{\'col-sm-9 col-md-10\':fileNavigator.history[0]}\"><ap-file-explorer-breadcrumbs></ap-file-explorer-breadcrumbs><ap-file-grid files=\"fileNavigator.fileList\"></ap-file-grid></div></div></ap-header></div>");
$templateCache.put("app/modules/serviceManager/views/managers/file/filePreviewDialog.html","<md-dialog aria-label=\"File Preview\" class=\"very-wide-dialog\"><ap-form-dialog title=\"{{::fileName + \' preview\'}}\" save-visible=\"::false\" cancel-label=\"close\"><ap-editor edited=\"fileContent\" editor-height=\"300\" should-disable=\"::true\"></ap-editor></ap-form-dialog></md-dialog>`");
$templateCache.put("app/modules/serviceManager/views/managers/file/recordingsGrid.html","<div ng-if=\"recordings.length === 0\"><h5 class=\"entity-absence-indicator\">No recordings</h5></div><div ng-if=\"recordings.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"recordings\" column-defs=\"::columnDefs\" filtered-columns=\"::filteredColumns\" enable-filtering=\"::true\"></ap-paged-grid></div>");
$templateCache.put("app/modules/serviceManager/views/managers/file/recordingsManager.html","<div class=\"row\"><ap-breadcrumbs crumbs=\"::recordingsManagerCrumbs\"></ap-breadcrumbs></div><div class=\"container-fluid\"><ap-header context=\"management\" main-title=\"Recordings Manager\" sub-title=\"ORP and HTML recording files\" loading-indicator=\"loadingIndicator\"><ap-file-browser file-handler=\"uploadRecording(file)\" file-filter=\".orp,.html\" mode=\"symbol\" button-tooltip=\"Upload recording\"></ap-file-browser><ap-group-action actions=\"::fileManagementGroupActions\" entities=\"recordings\"></ap-group-action></ap-header></div><ap-recordings-grid recordings=\"recordings\" num-of-services=\"::numOfServices\" license-details=\"::licenseDetails\"></ap-recordings-grid>");
$templateCache.put("app/modules/serviceManager/views/managers/service/serviceGrid.html","<div ng-if=\"!(services.length > 0)\"><h5 class=\"entity-absence-indicator\">No services</h5></div><div ng-if=\"services.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"services\" table-actions=\"::tableActions\" column-defs=\"::columnDefs\" filtered-columns=\"::filteredColumns\" use-selection=\"::useSelection\" clear-selection=\"::clearSelection\" compact-view=\"::compactView\" enable-pagination=\"::enablePagination\" enable-select-all=\"::enableSelectAll\" enable-filtering=\"::true\" enable-draggable=\"::enableDraggable\" use-inline-actions=\"!readOnly\"></ap-paged-grid></div>");
$templateCache.put("app/modules/serviceManager/views/managers/service/serviceManager.html","<ap-license-tester privileged=\"::isServiceManagementPrivileged()\"></ap-license-tester><div ng-if=\"::isServiceManagementPrivileged()\"><div class=\"container-fluid\"><ap-header context=\"management\" main-title=\"Service Manager\" sub-title=\"Create, Edit & Manage your services\" loading-indicator=\"loadingIndicator\"><div class=\"dropdown\" style=\"display:inline-block\" check-permission><a href=\"javascript:void(0)\" data-toggle=\"dropdown\" class=\"btn btn-primary btn-success\"><span class=\"glyphicon glyphicon-plus\"></span> <b class=\"caret\"></b></a><ul class=\"dropdown-menu\"><li><a href=\"javascript:void(0)\" ng-click=\"recordNewService()\">Forms service</a></li><li class=\"divider narrow-divider\"></li><li><a href=\"javascript:void(0)\" ng-click=\"openHtmlInstructions()\">HTML service</a></li><li class=\"divider narrow-divider\"></li><li><a href=\"javascript:void(0)\" ng-click=\"createDbService()\">DB service</a></li><li class=\"divider narrow-divider\"></li><li><a href=\"javascript:void(0)\" ng-click=\"createJsService()\">JavaScript service</a></li><li class=\"divider narrow-divider\"></li><li><a href=\"javascript:void(0)\" ng-click=\"createTicketService()\">Ticket service</a></li></ul></div><ap-file-browser file-handler=\"uploadRecording(file)\" file-filter=\".orp,.html\" mode=\"symbol\" button-tooltip=\"Upload recording\"></ap-file-browser><ap-group-action actions=\"::serviceManagementGroupActions\" entities=\"services\"></ap-group-action></ap-header></div><service-grid services=\"services\" visible-columns=\"::systemProperties.SERVICE_TABLE_COLUMNS\" clear-selection=\"::true\" license-details=\"::licenseDetails\"></service-grid></div>");
$templateCache.put("app/modules/serviceManager/views/managers/service/serviceSelector.html","<ui-select ng-model=\"service.properties\" theme=\"bootstrap\" autofocus name=\"serviceNameInput\" required on-select=\"handleServiceSelect($item, $model)\"><ui-select-match placeholder=\"{{::context === \'testCases\' ? \'select/create a service\' : \'select a service\'}}\">{{$select.selected.name}}</ui-select-match><ui-select-choices group-by=\"\'context\'\" repeat=\"selectedService in services | filter: {name:$select.search} | orderBy:\'isCreateOption\' track by selectedService.name\" refresh-delay=\"0\" position=\"down\"><div ng-bind-html=\"selectedService.name | highlight: $select.search\"></div></ui-select-choices></ui-select>");
$templateCache.put("app/modules/serviceManager/views/managers/service/serviceTester.html","<ap-loader indicator=\"loadingSaveResponse\"></ap-loader><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-sm-12\"><ap-breadcrumbs crumbs=\"::testServiceCrumbs\"></ap-breadcrumbs><ap-header context=\"entity\" main-title=\"Service Tester\"><button class=\"btn btn-sm btn-primary\" ng-click=\"runTest()\" ng-disabled=\"loadingIndicator.isLoading || (service.hasInputList && !postInput.activated)\">Run Test</button> <a ng-href=\"#/logViewer\" class=\"btn btn-sm btn-primary\" a-disabled=\"loadingIndicator.isLoading\">View Log </a><a ng-href=\"#/testCaseEditor/new/{{::service.name}}\" ng-if=\"::isTestCaseManagementPrivileged()\" check-permission class=\"btn btn-sm btn-primary\" a-disabled=\"service.hasInputList || service.isSingleOutput || loadingIndicator.isLoading\">Create Test Case </a><button class=\"btn btn-sm btn-primary\" ng-click=\"resetToDefault()\" ng-disabled=\"loadingIndicator.isLoading\">Reset Values</button></ap-header></div></div><div class=\"row details-page\"><ap-collapsing-panel data-title=\"Details\" bindable-collapse=\"collapseManager.collapseServiceDetails\"><ap-details><ap-simple-detail data-title=\"Service Name\" detail-class=\"empty-border\" detail=\"{{::service.name}}\"></ap-simple-detail><ap-simple-detail data-title=\"Description\" detail=\"{{::service.description}}\"></ap-simple-detail><ap-simple-detail data-title=\"Service Url\" detail=\"{{::service.serviceUrl}}\"></ap-simple-detail><ap-simple-detail data-title=\"DB Url\" detail=\"{{::service.formUrl}}\" ng-if=\"::service.type === \'DB\'\"></ap-simple-detail><ap-simple-detail data-title=\"Query\" detail=\"{{::service.command}}\" ng-if=\"::service.type === \'DB\'\"></ap-simple-detail></ap-details></ap-collapsing-panel></div><div class=\"row details-page\"><ap-collapsing-panel data-title=\"Input Parameters\" bindable-collapse=\"collapseManager.collapseInputParameters\"><div ng-if=\"::service.hasInputList\" class=\"purple\"><i class=\"clip clip-info\"></i> Service uses input in loop, you may only run it by <a href=\"\" ng-click=\"postInput.activated || switchInputMethod()\">POST request with JSON body</a>.<br><br></div><service-input-parameter-table ng-if=\"!postInput.activated\" mode=\"::mode\" service=\"::service\" system-properties=\"::systemProperties\" table-config=\"::inputParamTableConfig\"></service-input-parameter-table><div ng-if=\"postInput.activated\" style=\"margin-bottom: 20px\"><ap-editor mode=\"json\" edited=\"postInput.value\"></ap-editor></div><div ng-if=\"postInput.activated\"><button class=\"btn btn-sm btn-primary\" ng-click=\"resetPostInput()\" style=\"float:right\">Reset Input</button><br><br></div><a href=\"\" ng-click=\"switchInputMethod()\" style=\"float:right\">{{postInput.activated? \'Send Query\' : \'POST JSON\'}}</a></ap-collapsing-panel></div><div class=\"row details-page\"><ap-collapsing-panel data-title=\"Advanced\" bindable-collapse=\"collapseManager.collapseAdvancedSettings\"><ap-details><ap-detail data-title=\"Http Method\" detail-class=\"empty-border\"><ap-constant-selector constants=\"httpMethods\" chosen-constant=\"testServiceRequestInfo.httpMethod\" on-select-callback=\"onHttpMethodChange(constant)\" hide-value=\"true\"></ap-constant-selector></ap-detail><ap-detail data-title=\"Show As Json\"><ap-checkbox model=\"testServiceRequestInfo.showAsJson\"></ap-checkbox></ap-detail><ap-detail data-title=\"Handle Pop-ups\"><ap-checkbox model=\"testServiceRequestInfo.handlePopups\"></ap-checkbox></ap-detail><ap-detail data-title=\"Use Labels As Keys\"><ap-checkbox model=\"testServiceRequestInfo.useLabelsAsKeys\" should-disable=\"::true\"></ap-checkbox></ap-detail><ap-detail data-title=\"Rows In Table\"><input type=\"number\" class=\"form-control\" ng-model=\"testServiceRequestInfo.numOfRowsInTable\"></ap-detail><ap-detail data-title=\"Request Query\"><ap-editor edited=\"query\" should-disable=\"true\" editor-height=\"60\" show-gutter=\"::false\" editor-theme=\"chrome\" editor-scroll=\"{horizontal: false, vertical: false}\"></ap-editor></ap-detail></ap-details></ap-collapsing-panel></div><div class=\"row details-page action-row\"><button class=\"btn btn-sm btn-primary\" ng-click=\"runTest()\" ng-disabled=\"loadingIndicator.isLoading || (service.hasInputList && !postInput.activated)\">Run Test</button> <button class=\"btn btn-sm btn-yellow\" ng-click=\"saveAsMock()\" ng-if=\"xmlResult.length > 0 || jsonResult.length > 0\" ng-disabled=\"loadingIndicator.isLoading || (service.hasInputList && !postInput.activated)\">Save as Mock</button> <button class=\"btn btn-sm btn-green\" ng-click=\"saveAsVbcs()\" ng-if=\"xmlResult.length > 0 || jsonResult.length > 0\" ng-disabled=\"loadingIndicator.isLoading || (service.hasInputList && !postInput.activated)\">Save as VBCS</button> <span ng-if=\"jsonResult.length > 0\" style=\"float: right; color: lightgray\">{{::calculateArraySize()}}</span></div><div ng-if=\"loadingIndicator.isLoading || xmlResult.length > 0 || jsonResult.length > 0\" class=\"row details-page\"><ap-collapsing-panel data-title=\"{{testServiceResultTitle}}\" should-collapse=\"xmlResult.length > 0 || jsonResult.length > 0\"><div ng-hide=\"loadingIndicator.isLoading\"><ap-editor ng-show=\"!testServiceRequestInfo.showAsJson\" mode=\"xml\" edited=\"xmlResult\" should-disable=\"true\" editor-theme=\"dawn\"></ap-editor><ap-editor ng-show=\"testServiceRequestInfo.showAsJson\" mode=\"json\" edited=\"jsonResult\" should-disable=\"true\" editor-theme=\"dawn\"></ap-editor></div></ap-collapsing-panel></div><ap-loader indicator=\"loadingIndicator\" is-full-screen=\"false\"></ap-loader></div>");
$templateCache.put("app/modules/serviceManager/views/managers/service/usernamePasswordDialog.html","<form name=\"usernamePasswordForm\" novalidate><md-dialog class=\"wide-dialog\"><div class=\"panel-heading dialog-heading center\"><h4>{{::title}}</h4></div><div class=\"panel-body\"><ap-details><ap-detail title=\"Username\" detail-class=\"empty-border\" ng-class=\"{\'has-error\' : usernamePasswordForm.username.$invalid}\"><input type=\"text\" class=\"form-control input-sm\" required ng-model=\"credentials.username\" name=\"username\" ng-model-options=\"::{debounce: 200}\"></ap-detail><ap-detail title=\"Password\" detail-class=\"empty-border\" ng-class=\"{\'has-error\' : usernamePasswordForm.password.$invalid}\"><input type=\"password\" class=\"form-control input-sm\" required ng-model=\"credentials.password\" name=\"password\" ng-model-options=\"::{debounce: 200}\"></ap-detail></ap-details></div><div class=\"panel-footer dialogFooterButtons\"><span ng-bind-html=\"comment\"></span> <span class=\"pull-right\"><span title=\"{{usernamePasswordForm.$valid ? \'\' : \'Invalid fields marked in red\'}}\"><button class=\"btn btn-primary\" ng-click=\"onConfirm()\" ng-disabled=\"!usernamePasswordForm.$valid\">OK</button> </span><button title=\"\" class=\"btn btn-default\" ng-click=\"onCancel()\">Cancel</button></span></div></md-dialog></form>");
$templateCache.put("app/modules/serviceManager/views/user/log/logViewer.html","<ap-loader indicator=\"loadingIndicator\"></ap-loader><div class=\"container-fluid\"><ap-breadcrumbs crumbs=\"::logViewerCrumbs\"></ap-breadcrumbs><button class=\"btn btn-sm\" style=\"float:left; margin-top: 18px\" ng-click=\"scrollToBeginning()\" ng-disabled=\"logTopIndex.value === 0\" ng-if=\"::user.isManager()\"><i class=\"fa fa-caret-up\"></i></button> <button class=\"btn btn-sm\" style=\"float:left; margin-top: 18px\" ng-click=\"scrollToEnd()\" ng-disabled=\"logTopIndex.value >= dynamicLogs.logCount - 50\"><i class=\"fa fa-caret-down\"></i></button> <button class=\"btn btn-sm btn-red pull-right\" style=\"margin-top: 18px\" ng-click=\"rotate()\" ng-disabled=\"loadingIndicator.isLoading\" ng-if=\"::user.isManager()\"><i class=\"fa fa-eraser\"></i></button> <button class=\"btn btn-sm btn-teal pull-right\" style=\"margin-top: 18px\" ng-click=\"refresh()\" ng-disabled=\"loadingIndicator.isLoading\"><i class=\"clip clip-refresh\"></i></button> <a href=\"/ServiceManager/Macro/LogDownload\" class=\"btn btn-sm btn-purple pull-right\" style=\"margin-top: 18px; margin-left:8px\"><i class=\"clip clip-download-2\"></i></a><div layout=\"row\" layout-margin><ap-constant-selector flex=\"12\" constants=\"logLevels\" hide-value=\"::true\" chosen-constant=\"logLevel.value\"></ap-constant-selector><ap-constant-selector flex=\"12\" constants=\"logContexts\" hide-value=\"::true\" chosen-constant=\"logContext.value\"></ap-constant-selector><input flex=\"68\" type=\"text\" ng-model=\"logFilter.value\" class=\"form-control\" placeholder=\"filter logs..\" autofocus focus-me=\"::true\" ng-model-options=\"::{debounce:20}\" style=\"margin-top: 11px\"></div><div class=\"row details-page\"><md-virtual-repeat-container class=\"log-container\" md-top-index=\"logTopIndex.value\"><div md-virtual-repeat=\"logLine in dynamicLogs\" md-on-demand class=\"repeated-log\" flex><div class=\"{{inferLogLevel(logLine) + \'-log\'}}\"><div ng-bind-html=\"logLine.value | trusted\"></div></div></div></md-virtual-repeat-container></div></div>");
$templateCache.put("app/modules/serviceManager/views/user/login/login.html","<div id=\"login_image\"><img ng-src=\"assets/images/auroplayer_login.png\" alt=\"\"></div><div id=\"login_form\"><form name=\"loginForm\" ng-submit=\"login()\" role=\"form\" novalidate><div class=\"form-group\"><i class=\"fa fa-key\"></i><label for=\"username\">Email address or username</label><input type=\"text\" ng-model=\"userInfo.username\" id=\"login_username\" class=\"form-control\" name=\"username\" focus-me=\"focusInfo.username\" required><div ng-messages=\"loginForm.username.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">username is required</div></div></div><div class=\"form-group\"><i class=\"fa fa-lock\"></i><label for=\"password\">Password</label><input type=\"password\" ng-model=\"userInfo.password\" id=\"login_password\" class=\"form-control\" name=\"password\" required><div ng-messages=\"loginForm.password.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">password is required</div></div></div><div class=\"form-actions\"><button type=\"submit\" ng-disabled=\"loginForm.$invalid\" class=\"btn btn-primary btn-block\">Sign In</button></div></form></div><ap-loader indicator=\"loadingIndicator\"></ap-loader>");
$templateCache.put("app/modules/serviceManager/views/user/support/support.html","<div class=\"row support-page top30\"><div class=\"col-lg-10 col-md-11 col-lg-offset-1\"><div class=\"col-md-8\"><div id=\"support-page-search\"><span id=\"support-page-search-title\" class=\"col-lg-5 hidden-xs hidden-sm hidden-md\">Need Help ?</span><div id=\"support-page-search-form\" class=\"col-lg-7 col-md-12 col-lg-push-1\"><form class=\"navbar-form\" role=\"search\" ng-submit=\"search()\" novalidate><input type=\"text\" id=\"support-page-search-input\" ng-model=\"searchTerm\" class=\"form-control\" placeholder=\"Search\"><div class=\"input-group-btn\"><button type=\"submit\" id=\"support-page-search-button\" class=\"btn btn-default\"><i class=\"glyphicon glyphicon-search\"></i></button></div></form></div></div></div><div class=\"col-md-4\"><div id=\"support-contact-our-team\"><div id=\"support-contact-our-team-header\">Support</div><div id=\"support-contact-our-team-body\"><ul class=\"panel-body\" style=\"margin-left:15px\"><li><a ng-href=\"http://www.auraplayer.com/about-us/contact/\" target=\"_blank\">Contact Us</a></li></ul></div></div></div></div></div><div class=\"row support-page top30\"><div class=\"col-lg-10 col-md-11 col-lg-offset-1\"><div class=\"col-md-7\"><embed width=\"100%\" height=\"285\" src=\"http://www.youtube.com/embed/e14_V7A8OCg\"></div><div class=\"col-md-5\"><ap-collapsing-panel title=\"Video gallery\" should-collapse=\"::true\"><li><a ng-href=\"https://www.youtube.com/user/adminoraplayer/videos\" target=\"_blank\">Training video gallery</a></li></ap-collapsing-panel></div></div></div><div class=\"row support-page top30\"><div class=\"col-lg-10 col-md-11 col-lg-offset-1\"><div class=\"col-md-4\"><ap-collapsing-panel title=\"Prerequisites & Install guides\" should-collapse=\"::true\"><li style=\"padding-bottom:7px\"><a ng-href=\"http://www.auraplayer.com/wp-content/uploads/2014/12/InstallationRequirements_New_Final1.pdf\" target=\"_blank\">Pre-requirements for Installing AuraPlayer</a></li><li style=\"padding-bottom:7px\"><a ng-href=\"http://www.auraplayer.com/wp-content/uploads/2015/01/Installing_AuraPlayer_Weblogic.pdf\" target=\"_blank\">Installation Guide for AuraPlayer on Windows with Weblogic</a></li><li style=\"padding-bottom:1px\"><a ng-href=\"http://www.auraplayer.com/wp-content/uploads/2014/12/Installing_AuraPlayer_Tomcat_Linux-1.pdf\" target=\"_blank\">Installation Guide For AuraPlayer on Linux with Tomcat</a></li></ap-collapsing-panel></div><div class=\"col-md-4\"><ap-collapsing-panel title=\"How-To Guide\" should-collapse=\"::true\"><li><a ng-href=\"http://www.auraplayer.com/apsupport/attachment/new-ui-user-guide/\" target=\"_blank\">New UI</a></li><li><a ng-href=\"http://www.auraplayer.com/wp-content/uploads/2015/01/Service-Manager-User-Guide.pdf\" target=\"_blank\">Old UI</a></li></ap-collapsing-panel></div><div class=\"col-md-4\"><ap-collapsing-panel title=\"Browse FAQs\" should-collapse=\"::true\"><li style=\"padding-bottom:7px\"><a ng-href=\"https://auraplayer.zendesk.com/hc/en-us\" target=\"_blank\">Knowledge base</a></li></ap-collapsing-panel></div></div></div>");
$templateCache.put("app/modules/serviceManager/views/managers/service/parameters/outputParameterConfigDialog.html","<form name=\"testedValueForm\" novalidate><md-dialog aria-label=\"Configure Output\" class=\"overflowed-dialog wide-dialog\"><ap-form-dialog data-title=\"Configure Output\" save-callback=\"saveChanges()\" save-allowed=\"testedValueForm.$valid\"><ap-details><ap-detail data-title=\"Validation: fail when\" detail-class=\"empty-border\" should-paint-background=\"true\"><ap-constant-selector mode=\"::mode\" constants=\"validationFunctions\" hide-value=\"true\" constant-placeholder=\"choose validation function\" chosen-constant=\"localOutputParam.validationFunction\" on-select-callback=\"handleValidationFunctionSelect(constant)\"></ap-constant-selector></ap-detail><ap-detail data-title=\"Validated value\" should-paint-background=\"true\"><div ng-class=\"{\'has-error\':testedValueForm.testedValue.$invalid}\"><input type=\"text\" class=\"form-control input-medium\" placeholder=\"tested value\" ng-model=\"localOutputParam.testedValue\" name=\"testedValue\" ng-required=\"isTestedValueRequired() && !hasParameterizedValue()\" ng-disabled=\"!isTestedValueRequired()\"></div></ap-detail><ap-detail ng-if=\"::localOutputParam.inTable\" detail-class=\"empty-border\" should-paint-background=\"true\"><i class=\"clip clip-notification\"></i> Multi-Record validations will be applied on the first value only!</ap-detail><ap-detail ng-if=\"::service.type === \'Forms\' && !localOutputParam.inTable\" data-title=\"Returned value\" detail-class=\"empty-border\"><ap-checkbox title=\"Copy from input\" model=\"localOutputParam.fromInput\"></ap-checkbox><br></ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/serviceManager/views/managers/service/parameters/serviceInputParameterTable.html","<table id=\"serviceInputParameterTable\" resizeable mode=\"::\'BasicResizer\'\" class=\"table table-bordered table-striped\"><thead><tr><th ng-if=\"::mode.edit && tableConfig.move.visible\" class=\"center medium-column\"></th><th ng-if=\"::tableConfig.visible.visible\" class=\"hidden-xs center narrow-column\">Visible</th><th ng-class=\"{\'column-key-indication\':!service.useLabelsAsKeys}\">Name</th><th ng-if=\"::service.type !== \'JS\'\" ng-class=\"{\'column-key-indication\':service.useLabelsAsKeys}\">Label</th><th>Default Value</th><th ng-if=\"::mode.edit && tableConfig.actions.visible\">Actions</th></tr></thead><tbody ui-sortable=\"::tableSortingOptions\" ng-model=\"service.inputParams\"><tr ng-repeat=\"inputParam in service.inputParams track by $index\" ng-class=\"::{\'unsortable\': !mode.edit, \'purple\': inputParam.inList}\"><td ng-if=\"::mode.edit && tableConfig.move.visible\" class=\"clickable-column\"><i class=\"fa fa-arrows sorter\"></i></td><td ng-if=\"::tableConfig.visible.visible\" class=\"narrow-column center\"><ap-checkbox model=\"inputParam.visible\" should-disable=\"::mode.details || tableConfig.visible.disabled\" in-table=\"::true\"></ap-checkbox></td><td title=\"{{inputParam.id.name}}\" class=\"wrapped-column\">{{inputParam.id.name}}</td><td ng-if=\"::service.type !== \'JS\'\"><span ng-if=\"::!tableConfig.label.editable\">{{inputParam.paramLabel}} </span><span ng-if=\"::tableConfig.label.editable\"><ap-edited-input ng-if=\"!service.useLabelsAsKeys\" mode=\"::mode\" model=\"inputParam.paramLabel\" edited-placeholder=\"label\" should-disable=\"::tableConfig.label.disabled\" model-debounce=\"::{debounce : 200}\" elimination-options=\"::{disabled:true}\"></ap-edited-input><ap-input-param-label-editor ng-if=\"service.useLabelsAsKeys\" mode=\"::mode\" input-param=\"inputParam\" service=\"::service\" should-disable=\"::tableConfig.label.disabled\"></ap-input-param-label-editor></span></td><td><ap-data-type-value mode=\"::{edit: mode.edit || (mode.test && inputParam.visible)}\" param=\"inputParam\" placeholder=\"default value\"></ap-data-type-value></td><td ng-if=\"::mode.edit && tableConfig.actions.visible\"><a ng-click=\"moveToOutputParams(inputParam)\" class=\"btn btn-sm\"><i ng-if=\"::tableConfig.actions.visible\" class=\"fa fa-caret-square-o-down\"></i> </a><a ng-if=\"inputParam.isCustom && !quantityReadOnly\" ng-click=\"deleteInputParam($index)\" class=\"btn btn-sm btn-red\"><i class=\"clip clip-remove\"></i></a></td></tr><tr ng-if=\"newParam !== undefined\" service-input-parameter-table-new-row></tr></tbody></table><div ng-if=\"::mode.edit\" class=\"row details-page action-row\"><span ng-if=\"newParam === undefined && tableConfig.addButton.visible && !quantityReadOnly\" style=\"padding-left: 12px\"><a ng-click=\"openInlineInputParamEditor()\" class=\"btn btn-sm btn-green tooltips\" data-original-title=\"add\"><i class=\"clip-plus-circle\"></i> </a></span><span class=\"pull-right\" ng-hide=\"quantityReadOnly\"><button ng-if=\"::service.type === \'DB\'\" title=\"Run query to auto-detect output parameters\" ng-disabled=\"!getOutputEnable\" class=\"btn btn-sm btn-teal\" ng-click=\"getOutputCallback()\"><span class=\"fa fa-play\"></span> Get output</button> <button ng-if=\"::service.type === \'Forms\'\" class=\"btn btn-sm btn-primary\" ng-click=\"resetInputParametersToFormDefaultValues()\">Form Default Values</button> <button class=\"btn btn-sm btn-primary\" ng-click=\"clearInputParameterValues()\">Clear Values</button> <button class=\"btn btn-sm btn-primary\" ng-click=\"resetInputParameterValues()\">Reset Values</button></span></div>");
$templateCache.put("app/modules/serviceManager/views/managers/service/parameters/serviceInputParameterTableNewRow.html","<td></td><td><ap-checkbox model=\"newParam.visible\" should-disable=\"::mode.details\" in-table=\"::true\"></ap-checkbox></td><td ng-form=\"newParamForm\"><div ng-class=\"{\'has-error\': newParamForm.paramName.$invalid}\"><input type=\"text\" class=\"form-control input-sm\" placeholder=\"name\" required ng-model=\"newParam.id.name\" name=\"paramName\" ng-model-options=\"::{debounce: 200}\" entity-uniqueness-validator collection=\"newParamDestination\"></div><div ng-messages=\"newParamForm.paramName.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Parameter name is required</div><div ng-message=\"name\">Parameter already exists!</div></div></td><td ng-if=\"::service.type !== \'JS\'\"><div ng-if=\"!service.useLabelsAsKeys\"><ap-edited-input mode=\"::mode\" model=\"newParam.paramLabel\" edited-placeholder=\"label\" should-disable=\"::tableConfig.label.disabled\" model-debounce=\"::{debounce : 200}\" elimination-options=\"::{disabled:true}\"></ap-edited-input></div><div ng-if=\"service.useLabelsAsKeys\"><ap-input-param-label-editor mode=\"::mode\" input-param=\"newParam\" service=\"::service\" should-disable=\"::tableConfig.label.disabled\"></ap-input-param-label-editor></div></td><td><ap-data-type-value mode=\"::mode\" param=\"newParam\" placeholder=\"default value\"></ap-data-type-value></td><td><a ng-click=\"saveInlineParam()\" ng-disabled=\"newParamForm.paramName.$invalid\" class=\"btn btn-sm btn-green\"><i class=\"fa fa-save\"></i> </a><a ng-click=\"cancelInlineParam()\" class=\"btn btn-sm btn-red\"><i class=\"clip clip-remove\"></i></a></td>");
$templateCache.put("app/modules/serviceManager/views/managers/service/parameters/serviceOutputParameterTable.html","<table id=\"serviceOutputParameterTable\" resizeable mode=\"::\'BasicResizer\'\" class=\"table table-bordered table-striped\" ng-class=\"::tableConfig.dataConfig.class\"><thead><tr><th ng-show=\"isBatch\" class=\"medium-column\" style=\"background-color: #ffe3e0\"><ap-global-selector entities=\"service.outputParams\" in-table=\"::false\" selected-property=\"_isSelected\" selected-descriptor=\"Select\"></ap-global-selector></th><th ng-if=\"::mode.edit && tableConfig.move.visible\" class=\"center medium-column\"></th><th ng-if=\"::tableConfig.visible.visible\" class=\"hidden-xs medium-column\"><div ng-if=\"::!tableConfig.visible.grouped\">Visible</div><ap-global-selector ng-if=\"::tableConfig.visible.grouped\" entities=\"service.outputParams\" in-table=\"::false\" selected-property=\"visible\" selected-descriptor=\"Visible\" should-disable=\"::mode.details\"></ap-global-selector></th><th class=\"{{::tableConfig.name.class}}\" ng-class=\"{\'column-key-indication\' : !service.useLabelsAsKeys}\">Name</th><th ng-if=\"::service.type !== \'JS\'\" class=\"{{::tableConfig.label.class}}\" ng-class=\"{\'column-key-indication\' : service.useLabelsAsKeys}\">Label</th><th ng-if=\"::tableConfig.multiRecord.visible\" class=\"medium-column\"><ap-global-selector entities=\"service.outputParams\" in-table=\"::false\" selected-property=\"inTable\" selected-descriptor=\"Multi Record\" should-disable=\"::service.type === \'Process\' || mode.details\"></ap-global-selector></th><th ng-if=\"::mode.edit && tableConfig.actions.visible\">Actions</th><th ng-if=\"::mode.details && tableConfig.actions.visible\">Configurations</th></tr></thead><tbody ui-sortable=\"tableSortingOptions\" ng-model=\"service.outputParams\"><tr ng-repeat=\"outputParam in service.outputParams track by $index\" ng-class=\"{\'unsortable\': !mode.edit}\" service-output-parameter-table-row></tr><tr ng-if=\"newParam !== undefined\" service-output-parameter-table-new-row></tr></tbody></table><div ng-if=\"::mode.edit && !quantityReadOnly\" class=\"row details-page action-row\" style=\"padding-left: 12px\"><a ng-click=\"openInlineOutputParamEditor()\" class=\"btn btn-sm btn-green tooltips\" ng-if=\"tableConfig.addButton.visible && newParam === undefined && !isBatch\"><i class=\"clip-plus-circle\"></i> </a><a ng-click=\"selectForDeleteMany()\" class=\"btn btn-sm tooltips\" ng-if=\"tableConfig.addButton.visible && newParam === undefined && !isBatch\">Batch </a><a ng-click=\"deleteMany()\" class=\"btn btn-sm btn-red tooltips\" ng-if=\"tableConfig.batchRemove.visible && newParam === undefined && isBatch\"><i class=\"clip clip-remove\"></i> Delete </a><a ng-click=\"cancelSelect()\" class=\"btn btn-sm btn-gray tooltips\" ng-if=\"tableConfig.batchRemove.visible && newParam === undefined && isBatch\"><i class=\"clip clip-cancel-circle\"></i> Cancel</a></div>");
$templateCache.put("app/modules/serviceManager/views/managers/service/parameters/serviceOutputParameterTableNewRow.html","<td></td><td class=\"center\" ng-if=\"::tableConfig.visible.visible\"><ap-checkbox ng-if=\"!newParam.isSpecial\" model=\"newParam.visible\" should-disable=\"::mode.details\" in-table=\"::true\"></ap-checkbox></td><td ng-form=\"newParamForm\"><div ng-class=\"{\'has-error\': newParamForm.paramName.$invalid}\"><input type=\"text\" class=\"form-control input-sm\" placeholder=\"name\" required ng-model=\"newParam.id.name\" name=\"paramName\" ng-model-options=\"::{debounce: 200}\" entity-uniqueness-validator collection=\"newParamDestination\"></div><div ng-messages=\"newParamForm.paramName.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Parameter name is required</div><div ng-message=\"name\">Parameter already exists!</div></div></td><td ng-if=\"::service.type !== \'JS\'\"><span ng-if=\"!newParam.isSpecial\"><ap-edited-input ng-if=\"!service.useLabelsAsKeys\" mode=\"::mode\" model=\"newParam.paramLabel\" edited-placeholder=\"label\" should-disable=\"::tableConfig.label.disabled\" model-debounce=\"::{debounce : 200}\" elimination-options=\"::{disabled:true}\"></ap-edited-input><ap-output-param-label-editor ng-if=\"service.useLabelsAsKeys\" mode=\"::mode\" output-param=\"newParam\" service=\"::service\" should-disable=\"::tableConfig.label.disabled\"></ap-output-param-label-editor></span></td><td class=\"center\"><ap-checkbox ng-if=\"!newParam.isSpecial\" model=\"newParam.inTable\" in-table=\"::true\" should-disable=\"::mode.details || tableConfig.multiRecord.disabled\"></ap-checkbox></td><td><a ng-click=\"saveInlineParam()\" ng-disabled=\"newParamForm.paramName.$invalid\" class=\"btn btn-sm btn-green\"><i class=\"fa fa-save\"></i> </a><a ng-click=\"cancelInlineParam()\" class=\"btn btn-sm btn-red\"><i class=\"clip clip-remove\"></i></a></td>");
$templateCache.put("app/modules/serviceManager/views/managers/service/parameters/serviceOutputParameterTableRow.html","<td ng-show=\"isBatch\" class=\"center\" style=\"background-color: #ffe3e0\"><ap-checkbox ng-if=\"!outputParam.isSpecial\" model=\"outputParam._isSelected\" in-table=\"::true\"></ap-checkbox></td><td ng-if=\"::mode.edit && tableConfig.move.visible\" class=\"clickable-column\"><i class=\"fa fa-arrows sorter\"></i></td><td class=\"center\" ng-if=\"::tableConfig.visible.visible\"><ap-checkbox ng-if=\"!outputParam.isSpecial\" model=\"outputParam.visible\" should-disable=\"::mode.details\" in-table=\"::true\"></ap-checkbox></td><td title=\"{{outputParam.id.name}}\" class=\"wrapped-column\">{{outputParam.id.name}}</td><td ng-if=\"::service.type !== \'JS\'\"><div ng-if=\"!outputParam.isSpecial && !service.useLabelsAsKeys\"><ap-edited-input mode=\"::mode\" model=\"outputParam.paramLabel\" edited-placeholder=\"label\" should-disable=\"::tableConfig.label.disabled\" model-debounce=\"::{debounce : 200}\" elimination-options=\"::{disabled:true}\"></ap-edited-input></div><div ng-if=\"!outputParam.isSpecial && service.useLabelsAsKeys\"><ap-output-param-label-editor mode=\"::mode\" output-param=\"outputParam\" service=\"::service\" should-disable=\"::tableConfig.label.disabled\"></ap-output-param-label-editor></div></td><td ng-if=\"::tableConfig.multiRecord.visible\" class=\"center\"><ap-checkbox ng-if=\"!outputParam.isSpecial\" model=\"outputParam.inTable\" in-table=\"::true\" should-disable=\"::mode.details || tableConfig.multiRecord.disabled\"></ap-checkbox></td><td ng-if=\"::tableConfig.actions.visible\"><div class=\"container-fluid\"><div class=\"row\"><span ng-if=\"::mode.edit\" style=\"display: inline-block; padding-right:10px\"><a ng-click=\"configureOutputParam(outputParam)\" class=\"btn btn-sm btn-purple\"><i class=\"fa fa-cogs\"></i> </a><a ng-if=\"!quantityReadOnly && !outputParam.isSpecial\" ng-click=\"deleteOutputParam($index)\" class=\"btn btn-sm btn-red\"><i class=\"clip clip-remove\"></i> </a></span>{{present(service, outputParam)}}</div></div></td>");
$templateCache.put("app/modules/serviceManager/views/managers/service/record/serviceRecordDialog.html","<form name=\"serviceOptionsForm\" novalidate><md-dialog aria-label=\"Service Options\" class=\"wide-dialog\"><div class=\"panel-heading dialog-heading center\"><h4>Record Forms Service</h4></div><div class=\"panel-body\"><ap-details><ap-detail title=\"Service Name\" detail-class=\"empty-border\"><service-name-editor mode=\"::{new:true}\" service=\"serviceOptions\"></service-name-editor></ap-detail><ap-detail title=\"Service Form Url\"><ap-edited-input model=\"serviceOptions.formUrl\" edited-placeholder=\"form url\" edited-type=\"url\" edited-name=\"serviceFormUrlInput\" is-required=\"true\" required-err-msg=\"Form url is required\" url-err-msg=\"Form url is invalid\" elimination-options=\"::{eliminateSpecialChars: false}\"></ap-edited-input></ap-detail></ap-details></div><div class=\"panel-footer\"><div id=\"dialogFooterConfig\"><ap-checkbox title=\"Verify installation\" model=\"shouldTestInstallation\" style=\"margin:0 0 0 50px; color: DimGray\"></ap-checkbox><br><ap-checkbox title=\"Record without installation\" model=\"shouldRecordWithoutInstallation\" style=\"margin:0 0 0 50px; color: DimGray\"></ap-checkbox></div><span id=\"dialogFooterButtons\" class=\"pull-right\"><span title=\"{{serviceOptionsForm.$valid ? \'\' : \'Invalid fields marked in red\'}}\"><button class=\"btn btn-primary\" ng-click=\"onBegin()\" ng-disabled=\"!serviceOptionsForm.$valid\">Begin</button> </span><button title=\"\" class=\"btn btn-default\" ng-click=\"onCancel()\">Cancel</button></span></div></md-dialog></form>");
$templateCache.put("app/modules/serviceManager/views/managers/service/record/serviceRecordPanel.html","<form name=\"recordPanelForm\" novalidate><div layout=\"vertical\"><md-sidenav md-component-id=\"serviceRecordPanel\" flex class=\"md-sidenav-left ap-sidenav md-whiteframe-z2\"><a class=\"navbar-brand\" ng-href=\"#/\"><img ng-src=\"assets/images/logo.png\" alt=\"\"></a><md-content id=\"record-upper-bar\" class=\"record-header record-content\" layout-padding><strong>Service Name</strong></md-content><md-content class=\"record-header record-content pull-left\"><ap-edited-input model=\"serviceOptions.name\" edited-placeholder=\"service name\" is-required=\"true\" required-err-msg=\"service name is required\" edited-name=\"serviceNameInRecordPanelInput\"></ap-edited-input></md-content><md-content class=\"record-header\" layout-padding><strong>Recording Time</strong><br><span>{{recordingTime.value | secondsToDateTime | date:\'HH:mm:ss\'}}</span></md-content><md-content class=\"record-header\" layout-padding><div id=\"recordingBlockButtons\"><a href=\"\" id=\"recordingCaptureParametersButton\" class=\"btn\" a-disabled=\"loadingIndicator.isLoading || recordingProperties.isPaused\" ng-click=\"captureParameters()\"><i class=\"fa-th fa center-vertical\"></i> <span class=\"center-vertical\">Capture Parameters</span> </a><a href=\"\" id=\"recordingSaveContinueButton\" class=\"btn\" a-disabled=\"loadingIndicator.isLoading || recordingProperties.isPartial\" ng-click=\"saveAndContinue()\"><i class=\"fa-save fa center-vertical\"></i> <span class=\"center-vertical\">Save &amp; Continue</span> </a><a href=\"\" id=\"recordingCancelButton\" class=\"btn\" ng-click=\"exit()\"><i class=\"fa-times fa center-vertical\"></i> <span class=\"center-vertical\">Cancel</span> </a><a href=\"\" id=\"recordingSaveExitButton\" class=\"btn\" a-disabled=\"loadingIndicator.isLoading || recordingProperties.isPaused\" ng-click=\"saveAndExit()\"><i class=\"clip clip-exit center-vertical\"></i> <span class=\"center-vertical\">Save &amp; Exit</span></a><div class=\"record-header\" style=\"text-align:center\" layout-padding ng-if=\"recordingProperties.allowPartial\"><strong>Partial Recording</strong></div><a href=\"\" id=\"recordingPauseButton\" class=\"btn\" ng-if=\"recordingProperties.allowPartial && !recordingProperties.isPaused\" a-disabled=\"loadingIndicator.isLoading\" ng-click=\"saveAndPause()\"><i class=\"fa-pause fa center-vertical\"></i> <span class=\"center-vertical\">Save &amp; Pause</span> </a><a href=\"\" id=\"recordingResumeButton\" class=\"btn\" ng-if=\"recordingProperties.allowPartial && recordingProperties.isPaused\" a-disabled=\"loadingIndicator.isLoading\" ng-click=\"resumeRecord()\"><i class=\"fa-circle fa center-vertical\"></i> <span class=\"center-vertical\">Resume Record</span></a></div></md-content></md-sidenav></div></form><ap-loader indicator=\"loadingIndicator\"></ap-loader>");
$templateCache.put("app/modules/serviceManager/views/managers/service/scenario/scenarioDetails.html","<table id=\"scenarioViewTable\" resizeable mode=\"::\'BasicResizer\'\" class=\"table table-bordered table-striped\"><thead><tr><th class=\"narrow-column\">Index</th><th ng-if=\"::!isHtmlService()\">Window Title</th><th>Action</th><th>Field name</th><th ng-if=\"::!isHtmlService()\">Label</th><th>Value</th></tr></thead><tbody><tr ng-repeat=\"scenario in ::scenarioDetails\" ng-class=\"::{\'purple\': scenario.inLoop}\"><td>{{::scenario.messageIndex}}</td><td ng-if=\"::!isHtmlService()\">{{::scenario.windowTitle}}</td><td>{{::scenario.actionType}}</td><td>{{::scenario.fieldName}}</td><td ng-if=\"::!isHtmlService()\">{{::scenario.label}}</td><td><ap-data-type-value mode=\"{details:true}\" param=\"scenario\" placeholder=\"default value\"></ap-data-type-value></td></tr></tbody></table><div class=\"row details-page action-row pull-right\"><a class=\"btn btn-sm btn-med-grey\" href=\"/ServiceManager/Macro/FileManager?action=download&path=%2F{{::service.type === \'HTML\' ? \'recordings%2F\' + service.fileName : service.fileName}}\"><i class=\"clip clip-download-2\"></i> {{::service.type === \'Forms\' ? \'ORP\' : \'HTML\'}} </a><button ng-csv=\"getScenarioDetails()\" filename=\"{{renameToCsvExt(scenarioName)}}\" class=\"btn btn-sm btn-teal\"><i class=\"clip clip-download-2\"></i> CSV</button></div>");
$templateCache.put("app/modules/core/views/ui/actions/actionPanel.html","<div class=\"visible-md visible-lg hidden-sm hidden-xs\" ng-style=\"::containerStyle\"><a ng-repeat=\"action in actionData.actions track by action.name\" class=\"btn btn-sm action-button {{::action.color}}\" ng-if=\"action.visible\" a-disabled=\"action.disabled\" ng-href=\"{{action.link}}\" check-permission=\"{{::action.permission}}\" ng-click=\"action.click(actionContext, actionData.actions, $parent.$parent.$parent.$parent.$parent.$parent.$index)\" uib-tooltip=\"{{::action.name}}\" tooltip-trigger tooltip-placement=\"{{::tooltipPlacement}}\"><i class=\"{{::action.symbol}}\"></i></a></div><div class=\"visible-xs visible-sm hidden-md hidden-lg\"><div class=\"btn-group\"><a class=\"btn btn-primary dropdown-toggle btn-sm\" data-toggle=\"dropdown\" ng-href=\"javascript:void(0)\"><i class=\"fa fa-cog\"></i> <span class=\"caret\"></span></a><ul role=\"menu\" class=\"dropdown-menu pull-right narrow-menu context-menu-dropdown\"><li ng-repeat=\"action in actionData.actions track by action.name\"><a role=\"menuitem\" tabindex=\"-1\" class=\"btn btn-sm action-button {{::action.color}} tooltips\" a-disabled=\"action.disabled\" ng-if=\"action.visible\" ng-href=\"{{action.link}}\" check-permission=\"{{::action.permission}}\" ng-click=\"action.click(actionContext, actionData.actions)\" uib-tooltip=\"{{::action.name}}\" tooltip-trigger tooltip-placement=\"left\"><i class=\"{{::action.symbol}}\"></i></a></li></ul></div></div>");
$templateCache.put("app/modules/core/views/ui/dialog/confirmationDialog.html","<md-dialog aria-label=\"Confirmation Dialog\"><ap-form-dialog title=\"{{::options.title}}\" save-label=\"{{::options.saveLabel}}\" save-class=\"btn-danger\" save-callback=\"onConfirm()\" cancel-callback=\"onCancel()\" warning-dialog=\"::true\"><div ng-bind-html=\"::options.description\" class=\"panel-body\"></div></ap-form-dialog></md-dialog>");
$templateCache.put("app/modules/core/views/ui/dialog/formDialog.html","<div class=\"panel-tools\"><a class=\"btn btn-xs btn-link\" href=\"#\" ng-click=\"handleCancel()\"></a></div><div class=\"panel-heading dialog-heading center\"><i ng-if=\"::warningDialog\" class=\"clip-warning\"></i><h4>{{::title}}</h4></div><div class=\"panel-body\"><div ng-transclude></div></div><div class=\"panel-footer\" ng-hide=\"::footerVisible===false\"><div class=\"pull-right dialog-actions\"><span title=\"{{saveAllowed ? \'\' : \'Invalid fields marked in red\'}}\"><button class=\"btn {{::saveClass}}\" ng-if=\"::saveVisible\" ng-click=\"handleSave()\" ng-disabled=\"!saveAllowed\"><div ng-if=\"::saveLabel\">{{::saveLabel}}</div><div ng-if=\"::!saveLabel\">Save</div></button> </span><button title=\"\" class=\"btn {{::cancelClass}}\" ng-if=\"::cancelVisible\" ng-click=\"handleCancel()\"><div ng-if=\"::cancelLabel\">{{::cancelLabel}}</div><div ng-if=\"::!cancelLabel\">Cancel</div></button></div></div>");
$templateCache.put("app/modules/core/views/ui/dialog/infoDialog.html","<div class=\"panel-heading dialog-heading center\"><i class=\"clip-info\"></i><h4>{{::options.title}}</h4></div><div ng-bind-html=\"::options.description\" class=\"panel-body\"></div><div class=\"panel-footer\"><div class=\"pull-right dialog-actions\"><button class=\"btn btn-sm btn-primary\" ng-click=\"close()\">OK</button></div></div>");
$templateCache.put("app/modules/core/views/ui/dialog/inputFieldDialog.html","<form name=\"inputFieldDialogForm\" novalidate><md-dialog class=\"wide-dialog\"><ap-form-dialog title=\"{{::title}}\" save-label=\"OK\" save-callback=\"onConfirm()\" save-allowed=\"inputFieldDialogForm.$valid\"><ap-details><ap-detail title=\"{{::label}}\" detail-class=\"empty-border\" ng-class=\"{\'has-error\': inputFieldDialogForm.value.$invalid}\"><input type=\"text\" ng-model=\"holder.value\" class=\"form-control input-medium\" name=\"value\" ng-model-options=\"::{debounce: 150}\" special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" required ng-trim=\"true\"><div class=\"field-error\" ng-messages=\"inputFieldDialogForm.value.$error\" role=\"alert\"><div ng-message=\"required\">Required</div></div></ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/core/views/ui/editor/editor.html","<div ui-ace=\"editorOptions\" ng-model=\"edited\" ng-readonly=\"shouldDisable\" ng-style=\"{height: editorHeight+\'px\'}\"></div>");
$templateCache.put("app/modules/core/views/ui/editor/editorJsSuggestions.html","<button id=\"editorJsPanelToggle\" ng-click=\"togglePanels()\" class=\"close\"><i class=\"clip clip-question\"></i></button><div id=\"editorJsPanelLeft\" ng-show=\"shouldExpand\"><div ng-if=\"category === undefined\"><button ng-click=\"closePanels()\" class=\"close\"><i class=\"clip clip-close-2\"></i></button><h4 class=\"alert-heading\"><i class=\"clip clip-stack-2\"></i> Code Assist</h4><span class=\"subtext\">Select a category.</span><br><br><div ng-repeat=\"category in categories\"><i class=\"clip clip-chevron-right\"></i> <a href=\"\" ng-click=\"openCategory(category)\" class=\"link\">{{::category}}</a></div></div><div ng-if=\"category !== undefined\"><button ng-click=\"openCategory()\" class=\"close\"><i class=\"fa fa-arrow-circle-o-left\"></i></button><h4 class=\"alert-heading\"><i class=\"{{::icon}}\"></i> {{::category}}</h4><span class=\"subtext\">Click on a method to view documentation.</span><br><br><div ng-repeat=\"method in methods\"><i class=\"clip clip-chevron-right\"></i> <a href=\"\" ng-click=\"openDoc(method)\" class=\"spacious-link\">{{::method}}</a></div><h3 ng-if=\"lessCommonMethods !== undefined\">Less Common</h3><div ng-if=\"lessCommonMethods !== undefined\" ng-repeat=\"method in lessCommonMethods\"><i class=\"clip clip-chevron-right\"></i> <a href=\"\" ng-click=\"openDoc(method, true)\" class=\"spacious-link\">{{::method}}</a></div></div></div><div id=\"editorJsPanelBottom\" ng-show=\"shouldExpand\"><div ng-if=\"currentMethod === undefined\">No method selected.</div><div ng-if=\"currentMethod !== undefined\"><div style=\"color: steelblue\"><b><a href=\"\" ng-click=\"insertMethod(currentMethod.title)\">{{currentMethod.title}}</a></b></div><div ng-bind-html=\"currentMethod.desc\"></div><br ng-if=\"currentMethod.params !== undefined || currentMethod.returns !== undefined\"><div ng-if=\"currentMethod.params !== undefined\"><b>Parameters:</b><div ng-bind-html=\"currentMethod.params\"></div></div><div ng-if=\"currentMethod.returns !== undefined\"><b>Return value:</b><div ng-bind-html=\"currentMethod.returns\" style=\"margin-left: 15px\"></div></div></div></div>");
$templateCache.put("app/modules/core/views/ui/editor/inlineGridEditor.html","<ap-action-panel action-data=\"inlineEditorActionData\" action-context=\"entity\"></ap-action-panel>");
$templateCache.put("app/modules/core/views/ui/elements/checkbox.html","<md-checkbox ng-model=\"model\" ng-disabled=\"::shouldDisable\" ng-change=\"onChange()\" aria-label=\"checkbox\" class=\"md-raised md-primary\" ng-class=\"::{\'in-table-checkbox\': inTable, \'narrow-checkbox\': isNarrow === undefined || isNarrow}\">{{::title}}</md-checkbox>");
$templateCache.put("app/modules/core/views/ui/elements/collapsingPanel.html","<uib-accordion close-others=\"oneAtATime\"><div uib-accordion-group is-open=\"collapseManager.isOpen\"><uib-accordion-heading><div layout=\"row\" layout-wrap><div flex=\"95\"><div ng-if=\"hasActiveTitle\">{{activeTitle.title}}</div><div ng-if=\"!hasActiveTitle\">{{title}}</div></div><div flex=\"5\"><i class=\"pull-right glyphicon\" ng-class=\"{\'glyphicon-chevron-down\': collapseManager.isOpen, \'glyphicon-chevron-right\': !collapseManager.isOpen}\"></i></div></div></uib-accordion-heading><ng-transclude></ng-transclude></div></uib-accordion>");
$templateCache.put("app/modules/core/views/ui/elements/detail.html","<div class=\"{{::detailClass}}\" ng-class=\"{\'details-row\': padVertically !== \'false\', \'with-background\': shouldPaintBackground}\"><dt class=\"detail-content\" ng-style=\"::titleStyle\">{{::title}}</dt><dd class=\"detail-content\"><ng-transclude></ng-transclude></dd></div>");
$templateCache.put("app/modules/core/views/ui/elements/fileBrowser.html","<div ng-switch on=\"::mode\" style=\"display: inline-block\"><div ng-switch-when=\"button\"><button ng-click=\"openBrowser()\" class=\"btn btn-bricky red-dropdown\">{{::browseLabel}}</button></div><div ng-switch-when=\"symbol\"><a href=\"\" ng-click=\"openBrowser()\" class=\"btn btn-default\" uib-tooltip=\"{{::buttonTooltip}}\" tooltip-trigger tooltip-placement=\"bottom\"><span class=\"glyphicon glyphicon-save\" style=\"transform: rotate(180deg)\"></span></a></div><div ng-switch-when=\"simple\"><a href=\"\" ng-click=\"openBrowser()\" class=\"simple-file-browser\">{{::browseLabel}}</a></div><div ng-switch-default><a href=\"\" ng-click=\"openBrowser()\" class=\"btn btn-bricky red-dropdown\">{{::browseLabel}}</a></div></div><input type=\"file\" id=\"{{::browserId}}\" accept=\"{{::fileFilter}}\" ng-model=\"selectedFiles\" ng-show=\"::false\" file-change=\"handleFiles($event,files)\">");
$templateCache.put("app/modules/core/views/ui/elements/gridEditorActions.html","<div class=\"container-fluid\"><a href=\"\" ng-click=\"addCallback()\" class=\"btn btn-primary btn-success\" check-permission uib-tooltip=\"Add\" tooltip-trigger tooltip-placement=\"bottom\"><span class=\"glyphicon glyphicon-plus\"></span></a><ap-group-action actions=\"::gridEditorGroupActions\" entities=\"entities\" use-single-callback=\"::true\"></ap-group-action></div>");
$templateCache.put("app/modules/core/views/ui/elements/groupAction.html","<div class=\"dropdown\" style=\"display:inline-block\"><a href=\"javascript:void(0)\" data-toggle=\"dropdown\" class=\"dropdown-toggle btn red-dropdown\">Action <b class=\"caret\"></b></a><ul class=\"dropdown-menu\"><li ng-repeat=\"action in actions track by ::action.name\" ng-show=\"action.visible\"><a href=\"\" ng-click=\"handleAction(action, $event)\">{{::action.name}}</a><div ng-if=\"$index < actions.length-1\" class=\"divider narrow-divider\"></div></li></ul></div>");
$templateCache.put("app/modules/core/views/ui/elements/header.html","<div class=\"row\" ng-class=\"::{\'page-header\' : context.indexOf(\'management-content\') === -1,\'page-header-content\' : context.indexOf(\'management-content\') !== -1}\"><h1 ng-if=\"::mainTitle.length > 0\" style=\"display:inline-block\">{{::mainTitle}} <small>{{::subTitle}}</small></h1><ap-loader indicator=\"loadingIndicator\"></ap-loader><div ng-switch on=\"::context\" ng-class=\"{\'inline-right\': context===\'entity\' }\"><div ng-switch-when=\"entity\" class=\"pull-right\"><span class=\"header-actions\" ng-transclude></span> <a href=\"\" class=\"btn btn-sm btn-default\" ng-click=\"handleBack()\" style=\"display: inline-block\">Back</a></div><div ng-switch-when=\"management\"><span class=\"header-actions\" ng-transclude></span></div><div ng-switch-when=\"management-content\"><span ng-class=\"::{\'header-content\': mainTitle.length > 0}\" ng-transclude></span></div></div></div>");
$templateCache.put("app/modules/core/views/ui/elements/imageUpload.html","<input type=\"file\" ngf-select ng-model=\"model\" class=\"form-control btn btn-default\" ngf-pattern=\"\'image/*\'\" accept=\"image/*\" ngf-max-size=\"10MB\" ngf-min-height=\"0\" ngf-resize=\"{width: 204, height: 170}\" ngf-resize-if=\"::shouldResize\"> <img ngf-src=\"model\" style=\"max-width:204px; max-height: 170px\"> <span ng-if=\"currentImageName !== undefined\" class=\"field-info\">Stored image on server: {{::currentImageName}}</span> <span ng-if=\"currentImageName !== undefined || model !== undefined\" ng-click=\"clearImage()\">&times;</span>");
$templateCache.put("app/modules/core/views/ui/elements/loadableButton.html","<a class=\"btn btn-sm tooltips action-button {{::loadableConfig.color}}\" ng-show=\"loadableConfig.visible\" a-disabled=\"loadableConfig.disabled || loadingIndicator.isLoading\" ng-click=\"loadableConfig.click(loadableContext)\" uib-tooltip=\"{{::loadableConfig.name}}\" tooltip-trigger tooltip-placement=\"{{::tooltipPlacement}}\"><i class=\"{{::loadableConfig.symbol}}\"></i></a>");
$templateCache.put("app/modules/core/views/ui/elements/loader.html","<div ng-if=\"indicator.isLoading\"><div class=\"{{::isFullScreen === true ? \'full-screen-spinner\' : \'centered-content\'}}\"><span ng-if=\"::isFullScreen !== true\" md-diameter=\"40\" layout=\"row\" layout-align=\"center center\"><md-progress-circular md-mode=\"indeterminate\"></md-progress-circular></span><md-progress-linear ng-if=\"::isFullScreen === true\" md-mode=\"indeterminate\"></md-progress-linear></div><div class=\"centered-content\" ng-class=\"::{\'full-screen-spinner-title\':isFullScreen === true}\"><h5 class=\"spinner-title\">{{::indicator.loadingText}}</h5></div></div>");
$templateCache.put("app/modules/core/views/ui/elements/switch.html","<md-switch ng-model=\"model\" ng-change=\"onChange(model, \'{{model}}\')\" aria-label=\"switch\" class=\"md-raised md-primary narrow-switch\" ng-true-value=\"{{value1}}\" ng-false-value=\"{{value2}}\"><h5>{{transformModel()}}</h5></md-switch>");
$templateCache.put("app/modules/core/views/ui/elements/timePicker.html","<div layout=\"row\" layout-wrap><div flex=\"10\"><input type=\"number\" min=\"1\" positive-number required ng-model=\"timeValue\" class=\"row-input form-control\" placeholder=\"{{::placeholder}} ({{timeCoefficient.text}})\"></div><div flex=\"15\"><ap-constant-selector constants=\"timeFormats\" hide-value=\"true\" chosen-constant=\"timeCoefficient\"></ap-constant-selector></div></div>");
$templateCache.put("app/modules/core/views/ui/elements/varyingDetail.html","<div class=\"details-row {{::detailClass}}\"><dt class=\"detail-content\" ng-style=\"::titleStyle\">{{title}}</dt><dd class=\"detail-content\"><ng-transclude></ng-transclude></dd></div>");
$templateCache.put("app/modules/core/views/ui/graphs/responseTimeChart.html","<nvd3 options=\"options\" data=\"data\" api=\"api\"></nvd3>");
$templateCache.put("app/modules/core/views/ui/nav/breadcrumbs.html","<ol class=\"breadcrumb\"><li ng-repeat=\"crumb in crumbs track by $index\"><a ng-if=\"crumb.hasUrl\" ng-href=\"{{crumb.url}}\" class=\"{{crumb.class}}\">{{crumb.title}} </a><a ng-if=\"!crumb.hasUrl\" href=\"javascript:void(0)\" class=\"{{crumb.class}}\" ng-class=\"{\'active-breadcrumb\': crumb.active}\">{{crumb.title}}</a></li></ol>");
$templateCache.put("app/modules/core/views/ui/nav/navigationBar.html","<div class=\"navbar navbar-inverse navbar-fixed-top ap-navbar\"><div class=\"container\"><div class=\"navbar-header\"><a class=\"navbar-brand\" ng-href=\"#/\"><img ng-src=\"assets/images/logo.png\" alt=\"\"></a></div><div class=\"navbar-tools record-panel\"><ul class=\"nav navbar-left\" ng-show=\"recordingProperties.isRecording && !isPanelShowed()\"><li class=\"dropdown current-user\"><a href=\"\" data-toggle=\"dropdown\" data-hover=\"dropdown\" class=\"dropdown-toggle\" data-close-others=\"true\"><span class=\"user-privilege\">Record Panel</span> <i class=\"clip-chevron-down\"></i></a><ul class=\"dropdown-menu\"><li><a href=\"\" ng-click=\"toggleRecordPanel()\"><i class=\"clip-exit\"></i> &nbsp;Open</a></li></ul></li></ul><ul class=\"nav navbar-right\"><li class=\"dropdown\"><a href=\"\" data-toggle=\"dropdown\" data-hover=\"dropdown\" class=\"dropdown-toggle\" data-close-others=\"true\"><i class=\"clip-notification-2\"></i> <span id=\"navbar-notifications-badge\" class=\"badge\" ng-show=\"notifications.length > 0\">{{notifications.length}}</span></a><ul class=\"dropdown-menu notifications\" style=\"height: 35px\" ng-show=\"notifications.length > 0\"><li><div class=\"drop-down-wrapper ps-container ps-active-y\"><ul><li class=\"warning\" ng-repeat=\"notification in notifications\"><a href=\"javascript:void(0)\"><span class=\"label label-danger\"><i class=\"fa fa-user\"></i></span> <span class=\"message\">{{::notification}}</span></a></li></ul></div></li></ul></li><li class=\"dropdown current-user\"><a href=\"\" data-toggle=\"dropdown\" data-hover=\"dropdown\" class=\"dropdown-toggle\" data-close-others=\"true\"><img ng-src=\"assets/images/avatar-1-small.jpg\" class=\"circle-img\" alt=\"\"> <span class=\"username\">{{::user.username}} <span class=\"user-privilege\">({{::user.role}})</span> </span><i class=\"clip-chevron-down\"></i></a><ul class=\"dropdown-menu\"><li><a ng-click=\"logout()\"><i class=\"clip-exit\"></i> &nbsp;Log Out</a></li></ul></li></ul></div></div></div>");
$templateCache.put("app/modules/core/views/ui/nav/navigationMenu.html","<div class=\"navbar-content ap-navbar\" ng-if=\"::isLogged()\" style=\"position:fixed\"><div class=\"main-navigation navbar-collapse collapse\"><div class=\"navigation-toggler\" ng-click=\"toggleMiniMenu()\"><i class=\"clip-chevron-left\" ng-if=\"!navProperties.miniMode\"></i> <i class=\"clip-chevron-right\" ng-if=\"navProperties.miniMode\"></i></div><ul class=\"main-navigation-menu\"><li><a ng-href=\"#/serviceManager\"><i class=\"fa fa-wrench\"></i> <span class=\"title\">Services</span></a></li><li><a ng-href=\"#/pageManager\"><i class=\"fa fa-file-text\"></i> <span class=\"title\">HTML Pages</span></a></li><li><a ng-href=\"#/appManager\"><i class=\"fa fa-th-large\"></i> <span class=\"title\">Applications</span></a></li><li><a ng-href=\"#/auraTesterManager/testCases\"><i class=\"clip-checkbox-checked-2\"></i> <span class=\"title\">AuraTester</span></a></li><li><a ng-href=\"#/monitoringManager\"><i class=\"fa fa-bar-chart\"></i> <span class=\"title\">Monitoring Agents</span></a></li><li><a ng-href=\"#/integrationManager\"><i class=\"fa fa-sitemap\"></i> <span class=\"title\">Integration</span></a></li><li><a ng-href=\"#/adminManager\"><i class=\"fa fa-cogs\"></i> <span class=\"title\">Admin</span></a></li><li><a ng-href=\"#/support\"><i class=\"fa fa-question\"></i> <span class=\"title\">Support</span></a></li></ul></div></div>");
$templateCache.put("app/modules/core/views/ui/selectors/attributeSelector.html","<ui-select ng-model=\"$parent.chosenAttribute\" theme=\"bootstrap\" on-select=\"handleAttributeSelect($item, $model)\"><ui-select-match placeholder=\"select an attribute\">{{$select.selected.value}}</ui-select-match><ui-select-choices repeat=\"attribute in fixedAttributes | filter:attributeMatch($select.search) track by $index\" refresh-delay=\"0\" position=\"down\"><div ng-bind-html=\"attribute.name | highlight: $select.search\"></div></ui-select-choices></ui-select>");
$templateCache.put("app/modules/core/views/ui/selectors/constantSelector.html","<ng-form name=\"constantInputForm\" novalidate ng-class=\"{\'has-error\' : constantInputForm[editedName].$invalid , \'col-lg-9\' : controlButtons}\"><ui-select title=\"{{title}}\" ng-if=\"::mode.edit || mode.new\" ng-model=\"$parent.chosenConstant\" theme=\"bootstrap\" on-select=\"handleConstantSelect($item, $model)\" ng-disabled=\"shouldDisable\" name=\"{{::editedName}}\" ng-required=\"{{::isRequired}}\" search-enabled=\"::searchEnabled\" class=\"{{::editedClasses}}\"><ui-select-match placeholder=\"{{::constantPlaceholder}}\" allow-clear=\"::false\"><div ng-if=\"::hideValue\" ng-bind-html=\"$select.selected.icon + $select.selected.text | trusted\"></div><div ng-if=\"::!hideValue\">{{$select.selected.icon + $select.selected.value}}</div></ui-select-match><ui-select-choices repeat=\"constant in constants | filter:constantMatch($select.search) track by constant.value\" refresh-delay=\"0\" position=\"down\"><div ng-if=\"::!hideValue\" ng-bind-html=\"constant.icon + constant.value | highlight: $select.search\"><small ng-if=\"constant.text.length > 0\">{{::constant.icon + constant.text}} </small>{{::constant.icon + constant.text}}</div><div ng-if=\"::hideValue\"><div ng-bind-html=\"::constant.icon + constant.text | trusted | highlight: $select.search\"></div></div></ui-select-choices></ui-select></ng-form><div ng-if=\"::mode.details && hideValue\">{{::chosenConstant.text}}</div><div ng-if=\"::mode.details && !hideValue\">{{::chosenConstant.value}}</div>");
$templateCache.put("app/modules/core/views/ui/selectors/gridConstantSelector.html","<grid-constant-selector-wrapper><ui-select ng-model=\"MODEL_COL_FIELD\" append-to-body=\"true\" theme=\"bootstrap\" search-enabled=\"::false\" skip-focusser=\"::true\"><ui-select-match placeholder=\"Choose...\" allow-clear=\"::false\">{{COL_FIELD.text}}</ui-select-match><ui-select-choices repeat=\"constant in ::col.colDef.editDropdownOptionsArray | filter: $select.search\" refresh-delay=\"0\" position=\"down\"><div ng-bind-html=\"::constant.text | highlight: $select.search\"></div></ui-select-choices></ui-select></grid-constant-selector-wrapper>");
$templateCache.put("app/modules/core/views/ui/tables/pagedGrid.html","<div class=\"row paged-table-header\"><div class=\"col-lg-2\" ng-if=\"::enablePagination\"><ap-constant-selector constants=\"gridOptions.paginationPageSizes\" hide-value=\"::true\" chosen-constant=\"gridOptions.chosenPaginationPageSize\" on-select-callback=\"handlePaginationPageSizeSelect(constant)\" should-disable=\"entities.length < gridOptions.paginationPageSizes[0].value\"></ap-constant-selector></div><div class=\"pull-right col-lg-2\" ng-if=\"::enablePagination\"><input type=\"search\" class=\"form-control input-sm\" placeholder=\"search..\" ng-model=\"filter.value\" ng-model-options=\"::{debounce : 50}\"></div></div><div class=\"row\"><div class=\"container-fluid\"><div ui-grid=\"gridOptions\" class=\"grid aura-grid\" ui-grid-pagination ui-grid-selection ui-grid-auto-resize ui-grid-resize-columns ui-grid-draggable-rows ng-style=\"{height : gridHeight}\"></div></div></div><div class=\"row\"><span ng-if=\"::enablePagination\" paging page=\"gridOptions.paginationCurrentPage\" page-size=\"gridOptions.paginationPageSize\" total=\"entities.length\" paging-action=\"onPaginationChange(page, pageSize, total)\" show-prev-next=\"::true\" show-first-last=\"::true\"></span> <span ng-if=\"tableActions.length > 0\" class=\"pull-right pagination paged-grid-actions\"><span ng-repeat=\"action in tableActions track by action.name\"><button ng-if=\"::action.isCancel !== true\" title=\"{{::action.description}}\" ng-click=\"action.click()\" class=\"btn btn-sm btn-primary\">{{::action.name}}</button> <button ng-if=\"::action.isCancel === true\" title=\"{{::action.description}}\" ng-click=\"action.click()\" class=\"btn btn-sm btn-default\">{{::action.name}}</button></span></span></div><div class=\"row action-row bordered-row entity-counter\" ng-if=\"::enablePagination && !compactView\">Showing {{paginationStart}} to {{paginationEnd}} of {{entities.length}} entities</div>");
$templateCache.put("app/modules/core/views/ui/tables/pagedTable.html","<div class=\"row paged-table-header\"><div class=\"col-lg-2\"><select class=\"form-control entity-table-page-size-selector\" ng-model=\"vm.tableParams.count\" ng-model-options=\"{getterSetter: true}\" ng-options=\"\'show \' + size + \' entries\' for size in vm.tableParams.settings().counts\" ng-disabled=\"vm.entities.length < vm.tableParams.settings().counts[0]\"></select></div><div class=\"pull-right col-lg-2\"><input type=\"search\" class=\"form-control input-sm\" placeholder=\"search..\" ng-model=\"vm.tableFilter.value\" ng-model-options=\"::{debounce : 50}\"></div></div><div class=\"row\"><ng-transclude></ng-transclude></div><div class=\"row action-row bordered-row entity-counter\">Showing {{paginationStart()}} to {{paginationEnd()}} of {{vm.entities.length}} entities</div>");
$templateCache.put("app/modules/core/views/ui/wizard/smartStep.html","<wz-step data-title=\"{{::title}}\" description=\"{{::description}}\"><div class=\"container-fluid page-content\"><h2>{{::title}}</h2></div><ap-step-navigation navigation=\"navigation\" next-allowed=\"nextAllowed\" confirm-button=\"{{::confirmButton}}\" on-back=\"::onBack\" on-next=\"::onNext\"></ap-step-navigation><ng-transclude></ng-transclude></wz-step>");
$templateCache.put("app/modules/core/views/ui/wizard/stepNavigation.html","<div ng-if=\"::isBack() || isNext()\" class=\"navigation-header\"><div ng-if=\"::isBack()\" class=\"col-lg-2\"><button wz-previous=\"::onBack()\" ng-disabled=\"backDisabled\" class=\"btn btn-light-grey back-step btn-block\"><i class=\"fa fa-arrow-circle-left\"></i> Back</button></div><ng-transclude></ng-transclude><div ng-if=\"::isNext()\" class=\"col-lg-2\" ng-class=\"::{\'col-lg-push-10\' : !isBack(), \'col-lg-push-8\' : isBack() && !hasTranscluded, \'col-lg-push-4\' : isBack() && hasTranscluded}\"><button wz-next=\"::onNext()\" ng-disabled=\"nextAllowed\" class=\"btn next-step btn-block\" ng-class=\"::{\'btn-blue\' : undefinedOrEmpty(confirmButton), \'btn-success\' : !undefinedOrEmpty(confirmButton)}\">{{::undefinedOrEmpty(confirmButton) ? \'Next\' : confirmButton}} <i class=\"fa fa-arrow-circle-right\"></i></button></div></div>");
$templateCache.put("app/modules/core/views/user/license/licenseTester.html","<div ng-if=\"::!privileged\" class=\"row page-header action-row bordered-row\"><h2>This feature isn\'t available with your current license</h2><h3>Please contact <a ng-href=\"{{::getUpgradeLicenseLink()}}\" style=\"margin-top:3px\">sales@auraplayer.com </a>about upgrading</h3></div>");
$templateCache.put("app/modules/core/views/user/mail/mailConfigurator.html","<form name=\"mailConfigForm\" novalidate><md-dialog aria-label=\"Mail Configuration\" class=\"wide-dialog\"><ap-form-dialog data-title=\"Mail Configuration\" save-label=\"Save\" save-callback=\"saveAndClose()\" save-allowed=\"mailConfigForm.$valid\"><ap-details><ap-detail data-title=\"Host : Port\" detail-class=\"empty-border\"><div class=\"inline padd-wide-right\" style=\"width: 230px; text-align: center\" ng-class=\"{\'has-error\': mailConfigForm.mailConfigHost.$invalid }\"><input ng-model=\"mail.config.host\" type=\"text\" name=\"mailConfigHost\" class=\"form-control input-sm\" placeholder=\"e.g. smtp.gmail.com\" required focus-me=\"::true\"></div><b>:</b><div class=\"inline padd-wide-left\" style=\"width: 100px\" ng-class=\"{\'has-error\': mailConfigForm.mailConfigPort.$invalid }\"><input type=\"number\" ng-model=\"mail.config.port\" name=\"mailConfigPort\" min=\"0\" class=\"form-control input-sm\" placeholder=\"e.g. 465\" required></div></ap-detail><ap-detail data-title=\"Username\"><div ng-class=\"{\'has-error\': mailConfigForm.mailConfigEmail.$invalid }\"><input type=\"email\" ng-model=\"mail.config.email\" name=\"mailConfigEmail\" class=\"form-control input-sm\" placeholder=\"recipient\" required><div ng-messages=\"mailConfigForm.mailConfigEmail.$error\" style=\"color:maroon\" role=\"alert\"><div ng-message=\"required\">Required</div><div ng-message=\"email\">Invalid</div></div></div></ap-detail><ap-detail data-title=\"Password\"><div ng-class=\"{\'has-error\': mailConfigForm.mailConfigPassword.$invalid }\"><input ng-model=\"mail.config.password\" type=\"password\" name=\"mailConfigPassword\" placeholder=\"password\" class=\"form-control input-sm\" required></div></ap-detail><ap-detail detail-class=\"empty-border\"><ap-switch model=\"mail.config.isTls\" value1=\"true\" value2=\"false\" model-transformer=\"toIsTlsString(model)\" style=\"float:right; display: inline-block\"></ap-switch><div ng-if=\"mailConfigForm.$valid\" style=\"display: inline-block\"><div ng-if=\"mail.config.validated\"><i class=\"fa fa-check\"></i> Settings OK</div><a ng-if=\"!mail.config.validated\" ng-click=\"testSettings()\" class=\"btn btn-sm action-button btn-orange\" a-disabled=\"mailConfigForm.$invalid || loadingIndicator.isLoading\">Test Settings</a></div></ap-detail></ap-details><ap-loader indicator=\"loadingIndicator\"></ap-loader></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/core/views/ui/elements/edited/controlButtons.html","<div class=\"pull-right\"><a class=\"btn btn-sm action-button btn-success\" ng-disabled=\"!saveAllowed\" ng-click=\"saveChanges()\" uib-tooltip=\"Save\" tooltip-trigger tooltip-placement=\"bottom\"><i class=\"fa fa-save\"></i> </a><a class=\"btn btn-sm action-button btn-red\" ng-click=\"cancelChanges()\" uib-tooltip=\"Cancel\" tooltip-trigger tooltip-placement=\"bottom\"><i class=\"clip-redo\"></i></a></div>");
$templateCache.put("app/modules/core/views/ui/elements/edited/editedInput.html","<ng-form name=\"{{::editedName}}Form\" novalidate><div ng-show=\"(mode.edit || mode.new || controlButtons) && editAllowed\" ng-class=\"{\'has-error\' : {{::editedName}}Form[editedName].$invalid}\" class=\"{{::editedClasses}}\"><input type=\"{{::editedType}}\" ng-model=\"model\" class=\"form-control input-sm\" min=\"{{::minValue}}\" max=\"{{maxValue}}\" placeholder=\"{{::editedPlaceholder}}\" ng-required=\"{{isRequired}}\" name=\"{{::editedName}}\" ng-disabled=\"shouldDisable\" special-char-eliminator=\"{{::eliminationOptions}}\" ng-trim=\"true\" ng-model-options=\"::modelOptions\" ng-click=\"!selectAllOnClick || selectAll($event)\"><div class=\"field-error\" ng-messages=\"getForm()[editedName].$error\" role=\"alert\"><div ng-message=\"required\">{{::requiredErrMsg}}</div><div ng-message=\"url\">{{::urlErrMsg}}</div><div ng-message=\"min\">{{::minErrMsg}}</div><div ng-message=\"max\">{{::maxErrMsg}}</div></div></div><div ng-show=\"(mode.details || !editAllowed) && !controlButtons\" class=\"{{::editedClasses}}\"><span ng-if=\"::detailType===\'text\'\">{{model}} </span><a ng-if=\"::detailType===\'link\'\" ng-click=\"detailCallback()\" class=\"clickable-column\">{{model}}</a></div></ng-form><ap-control-buttons ng-if=\"controlButtons\" save-allowed=\"getForm().$valid\" save-callback=\"saveCallback()\" cancel-callback=\"cancelCallback()\"></ap-control-buttons>");
$templateCache.put("app/modules/visualize/views/elements/colorCustomizer.html","<form name=\"colorCustomizerForm\" novalidate><div class=\"row\"><div ng-class=\"{\'has-error\': colorCustomizerForm.hexEditor.$invalid}\"><color-picker ng-model=\"model.hex\" name=\"hexEditor\" options=\"::{format:\'hex\', required:true}\" required=\"true\" pattern=\"^#+([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$\"></color-picker></div></div></form>");
$templateCache.put("app/modules/visualize/views/elements/dataTypeSelector.html","<div><ap-constant-selector constants=\"dataTypes\" chosen-constant=\"model\" hide-value=\"::true\" edited-classes=\"inline width-83\" on-select-callback=\"onDataTypeSelect(constant)\" should-disable=\"::shouldDisable\"></ap-constant-selector><ap-action-panel ng-if=\"model.configurable\" class=\"col-lg-2 pull-right\" container-style=\"{\'width\': \'16%\'}\" action-data=\"configuratorActionData\" action-context=\"model\"></ap-action-panel></div>");
$templateCache.put("app/modules/visualize/views/elements/dataTypeValue.html","<div ng-if=\"::mode.edit || param.paramValue.length > 0\" ng-switch on=\"param.dataTypeInfo.dataType.value\"><input ng-switch-when=\"text\" type=\"text\" class=\"form-control input-sm\" ng-model=\"param.paramValue\" placeholder=\"{{::placeholder}}\" ng-disabled=\"::shouldDisable || !mode.edit\"> <input ng-switch-when=\"password\" type=\"password\" class=\"form-control input-sm\" ng-model=\"param.paramValue\" placeholder=\"{{::placeholder}}\" ng-disabled=\"::shouldDisable || !mode.edit\"> <span ng-switch-when=\"date\"><input ng-if=\"param.paramValue !== 0\" type=\"text\" class=\"form-control input-sm\" uib-datepicker-popup=\"{{param.dataTypeInfo.format.text}}\" ng-model=\"param.paramValue\" placeholder=\"{{::placeholder}}\" ng-disabled=\"::shouldDisable || !mode.edit\"> <span ng-if=\"param.paramValue === 0\">(Current Date)</span></span><ap-switch ng-switch-when=\"slider\" ng-if=\"showValue\" model=\"param.paramValue\" value2=\"{{param.dataTypeInfo.value2}}\" value1=\"{{param.dataTypeInfo.value1}}\"></ap-switch><ap-checkbox ng-switch-when=\"checkbox\" ng-init=\"param.paramValue = (param.paramValue == \'true\')\" model=\"param.paramValue\" should-disable=\"::shouldDisable || !mode.edit\"></ap-checkbox><span ng-switch-when=\"file\">({{param.dataTypeInfo.value1 === \'true\' && param.dataTypeInfo.value2 === \'true\' ? \'File & Camera\' : (param.dataTypeInfo.value1 === \'true\' ? \'File only\' : \'Camera only\')}}) </span><input ng-switch-default type=\"text\" class=\"form-control input-sm\" ng-model=\"param.paramValue\" placeholder=\"{{::placeholder}}\" ng-disabled=\"::shouldDisable || !mode.edit\"></div>");
$templateCache.put("app/modules/visualize/views/elements/sliderSelectorDialog.html","<form name=\"dateSelectorForm\" novalidate><md-dialog aria-label=\"Configure Date\"><ap-form-dialog title=\"Configure Date\" save-callback=\"handleChosenDate()\" save-allowed=\"dateSelectorForm.$valid\"><ap-details><ap-detail title=\"Date Format\" detail-class=\"empty-border\"><ap-edited-input model=\"param.dataTypeInfo.format\" is-required=\"true\" edited-placeholder=\"(e.g dd/MM/yyyy)\" edited-name=\"formatInput\" required-err-msg=\"format is required\" elimination-options=\"::{disabled:true}\"></ap-edited-input></ap-detail><ap-detail title=\"Date\"><div class=\"row\"><div class=\"col-lg-9\"><div ng-class=\"{\'has-error\': dateSelectorForm.dateInput.$invalid}\"><input type=\"text\" class=\"form-control input-sm\" uib-datepicker-popup=\"{{param.dataTypeInfo.format}}\" ng-model=\"param.dataTypeInfo.value\" is-open=\"pickerConfig.visible\" name=\"dateInput\" required close-text=\"Close\"></div></div><div class=\"col-lg-1\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"openDatePicker($event)\"><i class=\"glyphicon glyphicon-calendar\"></i></button></div></div><div class=\"row field-error\" ng-messages=\"dateSelectorForm.dateInput.$error\" role=\"alert\"><div ng-message=\"required\">Date is required</div><div ng-message=\"date\">Date is invalid</div></div></ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/visualize/views/elements/templateLayout.html","<div ng-switch on=\"type\"><strong>{{type}}</strong><div ng-switch-when=\"two page\"><div layout=\"row\" class=\"layout-box\"><div flex class=\"first-layout\" style=\"margin: 2px\"></div><div flex class=\"second-layout\" style=\"margin: 2px\"></div></div></div><div ng-switch-when=\"top\"><div layout=\"row\" class=\"layout-box\"><div flex class=\"first-layout\"></div></div><div layout=\"row\" class=\"layout-box\"><div flex class=\"second-layout\"></div></div></div><div ng-switch-when=\"side\"><div layout=\"row\" class=\"layout-box\"><div flex=\"45\" class=\"first-layout\"></div><div flex=\"55\" class=\"second-layout\"></div></div></div><div ng-switch-when=\"edit\"><div layout=\"column\" class=\"layout-box\"><div flex=\"15\" class=\"first-layout\"></div><div flex=\"15\" class=\"second-layout\"></div><div flex=\"15\" class=\"first-layout\"></div><div flex=\"15\" class=\"second-layout\"></div><div flex=\"15\" class=\"first-layout\"></div><div flex=\"15\" class=\"second-layout\"></div><div flex=\"15\" class=\"first-layout\"></div><div flex=\"15\" class=\"second-layout\"></div></div></div></div>");
$templateCache.put("app/modules/visualize/views/elements/themePicker.html","<md-radio-group ng-model=\"theme.hex\" class=\"md-primary\" layout-padding layout-margin ng-change=\"onThemeChange()\"><md-radio-button ng-repeat=\"themeOption in colors track by $index\" aria-label=\"theme option\" class=\"ap-radio-button\" ng-value=\"themeOption.hex\"><div class=\"color-palette\" ng-style=\"{\'background-color\':getHex(themeOption.hex)}\"></div><div class=\"color-palette-description\" ng-class=\"{\'customized-color-palette\':themeOption.isCustomized}\">{{themeOption.hex}}</div></md-radio-button></md-radio-group><a class=\"btn btn-sm action-button btn-purple\" ng-click=\"customizeTheme()\" uib-tooltip=\"Customize theme\" tooltip-trigger tooltip-placement=\"bottom\"><i style=\"font-size: 18px\" class=\"fa fa-tachometer\"></i></a>");
$templateCache.put("app/modules/visualize/views/elements/configurators/dateDialog.html","<form name=\"dateConfiguratorForm\" novalidate><md-dialog aria-label=\"Configure Date\" class=\"wide-dialog overflowed-dialog\"><ap-form-dialog title=\"Configure Date\" save-callback=\"saveChanges()\" save-allowed=\"dateConfiguratorForm.$valid\"><ap-details><ap-detail title=\"Date Format\" detail-class=\"empty-border\"><div class=\"row\"><div class=\"col-lg-9\"><ap-constant-selector constants=\"dateFormats\" hide-value=\"true\" chosen-constant=\"param.dataTypeInfo.format\"></ap-constant-selector></div></div></ap-detail><ap-detail title=\"Date\"><div class=\"row\"><div class=\"col-lg-9\" ng-class=\"{\'has-error\': dateConfiguratorForm.dateInput.$invalid}\"><input type=\"text\" class=\"form-control input-sm\" uib-datepicker-popup=\"{{param.dataTypeInfo.format.text}}\" ng-model=\"param.dataTypeInfo.value\" ng-disabled=\"param.dataTypeInfo.useCurrentDate\" is-open=\"pickerConfig.visible\" name=\"dateInput\" close-text=\"Close\"><ap-checkbox title=\"Current date\" model=\"param.dataTypeInfo.useCurrentDate\" style=\"margin:5px 0 0 5px; display: inline-block\"></ap-checkbox></div><div class=\"col-lg-1\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"openDatePicker($event)\"><i class=\"glyphicon glyphicon-calendar\"></i></button></div></div><div class=\"row field-error\" ng-messages=\"dateConfiguratorForm.dateInput.$error\" role=\"alert\"><div ng-message=\"date\">Date is invalid</div></div></ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/visualize/views/elements/configurators/fileUploadConfigDialog.html","<form name=\"fileUploadConfigForm\" novalidate><md-dialog aria-label=\"FileUpload / Camera\" class=\"very-wide-dialog\"><ap-form-dialog title=\"FileUpload / Camera\" save-callback=\"saveChanges()\" cancel-callback=\"cancelChanges()\" save-allowed=\"fileUploadConfigForm.$valid && (param.dataTypeInfo.value1 || param.dataTypeInfo.value2)\"><ap-details><ap-detail title=\"Components\" detail-class=\"empty-border\"><ap-checkbox title=\"File Upload\" model=\"param.dataTypeInfo.value1\" is-narrow=\"::false\" style=\"margin-left: 8px; margin-bottom: 16px\"></ap-checkbox><br><ap-checkbox title=\"Camera\" model=\"param.dataTypeInfo.value2\" is-narrow=\"::false\" style=\"margin-left: 8px; margin-bottom: 16px\"></ap-checkbox></ap-detail><ap-detail title=\"Upload target\"><md-radio-group ng-model=\"config.target\" ng-required=\"true\" ng-change=\"config.url = \'\'\" class=\"md-primary\"><md-radio-button ng-value=\"\'uploadsFolder\'\" style=\"margin-left: 8px\">Uploads folder - <span style=\"color: #9b9b9b\">LOCAL_FOLDER/www/uploads</span></md-radio-button><md-radio-button ng-value=\"\'absolutePath\'\" style=\"margin-left: 8px\">Absolute path</md-radio-button><ap-edited-input ng-if=\"config.target === \'absolutePath\'\" model=\"config.url\" edited-placeholder=\"e.g. C:/Uploads\" edited-type=\"url\" edited-name=\"urlInput\" is-required=\"true\" elimination-options=\"::{eliminateSpecialChars: false, eliminateSpaces: false}\" edited-classes=\"file-upload-url\"></ap-edited-input></md-radio-group></ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/visualize/views/elements/configurators/lovConfigurationDialog.html","<form name=\"lovConfiguratorForm\" novalidate><md-dialog id=\"app-lov-dialog\" aria-label=\"Configure LOV\"><ap-form-dialog title=\"LOV - Dynamic from Service\" save-allowed=\"lovConfiguratorForm.$valid && hasSelection()\" save-callback=\"saveChanges()\" cancel-callback=\"cancelChanges()\"><ap-details><ap-detail title=\"Service\" detail-class=\"empty-border\"><service-selector service=\"param.dataTypeInfo.service\"></service-selector></ap-detail><ap-detail title=\"Displayed Fields\" ng-if=\"param.dataTypeInfo.service.properties\"><div id=\"lovFieldsTree\" class=\"treeview\" data-role=\"treeview\" style=\"height: 260px\"><ul><li ng-repeat=\"outputParam in param.dataTypeInfo.service.properties.outputParams | filter:{inTable: true}\" data-mode=\"checkbox\"><label class=\"input-control checkbox small-check\"><input type=\"checkbox\" name=\"{{::outputParam.id.name}}\" ng-model=\"outputParam.visible\"> <span class=\"check\"></span></label><span class=\"purple leaf\" ng-click=\"toggleCheckbox($event)\">{{outputParam.id.name}}</span></li></ul></div></ap-detail><ap-detail title=\"Config\"><ap-switch model=\"param.dataTypeInfo.format\" value1=\"Combobox\" value2=\"Dropdown\" style=\"display:inline-block\"></ap-switch><p><ap-checkbox title=\"Reload Button\" model=\"param.dataTypeInfo.value1\" style=\"margin-top:5px; float: left\"></ap-checkbox><ap-checkbox ng-if=\"param.dataTypeInfo.format === \'Combobox\'\" title=\"Closed Selection\" model=\"param.dataTypeInfo.value2\" style=\"margin-right: 40px; margin-top:5px; float:right\"></ap-checkbox></p></ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/visualize/views/elements/configurators/sliderConfigurationDialog.html","<form name=\"sliderConfiguratorForm\" novalidate><md-dialog aria-label=\"Slider\" class=\"normal-dialog\"><ap-form-dialog title=\"Configure Slider\" save-allowed=\"sliderConfiguratorForm.$valid\" save-callback=\"saveChanges()\" cancel-callback=\"cancelChanges()\"><ap-details><ap-detail data-title=\"True value\" detail-class=\"empty-border\"><input type=\"text\" class=\"form-control\" ng-model=\"param.dataTypeInfo.value1\"></ap-detail><ap-detail data-title=\"False value\"><input type=\"text\" class=\"form-control\" ng-model=\"param.dataTypeInfo.value2\"></ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/visualize/views/elements/configurators/staticLovConfigurationDialog.html","<form name=\"staticLovConfigurationForm\" novalidate><md-dialog id=\"app-lov-dialog\" aria-label=\"Static LOV Values\"><ap-form-dialog title=\"LOV - Static Values\" save-allowed=\"staticLovConfigurationForm.$valid\" save-callback=\"saveChanges()\" cancel-callback=\"cancelChanges()\"><ap-details><ap-detail title=\"Type\" detail-class=\"empty-border\"><ap-switch model=\"config.format\" value1=\"Combobox\" value2=\"Dropdown\"></ap-switch></ap-detail><ap-detail title=\"Values\"><app-static-lov-list values=\"config.values\" parent-form=\"::staticLovConfigurationForm\" on-change=\"validate\"></app-static-lov-list><ap-length-validator name=\"staticValues\" ng-model=\"config.values\"></ap-length-validator><div ng-messages=\"staticLovConfigurationForm.staticValues.$error\" class=\"container-fluid field-error\" role=\"alert\"><div ng-message=\"empty\">At least one value must be entered.</div></div></ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/visualize/views/elements/configurators/themeCustomizerDialog.html","<form name=\"themeCustomizerForm\" novalidate><md-dialog aria-label=\"Customize Theme\" class=\"narrow-dialog fixed-dialog\"><ap-form-dialog title=\"Customize Theme\" save-callback=\"saveChanges()\" cancel-callback=\"cancelChanges()\" save-allowed=\"themeCustomizerForm.$valid\"><ap-detail data-title=\"Theme Color\" title=\"Header & buttons color\"><div class=\"row\"><div class=\"col-lg-10 col-lg-offset-1 col-lg-push-1\"><ap-color-customizer model=\"theme\"></ap-color-customizer></div></div></ap-detail><ap-detail data-title=\"Caption Color\" title=\"Header & buttons text color\"><div class=\"row\"><div class=\"col-lg-10 col-lg-offset-1 col-lg-push-1\"><ap-color-customizer model=\"theme.captionColor\"></ap-color-customizer></div></div></ap-detail><ap-detail data-title=\"Label Color\" title=\"Field labels color\"><div class=\"row\"><div class=\"col-lg-10 col-lg-offset-1 col-lg-push-1\"><ap-color-customizer model=\"theme.labelColor\"></ap-color-customizer></div></div></ap-detail><ap-detail data-title=\"Background Color\" title=\"Page background color\"><div class=\"row\"><div class=\"col-lg-10 col-lg-offset-1 col-lg-push-1\"><ap-color-customizer model=\"theme.backgroundColor\"></ap-color-customizer></div></div></ap-detail></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/monitor/agent/testAgentManager.html","<div class=\"header-actions\"><a href=\"\" ng-click=\"createTestAgent()\" class=\"btn btn-primary btn-success\" uib-tooltip=\"New Test Agent\" tooltip-trigger tooltip-placement=\"bottom\"><span class=\"glyphicon glyphicon-plus\"></span></a><ap-group-action actions=\"::testAgentActions\" entities=\"testAgentHolder.testAgents\"></ap-group-action></div><test-agent-table test-agents=\"testAgentHolder.testAgents\" selected-test-agent=\"selectedTestAgent\"></test-agent-table>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/monitor/agent/testAgentTable.html","<div ng-if=\"!(testAgents.length > 0)\"><h5 class=\"entity-absence-indicator\">No Test Agents</h5></div><ng-form ng-if=\"testAgents.length > 0\" name=\"testCaseAgentsForm\" novalidate><ap-paged-table entities=\"testAgents\" table-name=\"TestAgentTable\" table-filter=\"tableFilter\" table-params=\"tableParams\"><div class=\"container-fluid\"><table ng-table=\"tableParams\" class=\"table table-bordered table-striped\"><thead><tr><th><div class=\"ui-grid-selection-row-header-buttons ui-grid-icon-ok\" style=\"width:50%; margin:0 auto\" ng-class=\"{\'ui-grid-all-selected\': isAllSelected}\" ng-click=\"onSelectAllClick()\" role=\"button\" tabindex=\"0\"></div></th><th>Test Name</th><th>Execution Interval</th><th>Status</th><th>Mail Recipient</th><th>Mail Error Description</th><th>Created By</th><th>Actions</th></tr></thead><tbody><tr ng-repeat=\"testAgent in $data | orderBy:\'-timestamp\' | filter: tableFilter.value track by testAgent.name\" ng-class=\"{\'selected-row\' : testAgent.selected}\" ng-form=\"testCaseAgentForm\" ap-context-menu=\"testAgent.inlineActions\" ap-context-menu-icons=\"::true\"><td class=\"narrow-column center\"><ap-checkbox model=\"testAgent.selected\" in-table=\"::true\"></ap-checkbox></td><td><div ng-if=\"testAgent.isEditing\" ng-class=\"{\'has-error\': testCaseAgentForm.caseNameInput.$invalid }\"><test-case-selector test-case=\"testAgent.testCase\" context=\"testAgents\" test-cases=\"testCases\" test-groups=\"testGroups\" singularity-context=\"testAgents\"></test-case-selector><div ng-messages=\"testCaseAgentForm.caseNameInput.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Test case is required</div></div></div><div ng-if=\"!testAgent.isEditing\"><ap-empty-link link-callback=\"handleTestCaseAgentSelection(testAgent)\" link-text=\"{{testAgent.testCase.properties.name}}\"></ap-empty-link></div></td><td><div ng-show=\"testAgent.isEditing\"><ap-constant-selector constants=\"intervals\" hide-value=\"true\" chosen-constant=\"testAgent.executionInterval\"></ap-constant-selector></div><div ng-show=\"!testAgent.isEditing\">{{testAgent.executionInterval.text}}</div></td><td>{{testAgent.active ? \"Active\" : \"Paused\"}}</td><td><div ng-show=\"testAgent.isEditing\" ng-class=\"{\'has-error\': testCaseAgentForm.testCaseAgentMailRecipient.$invalid }\"><input pattern=\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,3}$\" ng-model=\"testAgent.mailRecipient\" name=\"testCaseAgentMailRecipient\" class=\"form-control input-sm\" placeholder=\"recipient\" ng-required=\"testAgent.mailRecipient.length > 0 || testAgent.mailErrorDescription.length > 0\"><div ng-if=\"testCaseAgentForm.testCaseAgentMailRecipient.$invalid\" class=\"field-error\" role=\"alert\">Illegal recipient</div></div><div ng-show=\"!testAgent.isEditing\">{{testAgent.mailRecipient}}</div></td><td><div ng-show=\"testAgent.isEditing\" ng-class=\"{\'has-error\': testCaseAgentForm.testCaseAgentMailRecipient.$invalid }\"><input type=\"text\" ng-model=\"testAgent.mailErrorDescription\" class=\"form-control input-sm\" placeholder=\"description\" name=\"testCaseAgentMailErrorDescription\"><div ng-messages=\"testCaseAgentForm.testCaseAgentMailRecipient.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Mail recipient is required</div></div></div><div ng-show=\"!testAgent.isEditing\">{{testAgent.mailErrorDescription}}</div></td><td>{{testAgent.createdBy}}</td><td><a uib-tooltip=\"Edit\" ng-if=\"!testAgent.isEditing\" ng-click=\"edit(testAgent)\" class=\"btn btn-sm btn-blue\" tooltip-placement=\"bottom\" tooltip-trigger><i class=\"clip clip-pencil-3\"></i> </a><a uib-tooltip=\"Save\" ng-if=\"testAgent.isEditing\" ng-disabled=\"!testCaseAgentForm.$valid\" ng-click=\"save(testAgent)\" class=\"btn btn-sm btn-green\" tooltip-placement=\"bottom\" tooltip-trigger><i class=\"fa fa-save\"></i> </a><a uib-tooltip=\"Cancel\" ng-if=\"testAgent.isEditing\" ng-click=\"cancel(testAgent)\" class=\"btn btn-sm btn-red\" tooltip-placement=\"bottom\" tooltip-trigger><i class=\"clip clip-redo\"></i> </a><a uib-tooltip=\"Activate\" ng-if=\"!testAgent.isEditing && !testAgent.active\" ng-click=\"activate(testAgent)\" class=\"btn btn-sm btn-green\" tooltip-placement=\"bottom\" tooltip-trigger><i class=\"fa fa-play\"></i> </a><a uib-tooltip=\"Pause\" ng-if=\"!testAgent.isEditing && testAgent.active\" ng-click=\"pause(testAgent)\" class=\"btn btn-sm btn-red\" tooltip-placement=\"bottom\" tooltip-trigger><i class=\"fa fa-pause\"></i> </a><a uib-tooltip=\"Reset\" ng-if=\"!testAgent.isEditing\" ng-click=\"reset(testAgent)\" class=\"btn btn-sm btn-orange\" tooltip-placement=\"bottom\" tooltip-trigger><i class=\"fa fa-exchange\"></i></a></td></tr></tbody></table></div></ap-paged-table></ng-form>");
$templateCache.put("app/modules/auraTester/views/editors/testCase/testCaseEditor.html","<ng-form name=\"testCaseForm\" confirm-unsaved-changes novalidate><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-sm-12\"><ap-breadcrumbs crumbs=\"::testCaseCrumbs\"></ap-breadcrumbs><test-case-editor-header test-case=\"testCaseHolder.testCase\" mode=\"::mode\" test-case-form=\"testCaseForm\" collapse-manager=\"collapseManager\" should-run-test-case=\"testCaseRunner.shouldRunTestCase\" save-allowed=\"testCaseForm.$valid\" created-test-case-context=\"{{::createdTestCaseContext}}\"></test-case-editor-header></div></div><div class=\"row details-page\"><div class=\"col-md-12\"><test-case-details test-case=\"testCaseHolder.testCase\" mode=\"::mode\" collapse-manager=\"collapseManager\"></test-case-details><test-case-service-details test-case=\"testCaseHolder.testCase\" mode=\"::mode\" collapse-manager=\"collapseManager\"></test-case-service-details><test-case-batch-config test-case=\"testCaseHolder.testCase\" mode=\"::mode\" collapse-manager=\"collapseManager\"></test-case-batch-config><ap-collapsing-panel data-title=\"Input Parameters\" bindable-collapse=\"collapseManager.collapseTestCaseInputParameterConfig\"><test-case-input-parameter-table test-case=\"testCaseHolder.testCase\" mode=\"::mode\"></test-case-input-parameter-table><div ng-if=\"mode.edit\" style=\"color: gray\"><i class=\"clip clip-notification\"></i> Set \"AP_SERVICE_DEFAULT\" to use service\'s default value.</div></ap-collapsing-panel><ap-collapsing-panel data-title=\"Output Parameters\" bindable-collapse=\"collapseManager.collapseTestCaseOutputParameterConfig\"><test-case-output-parameter-table test-case=\"testCaseHolder.testCase\" mode=\"::mode\"></test-case-output-parameter-table></ap-collapsing-panel><test-case-advanced-validations test-case=\"testCaseHolder.testCase\" mode=\"::mode\" collapse-manager=\"collapseManager\"></test-case-advanced-validations><test-case-report ng-if=\"testCaseHolder.testCase.executionTriggered\" context=\"testCase\" report-callback=\"handleReportCallback()\" collapse-manager=\"collapseManager\" should-run-test-case=\"testCaseRunner.shouldRunTestCase\" test-case=\"testCaseHolder.testCase\"></test-case-report></div></div><div class=\"row\"><div class=\"col-md-12\"><test-case-editor-header test-case=\"testCaseHolder.testCase\" mode=\"::mode\" test-case-form=\"testCaseForm\" collapse-manager=\"collapseManager\" should-run-test-case=\"testCaseRunner.shouldRunTestCase\" save-allowed=\"testCaseForm.$valid\" created-test-case-context=\"{{::createdTestCaseContext}}\"></test-case-editor-header></div></div></div></ng-form>");
$templateCache.put("app/modules/auraTester/views/editors/testCase/testCaseEditorHeader.html","<ap-header mode=\"::mode\" context=\"entity\" loading-indicator=\"loadingIndicator\" should-confirm=\"::true\"><a ng-if=\"::mode.details\" class=\"btn btn-sm btn-primary\" a-disabled=\"mode.edit || loadingIndicator.isLoading || shouldRunTestCase\" ng-href=\"#/testCaseEditor/edit/{{::testCase.service.name}}/{{::testCase.name}}\">Edit </a><button ng-if=\"::mode.edit\" class=\"btn btn-sm btn-primary\" ng-disabled=\"!saveAllowed || loadingIndicator.isLoading || shouldRunTestCase\" ng-click=\"saveChanges()\">Save</button> <button ng-disabled=\"mode.edit || loadingIndicator.isLoading || shouldRunTestCase\" class=\"btn btn-sm btn-primary\" ng-click=\"runTestCase()\">Run</button><div class=\"dropdown\" style=\"display:inline-block\"><a href=\"javascript:void(0)\" data-toggle=\"dropdown\" a-disabled=\"::mode.edit\" class=\"dropdown-toggle btn btn-sm btn-primary\">Export <b class=\"caret\"></b></a><ul class=\"dropdown-menu\"><li><a href=\"/ServiceManager/Macro/TestCaseExport/{{::testCase.name}}/Junit\">Junit</a></li><li ng-if=\"::testCase.service.type === \'Forms\'\" class=\"divider narrow-divider\"></li><li><a href=\"/ServiceManager/Macro/TestCaseExport/{{::testCase.name}}/Junit_Standalone\">Junit Standalone</a></li><li ng-if=\"::testCase.service.type === \'Forms\'\" class=\"divider narrow-divider\"></li><li ng-if=\"::testCase.service.type === \'Forms\'\"><a href=\"/ServiceManager/Macro/TestCaseExport/{{::testCase.name}}/WebLoad\">WebLoad</a></li></ul></div></ap-header>");
$templateCache.put("app/modules/auraTester/views/editors/testCase/testCaseNameEditor.html","<ng-form name=\"testCaseInputForm\" novalidate><div ng-if=\"::(mode.new || mode.duplicate)\" ng-class=\"{\'has-error\': testCaseInputForm.testCaseName.$invalid }\"><input type=\"text\" class=\"form-control input-medium\" placeholder=\"enter test case name\" ng-model=\"testCase.name\" name=\"testCaseName\" ng-model-options=\"::{debounce: 350}\" required test-case-name-validator special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" ng-trim=\"true\" focus-me=\"::true\"></div><div ng-messages=\"testCaseInputForm.testCaseName.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Test case name is required</div><div ng-message=\"testCaseName\">Test case already exists!</div><div ng-message=\"testGroupName\">Test group already exists!</div></div><div ng-if=\"::((mode.edit && !mode.new && !mode.duplicate) || mode.details)\">{{testCase.name}}</div></ng-form>");
$templateCache.put("app/modules/auraTester/views/editors/testGroup/testGroupEditor.html","<form name=\"testGroupEditorForm\" confirm-unsaved-changes novalidate><div class=\"container-fluid\"><div class=\"row\"><ap-breadcrumbs crumbs=\"::testGroupEditorCrumbs\"></ap-breadcrumbs></div><div class=\"row\"><test-group-editor-header mode=\"::mode\" save-allowed=\"testGroupEditorForm.$valid\" save-callback=\"saveTestGroup()\" test-group=\"testGroup\" license-details=\"::licenseDetails\" collapse-manager=\"collapseManager\" test-group-runner=\"testGroupRunner\"></test-group-editor-header></div><div class=\"row details-page\"><ap-collapsing-panel data-title=\"{{testGroup.name + \' Details\'}}\" bindable-collapse=\"collapseManager.collapseTestGroupDetails\"><test-group-details mode=\"::mode\" test-group=\"testGroup\" collapse-manager=\"collapseManager\"></test-group-details></ap-collapsing-panel><ap-collapsing-panel data-title=\"{{testGroup.name + \' Test Cases\'}}\" bindable-collapse=\"collapseManager.collapseTestGroupCases\"><test-case-manager mode=\"::mode\" test-cases=\"testGroup.testCases\" test-group=\"testGroup\" context=\"testGroupCases\" collapse-manager=\"collapseManager\" license-details=\"::licenseDetails\"></test-case-manager></ap-collapsing-panel></div><div class=\"row\"><test-group-editor-header mode=\"::mode\" save-allowed=\"testGroupEditorForm.$valid\" save-callback=\"saveTestGroup()\" test-group=\"testGroup\" license-details=\"::licenseDetails\" collapse-manager=\"collapseManager\" test-group-runner=\"testGroupRunner\"></test-group-editor-header></div><div class=\"row details-page\"><test-case-report ng-if=\"testGroup.executionTriggered\" test-case=\"testGroup\" context=\"testGroup\" report-callback=\"handleTestGroupReport(report)\" collapse-manager=\"collapseManager\" should-run-test-case=\"testGroupRunner.shouldRunTestGroup\"></test-case-report></div></div></form>");
$templateCache.put("app/modules/auraTester/views/editors/testGroup/testGroupEditorHeader.html","<ap-header mode=\"::mode\" context=\"entity\" loading-indicator=\"loadingIndicator\" should-confirm=\"::true\"><a ng-if=\"::mode.details\" class=\"btn btn-sm btn-primary\" a-disabled=\"mode.edit || loadingIndicator.isLoading || testGroupRunner.shouldRunTestGroup\" ng-href=\"#/testGroupEditor/edit/testGroups/{{::testGroup.name}}\">Edit </a><button ng-if=\"::mode.edit\" class=\"btn btn-sm btn-primary\" ng-disabled=\"!saveAllowed || loadingIndicator.isLoading || testGroupRunner.shouldRunTestGroup\" ng-click=\"saveCallback()\">Save</button> <button ng-disabled=\"mode.edit || loadingIndicator.isLoading ||\n            testGroupRunner.shouldRunTestGroup || !(testGroup.testCases.length > 0)\" class=\"btn btn-sm btn-primary\" ng-click=\"runTestGroup()\">Run</button></ap-header>");
$templateCache.put("app/modules/auraTester/views/editors/testGroup/testGroupNameEditor.html","<ng-form name=\"testCaseInputForm\" novalidate><div ng-if=\"::mode.new\" ng-class=\"{\'has-error\': testCaseInputForm.groupNameInput.$invalid }\"><input type=\"text\" ng-model=\"testGroup.name\" name=\"groupNameInput\" class=\"form-control input-sm\" placeholder=\"group name\" ng-model-options=\"::{debounce: 150}\" required test-case-name-validator special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" ng-trim=\"true\" focus-me=\"::true\"></div><div ng-messages=\"testCaseInputForm.groupNameInput.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">group name is required</div><div ng-message=\"testCaseName\">Test case already exists!</div><div ng-message=\"testGroupName\">Test group already exists!</div></div><div ng-if=\"::(mode.edit && !mode.new) || mode.details\">{{::testGroup.name}}</div></ng-form>");
$templateCache.put("app/modules/auraTester/views/managers/auraTester/auraTesterManager.html","<ap-license-tester privileged=\"::isTestCaseManagementPrivileged()\"></ap-license-tester><div ng-if=\"::isTestCaseManagementPrivileged()\" class=\"container-fluid\"><ap-header main-title=\"AuraTester Manager\" sub-title=\"Create & run test cases and groups\" context=\"management\"></ap-header><div style=\"height: 1500px\"><md-tabs layout-fill md-selected=\"tabs.selectedIndex\"><md-tab layout-fill id=\"testCasesTab\"><md-tab-label>Test Cases</md-tab-label><md-tab-body><md-content ng-show=\"tabs.selectedIndex === 0\" class=\"md-padding overflowed-content\"><div class=\"row details-page\"><ap-collapsing-panel data-title=\"Test Cases\"><test-case-manager mode=\"::{edit:true}\" test-cases=\"testCases\" collapse-manager=\"collapseManager\" context=\"testCases\" license-details=\"::licenseDetails\"></test-case-manager></ap-collapsing-panel></div></md-content></md-tab-body></md-tab><md-tab layout-fill id=\"testGroupTab\"><md-tab-label>Test Groups</md-tab-label><md-tab-body><md-content ng-show=\"tabs.selectedIndex === 1\" class=\"md-padding overflowed-content\"><div class=\"row details-page\"><form name=\"testGroupManagementForm\" novalidate><ap-collapsing-panel data-title=\"Test Groups\" should-collapse=\"collapseManager.collapseTestGroups\"><test-group-manager test-groups=\"testGroupHolder.testGroups\" test-cases=\"testCases\" edited-test-group=\"editedTestGroupHolder.editedTestGroup\" previous-edited-group=\"previousEditedGroup\" created-test-case=\"createdTestCase\" run-test-group-callback=\"handleTestGroupExecution(testGroup)\" save-allowed=\"testGroupManagementForm.$valid\"></test-group-manager></ap-collapsing-panel></form></div><div class=\"row details-page\"><test-case-report test-case=\"triggeredTestGroup\" context=\"testGroup\" report-callback=\"handleTestGroupReport(report)\" collapse-manager=\"collapseManager\" should-run-test-case=\"testCaseRunner.shouldRunTestCase\"></test-case-report></div></md-content></md-tab-body></md-tab></md-tabs></div></div>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/serviceSelectorDialog.html","<form name=\"testCaseCreatorForm\" novalidate><md-dialog aria-label=\"{{::title}}\" class=\"wide-dialog overflowed-dialog\"><ap-form-dialog data-title=\"{{::title}}\" save-label=\"Create\" save-callback=\"onSave(serviceHolder.service)\" save-allowed=\"serviceHolder.service.properties.name.length > 0\"><service-selector service=\"serviceHolder.service\" context=\"{{::context}}\"></service-selector></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseAdvancedValidations.html","<ap-collapsing-panel title=\"Response Time Validation\" bindable-collapse=\"collapseManager.collapseTestCaseServiceDetails\"><ap-details><ap-detail title=\"Timeout\" detail-class=\"empty-border\"><div ng-if=\"::mode.edit || mode.new\"><ap-time-picker ng-model=\"testCase.responseTimeoutValidation\" time-value=\"::testCase.responseTimeoutValidation\" placeholder=\"Response timeout validation\"></ap-time-picker></div><div ng-if=\"::mode.details\">{{::testCase.responseTimeoutValidation}} seconds</div><div ng-if=\"hasBatchParameters()\"><small>For a test case with batch parameters, response time validation is applied per iteration.</small></div></ap-detail></ap-details></ap-collapsing-panel>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseBatchConfig.html","<ap-collapsing-panel title=\"Batch parameters\" bindable-collapse=\"collapseManager.collapseBatchConfig\"><ap-details><ap-detail title=\"Parameters file\" detail-class=\"empty-border\" ng-hide=\"::mode.details && !csvLoadingData.hasBatchParameters && !csvLoadingData.isLoaded\"><div class=\"row\"><div class=\"col-lg-5\" ng-show=\"::mode.edit || mode.new\"><input type=\"file\" file-change=\"handleFileLoad($event,files)\" ng-model=\"parameterFiles\" ng-trim=\"false\" class=\"form-control btn btn-default\"></div><div class=\"col-lg-5\" ng-if=\"csvLoadingData.hasBatchParameters && !csvLoadingData.isLoaded\"><a ng-click=\"downloadBatchParameters()\" class=\"btn btn-primary btn-sm link-button\">Batch Parameters file</a></div></div></ap-detail><h5 ng-show=\"mode.details && !csvLoadingData.hasBatchParameters && !csvLoadingData.isLoaded\">Batch parameters were not configured.</h5><div ng-show=\"csvLoadingData.hasBatchParameters || csvLoadingData.isLoaded\"><ap-detail title=\"Use first line as header\"><ap-checkbox model=\"testCase.useFirstLineAsHeader\" should-disable=\"::mode.details\" on-change=\"handleFirstLineAsHeader()\"></ap-checkbox></ap-detail><ap-detail title=\"Number of iterations\"><ap-edited-input mode=\"::mode\" model=\"testCase.numberOfIterations\" edited-name=\"numberOfIterationsInput\" edited-type=\"number\" edited-placeholder=\"iterations\" is-required=\"testCase.batchSize\" required-err-msg=\"number of iterations is required\" min-value=\"1\" min-err-msg=\"number of iterations should be positive\" max-value=\"{{testCase.computedBatchSize}}\" should-disable=\"testCase.runUntilEndOfFile\" max-err-msg=\"{{\'number of iterations can not exceed batch size: \' + testCase.computedBatchSize}}\"></ap-edited-input></ap-detail><ap-detail title=\"Run until end of file\"><ap-checkbox model=\"testCase.runUntilEndOfFile\" should-disable=\"::mode.details\" on-change=\"onRunUntilEndOfFileChange()\"></ap-checkbox></ap-detail></div></ap-details></ap-collapsing-panel>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseDetails.html","<ap-collapsing-panel data-title=\"Test Case Details\" bindable-collapse=\"collapseManager.collapseTestCaseDetails\"><ap-details><ap-detail data-title=\"Test case name\" detail-class=\"empty-border\"><test-case-name-editor mode=\"::mode\" test-case=\"testCase\"></test-case-name-editor></ap-detail><ap-detail data-title=\"Description\"><ap-edited-input mode=\"::mode\" model=\"testCase.description\" edited-placeholder=\"description\" elimination-options=\"::{disabled:true}\"></ap-edited-input></ap-detail><ap-detail data-title=\"Response format\"><ap-constant-selector mode=\"::mode\" constants=\"formats\" chosen-constant=\"testCase.responseFormat\"></ap-constant-selector></ap-detail><ap-detail data-title=\"Response level\"><ap-constant-selector mode=\"::mode\" constants=\"detailLevels\" hide-value=\"true\" chosen-constant=\"testCase.responseLevel\"></ap-constant-selector></ap-detail><ap-simple-detail ng-if=\"mode.details\" title=\"REST Url\" detail=\"{{::restUrl}}\"></ap-simple-detail></ap-details></ap-collapsing-panel>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseGrid.html","<div ng-if=\"!(testCases.length > 0)\"><h5 class=\"entity-absence-indicator\">No test cases</h5></div><div ng-if=\"testCases.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"testCases\" column-defs=\"::columnDefs\" filtered-columns=\"::filteredColumns\" use-selection=\"::useSelection\" enable-select-all=\"::enableSelectAll\" enable-draggable=\"::enableDraggable\" use-inline-actions=\"!readOnly\" enable-sorting=\"::enableSorting\"></ap-paged-grid></div><test-case-report ng-if=\"runTestCaseTrigger\" test-case=\"triggeredTestCase\" context=\"testCase\" report-callback=\"handleReportCallback()\" collapse-manager=\"collapseManager\" should-run-test-case=\"testCaseRunner.shouldRunTestCase\" should-un-collapse-all=\"::false\"></test-case-report>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseGroupSelector.html","<ui-select ng-if=\"::mode.edit || mode.new\" ng-model=\"testCase.testGroup\" theme=\"bootstrap\"><ui-select-match placeholder=\"choose test group\">{{$select.selected.name}}</ui-select-match><ui-select-choices repeat=\"testGroup in testGroupHolder.testGroups | filter: {name: $select.search}\" refresh-delay=\"0\" position=\"down\"><div ng-bind-html=\"testGroup.name | highlight: $select.search\"></div><small>{{testGroup.description}}</small></ui-select-choices></ui-select><div ng-if=\"::mode.details\">{{testCase.testGroup.name}}</div>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseInputParameterTable.html","<table id=\"testCaseInputParameterTable\" resizeable mode=\"::\'BasicResizer\'\" class=\"table table-bordered table-striped\"><thead><tr><th ng-class=\"{\'column-key-indication\':!testCase.service.useLabelsAsKeys}\">Name</th><th ng-class=\"{\'column-key-indication\':testCase.service.useLabelsAsKeys}\">Label</th><th>Default Value</th><th>Parameterized Value</th></tr></thead><tbody><tr ng-repeat=\"inputParam in ::testCase.inputParams track by $index\"><td>{{::inputParam.name}}</td><td>{{::inputParam.label}}</td><td><input ng-model=\"inputParam.defaultValue\" type=\"{{::inputParam.dataTypeInfo.dataType.value}}\" class=\"form-control input-medium\" placeholder=\"default value\" ng-disabled=\"hasParameterizedValue(inputParam) || mode.details\"></td><td><test-case-parameterized-value mode=\"::mode\" test-case=\"testCase\" param=\"inputParam\" should-disable=\"!testCase.batchParameters\"></test-case-parameterized-value></td></tr></tbody></table>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseManager.html","<div class=\"container-fluid\"><div ng-if=\"::mode.edit\" class=\"header-actions\"><a ng-if=\"::context === \'testCases\'\" href=\"\" ng-click=\"createTestCase()\" class=\"btn btn-primary btn-success\" uib-tooltip=\"New Test Case\" tooltip-trigger tooltip-placement=\"bottom\"><span class=\"glyphicon glyphicon-plus\"></span></a><ap-file-browser ng-if=\"::context === \'testCases\'\" file-handler=\"upload(file)\" file-filter=\".zip\" mode=\"symbol\" button-tooltip=\"Upload Test Cases\"></ap-file-browser><div ng-if=\"::context === \'testGroupCases\'\" class=\"dropdown\" style=\"display:inline-block\"><a href=\"javascript:void(0)\" data-toggle=\"dropdown\" class=\"btn btn-primary btn-success\"><span class=\"glyphicon glyphicon-plus\"></span> <b class=\"caret\"></b></a><ul class=\"dropdown-menu\"><li><a href=\"javascript:void(0)\" ng-click=\"createTestCase()\">New TestCase</a></li><li class=\"divider narrow-divider\"></li><li><a href=\"javascript:void(0)\" ng-click=\"addTestCase()\">Add existing TestCase</a></li></ul></div><ap-group-action actions=\"testCaseGroupActions\" entities=\"testCases\"></ap-group-action></div></div><test-case-grid ng-if=\"!gridLoadingIndicator.isLoading\" test-cases=\"testCases\" collapse-manager=\"collapseManager\" context=\"{{::context}}\" use-selection=\"::mode.edit\" enable-select-all=\"::mode.edit\" enable-draggable=\"::mode.edit\" enable-sorting=\"::context === \'testCases\'\" read-only=\"::context === \'testGroupCases\'\"></test-case-grid><ap-loader indicator=\"gridLoadingIndicator\" is-full-screen=\"false\"></ap-loader>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseOutputParameterTable.html","<table id=\"testCaseOutputParameterTable\" resizeable mode=\"::\'BasicResizer\'\" class=\"table table-bordered table-striped\"><thead><tr><th>Name</th><th>Label</th><th>Validations</th></tr></thead><tbody><tr ng-repeat=\"outParam in testCase.outputParams track by $index\"><td>{{::outParam.name}}</td><td>{{::outParam.label}}</td><td><div class=\"container-fluid\"><div class=\"row\"><div ng-if=\"::mode.edit\" class=\"col-lg-1\"><ap-action-panel action-data=\"outParamActionData\" action-context=\"outParam\" tooltip-placement=\"right\"></ap-action-panel></div><div class=\"col-lg-11\">{{present(testCase, outParam)}}</div></div></div></td></tr></tbody></table>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseParameterizedValue.html","<ui-select ng-if=\"::mode.edit || mode.new\" ng-model=\"param.parameterizedValue\" theme=\"bootstrap\" on-select=\"handleParameterizedValueSelect($item, $model)\" ng-disabled=\"shouldDisable\"><ui-select-match placeholder=\"choose parameterized value\" allow-clear=\"true\">{{$select.selected.name}}</ui-select-match><ui-select-choices repeat=\"batchHeader in testCase.parameters.headers | filter:$select.search track by batchHeader.name\" refresh-delay=\"0\"><div ng-bind-html=\"batchHeader.name | highlight: $select.search\"></div></ui-select-choices></ui-select><div ng-if=\"::mode.details\">{{::param.parameterizedValue.name}}</div>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseReport.html","<ap-collapsing-panel active-title=\"reportTitle\" bindable-collapse=\"collapseManager.collapseTestReport\"><ap-loader indicator=\"loadingIndicator\" is-full-screen=\"false\"></ap-loader><div ng-show=\"isFinished()\"><ap-details><ap-detail title=\"Report URL\" detail-class=\"empty-border\"><a ng-href=\"{{getReportUrl()}}\" target=\"_blank\">{{getReportUrl()}}</a></ap-detail></ap-details><ap-editor ng-if=\"isJson\" mode=\"json\" edited=\"testCaseJsonReport\" should-disable=\"true\" editor-theme=\"dawn\"></ap-editor><ap-editor ng-if=\"isXml\" mode=\"xml\" edited=\"testCaseXmlReport\" should-disable=\"true\" editor-theme=\"dawn\"></ap-editor></div></ap-collapsing-panel>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseSelector.html","<ui-select ng-model=\"testCase.properties\" theme=\"bootstrap\" name=\"caseNameInput\" required on-select=\"handleTestCaseSelect($item, $model)\"><ui-select-match placeholder=\"{{::\'select{0} a test {1}\'.format(context !== \'testGroups\' ? \'/create\':\'\',context === \'testGroups\' ? \'group\' : context === \'testAgents\' ? \'case/group\' : \'case\')}}\">{{$select.selected.name}}</ui-select-match><ui-select-choices group-by=\"\'context\'\" repeat=\"selectedTestCase in testCases | filter: {name:$select.search} | filter: singularFilter | filter: testGroupFilter | orderBy:\'isCreateOption\' track by selectedTestCase.name\" refresh-delay=\"0\" position=\"down\"><div ng-bind-html=\"selectedTestCase.name | highlight: $select.search\"></div><small><div>{{::selectedTestCase.description}}</div><div ng-if=\"selectedTestCase.service.name.length > 0\">service : <span ng-bind-html=\"selectedTestCase.service.name | highlight: $select.search\"></span></div></small></ui-select-choices></ui-select>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseSelectorDialog.html","<form name=\"testCaseSelectorForm\" novalidate><md-dialog aria-label=\"{{::title}}\" class=\"normal-dialog overflowed-dialog\"><ap-form-dialog title=\"{{::\'Select Test \' + (context === \'testGroups\' ? \'Group\' : \'Case\')}}\" save-label=\"select\" save-callback=\"handleSelect(testCaseHolder.testCase)\" save-allowed=\"testCaseHolder.testCase\"><test-case-selector test-case=\"testCaseHolder.testCase\" test-cases=\"testCases\" test-groups=\"testGroups\" singularity-context=\"singularityContext\" test-case-select-callback=\"handleSelect(testCase)\" context=\"{{::context}}\"></test-case-selector></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/testCaseServiceDetails.html","<ap-collapsing-panel title=\"Service Details\" bindable-collapse=\"collapseManager.collapseTestCaseServiceDetails\"><ap-details><ap-simple-detail title=\"Service Name\" detail-class=\"empty-border\" detail=\"{{::testCase.service.name}}\"></ap-simple-detail><ap-simple-detail title=\"Description\" detail=\"{{::testCase.service.description}}\"></ap-simple-detail></ap-details></ap-collapsing-panel>");
$templateCache.put("app/modules/auraTester/views/managers/testGroup/testGroupDetails.html","<ap-details><ap-detail title=\"Test group name\" detail-class=\"empty-border\"><test-group-name-editor mode=\"::mode\" test-group=\"testGroup\"></test-group-name-editor></ap-detail><ap-detail title=\"Description\"><ap-edited-input mode=\"::mode\" model=\"testGroup.description\" edited-placeholder=\"description\" elimination-options=\"::{disabled:true}\"></ap-edited-input></ap-detail><ap-detail title=\"Stop on fail\"><ap-checkbox model=\"testGroup.stopOnFail\" in-table=\"::false\" should-disable=\"::mode.details\"></ap-checkbox></ap-detail><ap-detail title=\"Sleep between tests\"><ng-form name=\"testGroupNameForm\"><div ng-if=\"::mode.edit\" ng-class=\"{\'has-error\': testGroupNameForm.sleepInput.$invalid }\"><input type=\"number\" positive-number=\"zeroAllowed\" ng-model=\"testGroup.sleepBetweenTests\" class=\"form-control input-sm\" min=\"0\" name=\"sleepInput\" placeholder=\"Sleep between rounds (milliseconds)\"> milliseconds</div><div ng-if=\"::mode.details\">{{testGroup.sleepBetweenTests}} milliseconds</div></ng-form></ap-detail><ap-detail ng-if=\"::mode.details\" title=\"REST Url\">{{::restUrl}}</ap-detail></ap-details>");
$templateCache.put("app/modules/auraTester/views/managers/testGroup/testGroupGrid.html","<div ng-if=\"!(testGroups.length > 0)\"><h5 class=\"entity-absence-indicator\">No test groups</h5></div><div ng-if=\"testGroups.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"testGroups\" column-defs=\"::columnDefs\" filtered-columns=\"::filteredColumns\"></ap-paged-grid></div>");
$templateCache.put("app/modules/auraTester/views/managers/testGroup/testGroupManager.html","<div class=\"container-fluid\"><div class=\"header-actions\"><a href=\"\" ng-href=\"#/testGroupEditor/new/testGroups\" class=\"btn btn-primary btn-success\" check-permission uib-tooltip=\"New Test Group\" tooltip-trigger tooltip-placement=\"bottom\"><span class=\"glyphicon glyphicon-plus\"></span></a><ap-group-action actions=\"::testGroupGroupActions\" entities=\"testGroups\"></ap-group-action></div></div><test-group-grid ng-if=\"!gridLoadingIndicator.isLoading\" test-groups=\"testGroups\" test-cases=\"testCases\" edited-test-group=\"editedTestGroupHolder.editedTestGroup\" previous-edited-group=\"previousEditedGroup\" created-test-case=\"createdTestCase\" run-test-group-callback=\"handleTestGroupExecution(testGroup)\" save-allowed=\"testGroupManagementForm.$valid\"></test-group-grid><ap-loader indicator=\"gridLoadingIndicator\" is-full-screen=\"false\"></ap-loader>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/monitor/monitoringManager.html","<ap-license-tester privileged=\"::isTestMonitorPrivileged()\"></ap-license-tester><div ng-if=\"::isTestMonitorPrivileged()\" class=\"container-fluid\"><ap-header main-title=\"Monitoring Agents\" sub-title=\"Schedule runs of test cases or groups, and monitor their results\" context=\"management\" loading-indicator=\"loadingIndicator\"></ap-header><div class=\"row details-page\"><ap-collapsing-panel data-title=\"Test Agents\" should-collapse=\"::true\"><test-agent-manager test-agent-holder=\"testAgentHolder\" test-cases=\"testCases\" test-groups=\"testGroups\" selected-test-agent=\"selectedTestAgentHolder.selectedTestAgent\" loading-indicator=\"loadingIndicator\"></test-agent-manager></ap-collapsing-panel><ap-collapsing-panel ng-show=\"testAgentHolder.testAgents.length > 0 && selectedTestAgentHolder.selectedTestAgent.name.length > 0\" data-title=\"{{getMonitorTitle(\'monitor chart\')}}\" on-open=\"handleChartContainerOpen()\" should-collapse=\"selectedTestAgentHolder.selectedTestAgent.logs.length > 0\"><ap-response-time-chart key=\"selectedTestAgentHolder.selectedTestAgent.name\" chart-data=\"selectedTestAgentHolder.selectedTestAgent.logs\" service-type=\"\" system-properties=\"::systemProperties\"></ap-response-time-chart></ap-collapsing-panel><ap-collapsing-panel ng-show=\"testAgentHolder.testAgents.length > 0 && selectedTestAgentHolder.selectedTestAgent.name.length > 0\" title=\"{{getMonitorTitle(\'logs\')}}\" should-collapse=\"selectedTestAgentHolder.selectedTestAgent.logs.length > 0\"><test-case-log-grid test-case-agent=\"selectedTestAgentHolder.selectedTestAgent\"></test-case-log-grid></ap-collapsing-panel><ap-collapsing-panel ng-if=\"testAgentHolder.testAgents.length > 0 && selectedTestAgentHolder.selectedTestAgent.name.length > 0\" title=\"Advanced Details\" should-collapse=\"selectedTestAgentHolder.selectedTestAgent.logs.length > 0\"><test-agent-advanced-details test-case-logs=\"selectedTestAgentHolder.selectedTestAgent.logs\"></test-agent-advanced-details></ap-collapsing-panel></div></div>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/monitor/testAgentAdvancedDetails.html","<ap-details ng-if=\"monitorDetails.ready\"><ap-detail title=\"Average Response Time\" detail-class=\"empty-border\">{{monitorDetails.average / 1000 | number:2}} seconds</ap-detail><ap-detail title=\"Max Response Time\">{{monitorDetails.max / 1000 | number:2}} seconds</ap-detail><ap-detail title=\"Min Response Time\">{{monitorDetails.min / 1000 | number:2}} seconds</ap-detail></ap-details>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/monitor/testCaseLogGrid.html","<div ng-if=\"!(testCaseAgent.logs.length > 0)\"><h5>No test case logs</h5></div><div ng-if=\"testCaseAgent.logs.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"testCaseAgent.logs\" column-defs=\"::columnDefs\" use-inline-actions=\"::false\" use-selection=\"::false\" function-appender=\"::functionAppender\" filtered-columns=\"::filteredColumns\"></ap-paged-grid></div>");
$templateCache.put("app/modules/auraTester/views/managers/testCase/validation/testCaseValidationOptionsDialog.html","<form name=\"testedValueForm\" novalidate><md-dialog aria-label=\"Validation Options\" class=\"overflowed-dialog wide-dialog\"><ap-form-dialog data-title=\"Validation Options\" save-callback=\"saveChanges()\" save-allowed=\"testedValueForm.$valid\"><ap-details><ap-detail data-title=\"Fail If\" detail-class=\"empty-border\"><ap-constant-selector mode=\"::mode\" constants=\"validationFunctions\" hide-value=\"true\" constant-placeholder=\"choose validation function\" chosen-constant=\"localOutputParam.validationFunction\" on-select-callback=\"handleValidationFunctionSelect(constant)\"></ap-constant-selector></ap-detail><ap-detail data-title=\"Tested Value\"><div ng-class=\"{\'has-error\': testedValueForm.testedValue.$invalid}\"><input type=\"text\" class=\"form-control input-medium\" placeholder=\"tested value\" ng-model=\"localOutputParam.testedValue\" name=\"testedValue\" ng-required=\"isTestedValueRequired() && !hasParameterizedValue()\" ng-disabled=\"!isTestedValueRequired()\"></div></ap-detail><ap-detail ng-if=\"::testCase.batchParameters\" data-title=\"Parameterized Value\"><test-case-parameterized-value mode=\"::mode\" test-case=\"testCase\" param=\"localOutputParam\" should-disable=\"!isTestedValueRequired()\"></test-case-parameterized-value></ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/page/views/managers/page/pageGrid.html","<div ng-if=\"pages.length === 0\"><h5 class=\"entity-absence-indicator\">No pages</h5></div><div ng-if=\"pages.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"pages\" table-actions=\"::tableActions\" column-defs=\"::columnDefs\" filtered-columns=\"::filteredColumns\" use-selection=\"::useSelection\" clear-selection=\"::clearSelection\" enable-select-all=\"::enableSelectAll\" use-inline-actions=\"!readOnly\"></ap-paged-grid></div>");
$templateCache.put("app/modules/page/views/managers/page/pageManager.html","<div class=\"container-fluid\"><ap-header mode=\"::mode\" context=\"management\" main-title=\"HTML Page Manager\" sub-title=\"Edit & manage your HTML pages\" loading-indicator=\"loadingIndicator\" should-confirm=\"::true\"><ap-file-browser file-handler=\"handleHtmlFileUpload(file)\" file-filter=\".html\" check-permission mode=\"symbol\" button-tooltip=\"Upload html file\"></ap-file-browser><ap-group-action actions=\"::pageManagementGroupActions\" entities=\"pages\"></ap-group-action></ap-header></div><page-grid pages=\"pages\" visible-columns=\"::systemProperties.PAGE_TABLE_COLUMNS\" clear-selection=\"::true\"></page-grid>");
$templateCache.put("app/modules/page/views/editors/page/pageEditor.html","<div class=\"container-fluid\"><div class=\"row\"><ap-breadcrumbs crumbs=\"::editPageCrumbs\"></ap-breadcrumbs></div><div class=\"row\"><page-editor-header mode=\"::mode\" page=\"page\" page-editor-form=\"pageEditorForm\" show-handler-table=\"showHandlerTable\" json-handler-parser=\"parseHandlersJson()\"></page-editor-header></div><div class=\"row details-page\"><ap-collapsing-panel data-title=\"Page Details\" should-collapse=\"::true\"><ap-details><ap-detail title=\"Linked applications\" detail-class=\"empty-border\"><span ng-if=\"::page.linkedApps === undefined || page.linkedApps.length === 0\">(none)</span> <span ng-repeat=\"app in ::page.linkedApps\"><a ng-href=\"#/appEditor/details/{{app}}\">{{app}}</a>{{$last ? \'\' : \', \'}}</span></ap-detail></ap-details></ap-collapsing-panel></div><form name=\"pageEditorForm\" confirm-unsaved-changes><div class=\"row details-page\"><ap-collapsing-panel data-title=\"Handlers\" should-collapse=\"::true\"><div class=\"row container-fluid\"><page-handler-table page=\"page\" show-handler-table=\"showHandlerTable\" handler-holder=\"handlerHolder\" handler-edit-mode=\"handlerEditMode\"></page-handler-table><div ng-hide=\"showHandlerTable\"><ap-editor mode=\"json\" edited=\"jsonHolder.jsonEditor\"></ap-editor></div></div><div class=\"row container-fluid\"><div class=\"pull-left\"><a href=\"\" class=\"btn btn-sm btn-primary\" ng-click=\"handleEditToggler()\">{{handlerEditMode.edit ? \"Cancel\" : \"Add\"}} </a><a href=\"\" class=\"btn btn-sm btn-primary\" ng-click=\"toggleHandlerTable()\">{{toggleHandlerTableButtonTitle}}</a></div></div></ap-collapsing-panel></div><div class=\"row container-fluid details-page\" ng-if=\"handlerEditMode.edit\"><page-handler-editor handler-holder=\"handlerHolder\" page=\"page\" handler-edit-mode=\"handlerEditMode\" service-names=\"serviceNames\" page-names=\"pageNames\" input-elements=\"inputElements\" form=\"pageEditorForm\" save-handler-callback=\"handleSavedHandler()\"></page-handler-editor></div><div class=\"row details-page\"><ap-collapsing-panel data-title=\"Javascript\" should-collapse=\"::true\"><ap-editor-js-suggestions editor=\"jsEditorHolder.editor\"></ap-editor-js-suggestions><ap-editor mode=\"javascript\" edited=\"page.javascript\" save-callback=\"savePage()\" editor-reference-holder=\"::jsEditorHolder\" auto-complete-array=\"::appVisualizerAutoCompleteArray\"></ap-editor></ap-collapsing-panel></div><div class=\"row details-page\"><ap-collapsing-panel data-title=\"HTML\" should-collapse=\"::true\"><ap-editor mode=\"html\" edited=\"page.htmlData\" save-callback=\"savePage()\" editor-height=\"600\"></ap-editor></ap-collapsing-panel></div></form><div class=\"row\"><page-editor-header mode=\"::mode\" page=\"page\" page-editor-form=\"pageEditorForm\" show-handler-table=\"showHandlerTable\" json-handler-parser=\"parseHandlersJson()\"></page-editor-header></div></div>");
$templateCache.put("app/modules/page/views/editors/page/pageEditorHeader.html","<ap-header context=\"entity\" loading-indicator=\"loadingIndicator\"><br><a href=\"\" class=\"btn btn-sm btn-teal\" ng-click=\"handlerEditMode.edit || pageEditorForm.$pristine || savePage()\" ng-hide=\"handlerEditMode.edit || pageEditorForm.$pristine\">Save </a><a href=\"\" class=\"btn btn-sm btn-teal\" ng-click=\"pageEditorForm.$pristine || restorePage()\" ng-hide=\"pageEditorForm.$pristine\">Restore </a><a href=\"\" ng-click=\"pageEditorForm.$dirty || downloadSinglePage(page.id)\" class=\"btn btn-sm btn-primary\" ng-hide=\"pageEditorForm.$dirty\">Download </a><a ng-click=\"pageEditorForm.$dirty || navigateToPage(page.id)\" class=\"btn btn-sm btn-primary clickable-column\" ng-hide=\"pageEditorForm.$dirty\">Open Page</a></ap-header>");
$templateCache.put("app/modules/page/views/managers/page/map/showMap.html","<!--TODO: refactor this horrible view , who wrote it???? --><div class=\"row\"><ap-breadcrumbs crumbs=\"::showMapCrumbs\"></ap-breadcrumbs></div><div class=\"row\"><div class=\"col-sm-12\"><div id=\"cy\" style=\"height:500px;width:95%;float:left\"></div></div></div><script>function drawMap(data) {\n        var cy = cytoscape({\n\n            container: document.getElementById(\'cy\'),\n\n            elements: data,\n\n            layout: {\n                name: \'circle\',\n                padding: 10\n              },\n\n            ready: function () {\n                window.cy = this;\n            },\n\n            style: cytoscape.stylesheet()\n                    .selector(\'node\')\n                    .css({\n                    	\'background-color\': \'#364f6a\',\n                        \'content\': \'data(name)\',\n                        \'text-valign\': \'top\',\n                        \'color\': \'black\',\n                        \'text-outline-width\': 0,\n                        \'width\': 70,\n                        \'shape\': \'none\',\n                        \'font-size\': 12\n                    })\n                    .selector(\'edge\')\n                    .css({\n                    	\'target-arrow-shape\': \'triangle\',\n                        \'width\': 4,\n                        \'line-color\': \'#31B0D5\',\n                        \'target-arrow-color\': \'#31B0D5\',\n                        \'curve-style\': \'bezier\'\n                    })\n                    .selector(\':selected\')\n                    .css({\n                        \'background-color\': \'#3dbe39\',\n                        \'line-color\': \'#3dbe39\',\n                        \'target-arrow-color\': \'#3dbe39\',\n                        \'source-arrow-color\': \'#3dbe39\'\n                    })\n                    .selector(\'.faded\')\n                    .css({\n                        \'opacity\': 0.25,\n                        \'text-opacity\': 0\n                    })\n        });\n    }</script>");
$templateCache.put("app/modules/page/views/editors/page/handler/pageHandlerEditor.html","<ap-details><ap-detail data-title=\"Action\" detail-class=\"empty-border\"><div class=\"col-sm-4\"><ap-constant-selector constants=\"handlerActions\" hide-value=\"true\" chosen-constant=\"handlerHolder.editedHandler.action\" on-select-callback=\"handleHandlerAction(constant)\"></ap-constant-selector></div></ap-detail><ap-detail data-title=\"Key\" ng-show=\"handlerActionOptions.showKey\"><div class=\"col-sm-4\"><input id=\"KeyCode\" class=\"form-control\" type=\"text\" ng-keyup=\"keyCodeParser($event)\" ng-keydown=\"preventDefault($event)\" ng-model=\"handlerHolder.editedHandler.key\" placeholder=\"Press key for binding...\" key-code></div><div class=\"col-sm-3\"><button class=\"btn btn-sm btn-primary\" ng-click=\"clearHandlerKey()\" ng-show=\"handlerHolder.editedHandler.key\">Clear</button></div></ap-detail><ap-detail data-title=\"Bound Element\" ng-show=\"handlerActionOptions.showElement\"><div class=\"col-sm-4\"><select class=\"form-control\" ng-model=\"handlerHolder.editedHandler.element\" ng-options=\"elemId as ( elemId | inputElement : this ) for elemId in inputElements\"><option value=\"\">Global</option></select></div></ap-detail><ap-varying-detail data-title=\"{{handlerActionOptions.attributeLabel}}\" ng-if=\"handlerActionOptions.showAttribute\"><div class=\"col-sm-4\"><ap-attribute-selector attributes=\"handlerActionOptions.attributeOptions\" chosen-attribute=\"handlerHolder.editedHandler.attr\"></ap-attribute-selector></div><div class=\"col-sm-5\"><input type=\"text\" class=\"form-control\" ng-model-options=\"::{debounce:50}\" ng-show=\"handlerHolder.editedHandler.attr.value === \'custom\'\" ng-model=\"handlerHolder.editedHandler.customAttribute\"></div></ap-varying-detail><ap-detail data-title=\"Initialization handler\" ng-show=\"handlerActionOptions.showResponseHandler\"><div class=\"col-sm-4\"><input class=\"form-control\" type=\"text\" ng-model=\"handlerHolder.editedHandler.initHandler\"></div><input class=\"btn btn-sm btn-primary\" id=\"createInitHandlerButton\" type=\"button\" ng-click=\"createInitHandler()\" value=\"Create\"></ap-detail><ap-detail data-title=\"Response handler\" ng-show=\"handlerActionOptions.showResponseHandler\"><div class=\"col-sm-4\"><input class=\"form-control\" type=\"text\" ng-model=\"handlerHolder.editedHandler.responseHandler\"></div><input class=\"btn btn-sm btn-primary\" id=\"createResponseHandlerButton\" type=\"button\" ng-click=\"createResponseHandler()\" value=\"Create\"></ap-detail><ap-detail><div class=\"col-sm-2 col-sm-push-1\" style=\"margin-right: 5px\"><button class=\"btn btn-sm btn-success\" ng-click=\"applyChanges()\">Apply</button></div><div class=\"col-sm-2\"><button class=\"btn btn-sm btn-danger\" ng-click=\"cancelChanges()\">Cancel</button></div></ap-detail></ap-details>");
$templateCache.put("app/modules/page/views/editors/page/handler/pageHandlerTable.html","<table class=\"table table-bordered table-striped\" ng-show=\"showHandlerTable\"><thead><tr><th class=\"hidden-xs center\">Bound Key</th><th>Bound Element</th><th>Handler Action</th><th>Attribute</th><th>Initialization handler</th><th>Response handler</th><th>Actions</th></tr></thead><tbody><tr ng-repeat=\"handler in page.handlerData track by $index\"><td class=\"center\">{{handler.key | keyCode}}</td><td>{{handler.element | inputElement : this}}</td><td>{{handler.action.text}}</td><td>{{handler.attr.value === \"custom\" ? handler.customAttribute:handler.attr.value}}</td><td>{{handler.initHandler}}</td><td>{{handler.responseHandler}}</td><td><a class=\"btn btn-sm action-button btn-blue\" ng-click=\"edit($index, handler)\" a-disabled=\"handlerEditMode.edit\" uib-tooltip=\"Edit\" tooltip-trigger tooltip-placement=\"bottom\"><i class=\"clip-pencil-3\"></i> </a><a class=\"btn btn-sm action-button btn-red\" ng-click=\"delete($index)\" uib-tooltip=\"Delete\" tooltip-trigger tooltip-placement=\"bottom\"><i class=\"clip-remove\"></i></a></td></tr></tbody></table>");
$templateCache.put("app/modules/app/views/managers/appGrid.html","<div ng-if=\"!(apps.length > 0)\"><h5 class=\"entity-absence-indicator\">No applications</h5></div><div ng-if=\"apps.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"apps\" column-defs=\"::columnDefs\" clearselection=\"::true\" filtered-columns=\"::filteredColumns\"></ap-paged-grid></div>");
$templateCache.put("app/modules/app/views/managers/appManager.html","<ap-license-tester privileged=\"::isServiceManagementPrivileged()\"></ap-license-tester><div ng-if=\"::isServiceManagementPrivileged()\"><div class=\"container-fluid\"><ap-header context=\"management\" main-title=\"Application Manager\" sub-title=\"Create & Manage your applications\" loading-indicator=\"loadingIndicator\"><a href=\"\" ng-click=\"goToAppVisualizer()\" class=\"btn btn-primary btn-success\" check-permission uib-tooltip=\"New App\" tooltip-trigger tooltip-placement=\"bottom\"><span class=\"glyphicon glyphicon-plus\"></span></a><ap-group-action actions=\"::appGroupActions\" entities=\"apps\"></ap-group-action></ap-header></div><app-grid apps=\"apps\" system-properties=\"::systemProperties\"></app-grid></div>");
$templateCache.put("app/modules/app/views/editors/appNameEditor.html","<ng-form name=\"appNameInputForm\" novalidate><div ng-if=\"::(mode.new || mode.duplicate)\" ng-class=\"{\'has-error\': appNameInputForm.appName.$invalid }\"><input type=\"text\" class=\"form-control input-medium\" placeholder=\"App name input\" ng-model=\"app.name\" name=\"appName\" ng-model-options=\"::{debounce: 150}\" required app-name-validator=\"{{::!shouldDisable}}\" special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" ng-trim=\"true\" focus-me=\"::true\"></div><div ng-messages=\"appNameInputForm.appName.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Application name required.</div><div ng-message=\"name\">Name already exists.</div></div><div ng-if=\"::((mode.edit && !mode.new && !mode.duplicate) || mode.details)\">{{app.name}}</div></ng-form>");
$templateCache.put("app/modules/app/views/visualizer/appVisualizer.html","<div class=\"container-fluid\"><form name=\"appVisualizerForm\" novalidate><div class=\"container-fluid\"><ap-breadcrumbs crumbs=\"::appVisualizerCrumbs\"></ap-breadcrumbs><ap-header main-title=\"Application Visualizer\"></ap-header></div><div class=\"row\"><ng-form id=\"wizardForm\" name=\"wizardForm\" novalidate><wizard name=\"appVisualizerWizard\" on-finish=\"submit()\"><ap-smart-step data-title=\"General\" description=\"Details & services\" navigation=\"{next:false}\"><app-visualizer-step-1 services=\"services\" app=\"app\" mode=\"::mode\" system-properties=\"::systemProperties\" ng-if=\"step === 0\"></app-visualizer-step-1></ap-smart-step><ap-smart-step data-title=\"Design\" description=\"Looks & structure\" navigation=\"{next:false}\"><app-visualizer-step-2 app=\"app\" ng-if=\"step === 1\"></app-visualizer-step-2></ap-smart-step><ap-smart-step data-title=\"Page Editor\" description=\"Part A : Fields\" navigation=\"{next: false}\"><app-visualizer-step-3 app=\"app\" system-properties=\"::systemProperties\" ng-if=\"step === 2\"></app-visualizer-step-3></ap-smart-step><ap-smart-step data-title=\"Page Editor\" description=\"Part B : Actions\" navigation=\"{next: false}\"><app-visualizer-step-4 app=\"app\" form=\"::appVisualizerForm\" ng-if=\"step === 3\"></app-visualizer-step-4></ap-smart-step><ap-smart-step data-title=\"Pages\" description=\"Summary\" navigation=\"{next:false}\"><app-visualizer-step-5 app=\"app\" loading-indicator=\"loadingIndicator\" ng-if=\"step === 4\"></app-visualizer-step-5></ap-smart-step><ap-smart-step data-title=\"Advanced\" description=\"(Optional)\" navigation=\"{next:false}\"><app-visualizer-step-6 app=\"app\" loading-indicator=\"loadingIndicator\" ng-if=\"step === 5\"></app-visualizer-step-6></ap-smart-step></wizard></ng-form></div></form></div>");
$templateCache.put("app/modules/app/views/visualizer/appVisualizerStep1.html","<ap-step-navigation on-next=\"::onNext\" next-allowed=\"appVisualizerStep1Form.$invalid\"></ap-step-navigation><ng-form name=\"appVisualizerStep1Form\" novalidate><ap-collapsing-panel data-title=\"Application Details\"><ap-details><ap-detail title=\"Application Name\" detail-class=\"empty-border\"><app-name-editor mode=\"::mode\" app=\"app\"></app-name-editor></ap-detail><ap-detail title=\"Description\"><ap-edited-input mode=\"::mode\" model=\"app.description\" edited-placeholder=\"description\" elimination-options=\"::{disabled:true}\"></ap-edited-input></ap-detail></ap-details></ap-collapsing-panel><ap-collapsing-panel data-title=\"Services\" bindable-collapse=\"collapseManager.collapseServices\"><div class=\"row\"><ap-grid-editor-actions entities=\"app.services\" add-callback=\"addServices()\" remove-callback=\"removeServices\"></ap-grid-editor-actions><app-services-grid services=\"app.services\" allow-partial=\"::allowPartial\"></app-services-grid><ap-length-validator name=\"appServices\" ng-model=\"app.services\"></ap-length-validator><div ng-messages=\"appVisualizerStep1Form.appServices.$error\" class=\"container-fluid field-error\" role=\"alert\"><div ng-message=\"empty\"><br>At least one service must be selected.</div></div></div></ap-collapsing-panel></ng-form>");
$templateCache.put("app/modules/app/views/visualizer/appVisualizerStep2.html","<ap-step-navigation next-allowed=\"appVisualizerStep2Form.$invalid\" navigation=\"{back: true}\" on-next=\"::onNext\"></ap-step-navigation><ng-form name=\"appVisualizerStep2Form\" novalidate><ap-details><ap-detail data-title=\"Direction\" detail-class=\"empty-border\"><ap-switch model=\"app.direction\" value1=\"RTL\" value2=\"LTR\"></ap-switch></ap-detail><ap-detail data-title=\"Theme Color\"><ap-theme-picker theme=\"app.theme\" colors=\"themes\" template=\"app.platform\"></ap-theme-picker></ap-detail><ap-detail data-title=\"Background\"><ap-image-upload model=\"app.backgroundBlob\" current-image-name=\"app.backgroundPath\" should-resize=\"::false\" class=\"inline width-75\"></ap-image-upload><ap-constant-selector title=\"Background Style\" constant-placeholder=\"Select style\" constants=\"backgroundStyles\" hide-value=\"::true\" chosen-constant=\"app.backgroundStyle\" edited-classes=\"inline app-background-style margin-left-10 align-top\"></ap-constant-selector></ap-detail><ap-detail data-title=\"Logo\"><ap-image-upload model=\"app.logoBlob\" current-image-name=\"app.logoPath\" class=\"inline width-75\"></ap-image-upload><span ng-class=\"{\'has-error\' : appVisualizerStep2Form.logoWidth.$invalid}\" class=\"inline margin-left-10 align-top\">Width: <input type=\"number\" min=\"1\" ng-model=\"app.logoWidth\" class=\"row-input form-control\" positive-number required name=\"logoWidth\" id=\"app-logo-width\"> px</span></ap-detail><ap-detail data-title=\"Pages\"><app-page-names-list pages=\"app.pages\" parent-form=\"::appVisualizerStep2Form\" on-change=\"validate\" on-edit=\"editPage\"></app-page-names-list><ap-length-validator name=\"appPages\" ng-model=\"app.pages\"></ap-length-validator><div ng-messages=\"appVisualizerStep2Form.appPages.$error\" class=\"container-fluid field-error\" role=\"alert\"><div ng-message=\"empty\">At least one page name must be entered.</div></div></ap-detail></ap-details></ng-form>");
$templateCache.put("app/modules/app/views/visualizer/appVisualizerStep3.html","<ap-step-navigation navigation=\"{back: true}\" on-next=\"::onNext\" back-disabled=\"appVisualizerStep3Form.$invalid\" next-allowed=\"appVisualizerStep3Form.$invalid\"><app-page-selector pages=\"::app.pages\" current-page-index=\"::app.ui_currentPageIndex\" on-select-callback=\"::onPageSelect(name)\" class=\"col-lg-push-2 col-lg-4\" should-disable=\"appVisualizerStep3Form.$invalid\"></app-page-selector></ap-step-navigation><ng-form name=\"appVisualizerStep3Form\" novalidate><ap-collapsing-panel data-title=\"Title\"><ap-edited-input mode=\"::mode\" model=\"currentPage.title\" edited-name=\"pageTitle\" is-required=\"::true\" required-err-msg=\"Page title required\" edited-placeholder=\"Page title\" elimination-options=\"::{disabled:true}\"></ap-edited-input></ap-collapsing-panel><ap-collapsing-panel data-title=\"Fields\"><div class=\"dropdown\" style=\"display:inline-block; margin-left:15px\"><a href=\"javascript:void(0)\" data-toggle=\"dropdown\" class=\"btn btn-primary btn-success\"><span class=\"glyphicon glyphicon-plus\"></span> <b class=\"caret\"></b></a><ul class=\"dropdown-menu\"><li><a href=\"javascript:void(0)\" ng-click=\"openFieldsDialog()\">Field from service</a></li><li class=\"divider narrow-divider\"></li><li><a href=\"javascript:void(0)\" ng-click=\"addCustomField()\">Custom Field</a></li><li class=\"divider narrow-divider\"></li><li><a href=\"javascript:void(0)\" ng-click=\"addImage()\">Image</a></li><li class=\"divider narrow-divider\"></li><li><a href=\"javascript:void(0)\" ng-click=\"addMap()\">Map</a></li></ul></div><br><br><app-page-fields-table fields=\"currentPage.params\" edit-map-callback=\"editMap(field)\" delete-callback=\"deleteField(fieldName)\"></app-page-fields-table></ap-collapsing-panel><ap-collapsing-panel data-title=\"Table / List\"><md-radio-group ng-if=\"currentPage.multiRecord.params.length > 0\" ng-model=\"currentPage.multiRecord.type\" ng-change=\"onMultiRecordTypeChange()\" class=\"md-primary\" layout=\"row\" layout-padding layout-margin><md-radio-button ng-repeat=\"multiRecordType in ::multiRecord.types\" aria-label=\"MultiRecord type\" ng-value=\"multiRecordType.value\" title=\"{{::multiRecordType.text}}\" class=\"ap-radio-button\"><img ng-src=\"assets/images/app-visualizer-multirecord-{{::multiRecordType.value}}.png\" alt=\"{{::multiRecordType.text}}\"><div>{{::multiRecordType.text}}</div></md-radio-button></md-radio-group><div ng-show=\"currentPage.multiRecord.params.length > 0\"><ap-checkbox title=\"Enable filtering\" model=\"currentPage.multiRecord.isSearchable\"></ap-checkbox><br><br></div><a href=\"\" ng-click=\"openFieldsDialog(true)\" class=\"btn btn-primary btn-success\" check-permission uib-tooltip=\"Select table/list fields\" tooltip-trigger tooltip-placement=\"bottom\"><span class=\"glyphicon glyphicon-plus\"></span></a><br><br><app-page-table-fields-table fields=\"currentPage.multiRecord.params\" delete-callback=\"deleteMultiRecordField(fieldName)\" supports-types=\"currentPage.multiRecord.type === \'table\'\"></app-page-table-fields-table></ap-collapsing-panel><div class=\"action-row pull-right\"><button title=\"Clear default values\" ng-click=\"clearAllFields()\" class=\"btn btn-sm btn-primary\">Clear values</button> <button title=\"Remove all fields\" ng-click=\"removeAllFields()\" class=\"btn btn-sm btn-primary\">Remove all fields</button></div></ng-form>");
$templateCache.put("app/modules/app/views/visualizer/appVisualizerStep4.html","<ap-step-navigation navigation=\"{back: true}\" on-next=\"::onNext\" confirm-button=\"Confirm page\"><app-page-selector pages=\"::app.pages\" current-page-index=\"::app.ui_currentPageIndex\" on-select-callback=\"::onPageSelect(name)\" class=\"col-lg-push-2 col-lg-4\"></app-page-selector></ap-step-navigation><ap-loader indicator=\"loadingIndicator\"></ap-loader><ap-collapsing-panel data-title=\"Actions\"><a href=\"\" ng-click=\"openActionDialog()\" class=\"btn btn-primary btn-success\" check-permission uib-tooltip=\"Add action\" tooltip-trigger tooltip-placement=\"bottom\"><span class=\"glyphicon glyphicon-plus\"></span></a><br><br><app-page-actions-table actions=\"currentPage.actions\" edit-callback=\"openActionDialog(index)\" delete-callback=\"deleteAction(index)\"></app-page-actions-table></ap-collapsing-panel><form name=\"pageEditorForm\" confirm-unsaved-changes><ap-collapsing-panel data-title=\"Javascript\" should-collapse=\"currentPage.javascript.length > 0\"><ap-editor-js-suggestions editor=\"jsEditorHolder.editor\"></ap-editor-js-suggestions><ap-editor mode=\"javascript\" edited=\"currentPage.javascript\" editor-reference-holder=\"::jsEditorHolder\" auto-complete-array=\"::appVisualizerAutoCompleteArray\"></ap-editor></ap-collapsing-panel></form>");
$templateCache.put("app/modules/app/views/visualizer/appVisualizerStep5.html","<ap-step-navigation next-allowed=\"appVisualizerStep5Form.$invalid\" navigation=\"{back: true}\" on-back=\"::backToStep2\"></ap-step-navigation><ap-loader indicator=\"loadingIndicator\"></ap-loader><ng-form name=\"appVisualizerStep5Form\" novalidate><ap-collapsing-panel data-title=\"Pages in application\" bindable-collapse=\"collapseManager.collapsePages\"><div class=\"row\"><app-pages-grid pages=\"app.pages\" add-callback=\"backToStep2()\" edit-callback=\"editPage(name)\" duplicate-callback=\"duplicatePage(name)\" rename-callback=\"renamePage(name)\" batch-remove-callback=\"removePages(pages)\"></app-pages-grid><ap-length-validator name=\"appPages\" ng-model=\"app.pages\"></ap-length-validator><div ng-messages=\"appVisualizerStep5Form.appPages.$error\" class=\"container-fluid field-error\" role=\"alert\"><div ng-message=\"empty\">At least one page must be created.</div></div></div><br><span style=\"padding-right: 10px\">Login page:</span><ap-constant-selector title=\"Login page\" constants=\"pageNames\" hide-value=\"true\" chosen-constant=\"app.loginPage\" on-select-callback=\"::onSelect(constant)\" edited-classes=\"inline db-connector-field\"></ap-constant-selector><br><span ng-if=\"app.loginPage.value !== \'\'\"><i class=\"clip clip-notification\"></i> Other pages will redirect to login page if no user is logged in.<br></span></ap-collapsing-panel></ng-form>");
$templateCache.put("app/modules/app/views/visualizer/appVisualizerStep6.html","<ap-step-navigation next-allowed=\"appVisualizerStep6Form.$invalid || (app._enableOffline && !syncPageVacant)\" navigation=\"{back: true}\" confirm-button=\"Create app\"></ap-step-navigation><ap-loader indicator=\"loadingIndicator\"></ap-loader><ng-form name=\"appVisualizerStep6Form\" novalidate><ap-collapsing-panel data-title=\"Common Javascript\" should-collapse=\"false\"><ap-editor mode=\"javascript\" edited=\"app.javascript\"></ap-editor><div class=\"padd-wide-top\"><a href=\"\" ng-click=\"resetToDefault()\" class=\"padd-wide-left\">Reset to default</a></div></ap-collapsing-panel><ap-collapsing-panel data-title=\"Common CSS\" should-collapse=\"app.css.length > 0\"><ap-editor mode=\"css\" edited=\"app.css\"></ap-editor></ap-collapsing-panel><ap-collapsing-panel data-title=\"Cache\"><ap-checkbox title=\"Enable\" model=\"app._enableOffline\"></ap-checkbox><div ng-if=\"app._enableOffline && !syncPageVacant\" class=\"field-error\"><br>Page sync.html already exists in your application! remove/rename it to use offline support.</div><br><br><table id=\"offlineSupportTable\" resizeable mode=\"::\'BasicResizer\'\" ng-show=\"app._enableOffline && syncPageVacant\" class=\"table table-bordered table-striped\"><thead><tr><th>Service</th><th>Cache Action</th><th>Occurrences</th></tr></thead><tbody><tr ng-repeat=\"serviceOfflineConfig in ::app.offlineSupport.services track by $index\"><td class=\"purple\">{{::serviceOfflineConfig.service}}</td><td><ap-constant-selector constants=\"offlineActions\" hide-value=\"true\" chosen-constant=\"serviceOfflineConfig.action\"></ap-constant-selector></td><td ng-bind-html=\"::serviceOfflineConfig.usage\"></td></tr></tbody></table></ap-collapsing-panel></ng-form>");
$templateCache.put("app/modules/app/views/visualizer/page/appImageDialog.html","<form name=\"appImageDialogForm\" novalidate><md-dialog aria-label=\"Image\" class=\"wide-dialog\"><ap-form-dialog title=\"Image\" save-label=\"OK\" save-callback=\"onConfirm()\" save-allowed=\"appImageDialogForm.$valid\"><ap-details><ap-detail title=\"Name\" detail-class=\"empty-border\" ng-class=\"{\'has-error\': appImageDialogForm.imageId.$invalid}\"><input type=\"text\" ng-model=\"image.id\" ng-disabled=\"image.ui_isNew !== true\" class=\"form-control input-medium\" name=\"imageId\" ng-model-options=\"::{debounce: 150}\" special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" required ng-trim=\"true\"></ap-detail><ap-detail title=\"Image URL\" detail-class=\"empty-border\" ng-class=\"{\'has-error\': appImageDialogForm.imageUrl.$invalid}\"><input type=\"text\" ng-model=\"image.url\" class=\"form-control input-medium\" name=\"imageUrl\" ng-model-options=\"::{debounce: 150}\" required ng-trim=\"true\"></ap-detail><ap-detail title=\"Width\" detail-class=\"empty-border\" ng-class=\"{\'has-error\': appImageDialogForm.imageWidth.$invalid}\"><input ng-model=\"image.width\" class=\"row-input form-control\" required name=\"imageWidth\" placeholder=\"e.g. 100% or 255px\" style=\"width:200px\"></ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/app/views/visualizer/page/appPageActionDialog.html","<form name=\"appPageActionEditorForm\" novalidate><md-dialog id=\"app-page-action-dialog\" aria-label=\"Action editor\"><ap-form-dialog title=\"Action editor\" save-label=\"OK\" class=\"two-column-row\" save-callback=\"onConfirm()\" save-allowed=\"appPageActionEditorForm.$valid\"><ap-details class=\"two-column-column with-background\"><ap-detail detail-class=\"empty-border center\"><b>Event</b></ap-detail><ap-detail title=\"Event\" detail-class=\"empty-border\" pad-vertically=\"false\"><ap-constant-selector constants=\"events\" hide-value=\"true\" chosen-constant=\"action.event.type\" on-select-callback=\"onEventSelect(constant)\"></ap-constant-selector></ap-detail><div ng-if=\"action.event.type.value === \'buttonClick\'\"><ap-detail title=\"Button title\" detail-class=\"empty-border\" pad-vertically=\"false\"><ap-edited-input mode=\"::edit\" model=\"action.event.element\" edited-name=\"buttonTitle\" is-required=\"::true\" edited-placeholder=\"Text displayed on the button\" elimination-options=\"::{disabled:true}\"></ap-edited-input></ap-detail><ap-detail title=\"Position & width\" detail-class=\"empty-border\" pad-vertically=\"false\"><ap-constant-selector constants=\"buttonPositions\" hide-value=\"true\" edited-classes=\"inline align-middle width-half\" chosen-constant=\"action.event.buttonPosition\"></ap-constant-selector><ap-constant-selector constants=\"buttonWidths\" hide-value=\"true\" edited-classes=\"inline align-middle width-half\" chosen-constant=\"action.event.buttonWidth\"></ap-constant-selector></ap-detail></div><ap-detail title=\"Key\" ng-if=\"action.event.type.value === \'keyPress\'\" detail-class=\"empty-border\" pad-vertically=\"false\" ng-class=\"{\'has-error\' : appPageActionEditorForm.key.$invalid}\"><input name=\"key\" type=\"text\" ng-model=\"action.event.element\" class=\"form-control\" required ng-keyup=\"keyCodeParser($event)\" ng-keydown=\"preventDefault($event)\" placeholder=\"Press key for binding...\" key-code></ap-detail></ap-details><ap-details class=\"two-column-column\"><ap-detail detail-class=\"empty-border center\"><b>Action</b></ap-detail><ap-detail title=\"Action type\" detail-class=\"empty-border\" pad-vertically=\"false\"><ap-constant-selector constants=\"actionTypes\" hide-value=\"true\" chosen-constant=\"action.action.type\" on-select-callback=\"onActionTypeSelect(constant)\"></ap-constant-selector></ap-detail><div ng-if=\"action.action.type.value === \'executeService\'\"><ap-detail title=\"Service name\" detail-class=\"empty-border\" pad-vertically=\"false\"><ap-constant-selector constants=\"serviceNames\" hide-value=\"true\" edited-name=\"serviceName\" chosen-constant=\"action.action.attribute.main\" is-required=\"::true\"></ap-constant-selector></ap-detail><ap-detail title=\"onSuccess\" detail-class=\"empty-border\" pad-vertically=\"false\"><ap-constant-selector constants=\"onServiceSuccessActions\" hide-value=\"true\" chosen-constant=\"action.action.attribute.onSuccess.action\" is-required=\"::true\" on-select-callback=\"onSuccessActionSelect(constant)\"></ap-constant-selector></ap-detail><ap-detail detail-class=\"empty-border\" pad-vertically=\"false\" ng-if=\"action.action.attribute.onSuccess.action.value === \'popup\' || action.action.attribute.onSuccess.action.value === \'popupAndNavigate\'\"><ap-edited-input mode=\"::edit\" model=\"action.action.attribute.onSuccess.attribute1\" edited-name=\"onSuccessPopupText\" is-required=\"::true\" edited-placeholder=\"message displayed in popup\" elimination-options=\"::{disabled:true}\"></ap-edited-input></ap-detail><ap-detail detail-class=\"empty-border\" pad-vertically=\"false\" ng-if=\"action.action.attribute.onSuccess.action.value === \'navigateToPage\' || action.action.attribute.onSuccess.action.value === \'popupAndNavigate\'\"><ap-constant-selector constants=\"pageNames\" hide-value=\"true\" chosen-constant=\"action.action.attribute.onSuccess.attribute2\" constant-placeholder=\"target page\" is-required=\"::true\" edited-name=\"onSuccessPageName\"></ap-constant-selector></ap-detail><ap-detail title=\"onFailure\" detail-class=\"empty-border\" pad-vertically=\"false\"><ap-constant-selector constants=\"onServiceFailureActions\" hide-value=\"true\" chosen-constant=\"action.action.attribute.onFailure.action\" is-required=\"::true\" on-select-callback=\"onFailureActionSelect(constant)\"></ap-constant-selector></ap-detail><ap-detail detail-class=\"empty-border\" pad-vertically=\"false\" ng-if=\"action.action.attribute.onFailure.action.value === \'popup\' || action.action.attribute.onFailure.action.value === \'popupAndNavigate\'\"><ap-edited-input mode=\"::edit\" model=\"action.action.attribute.onFailure.attribute1\" edited-name=\"onFailurePopupText\" is-required=\"::true\" edited-placeholder=\"message displayed in popup\" elimination-options=\"::{disabled:true}\"></ap-edited-input></ap-detail><ap-detail detail-class=\"empty-border\" pad-vertically=\"false\" ng-if=\"action.action.attribute.onFailure.action.value === \'navigateToPage\' || action.action.attribute.onFailure.action.value === \'popupAndNavigate\'\"><ap-constant-selector constants=\"pageNames\" hide-value=\"true\" chosen-constant=\"action.action.attribute.onFailure.attribute2\" constant-placeholder=\"target page\" is-required=\"::true\" edited-name=\"onFailurePageName\"></ap-constant-selector></ap-detail></div><ap-detail title=\"Page name\" ng-if=\"action.action.type.value === \'navigateToPage\'\" detail-class=\"empty-border\" pad-vertically=\"false\"><ap-constant-selector constants=\"pageNames\" hide-value=\"true\" chosen-constant=\"action.action.attribute.main\" is-required=\"::true\" edited-name=\"navigateToPageName\" on-select-callback=\"handleHandlerAction(constant)\"></ap-constant-selector></ap-detail><ap-detail title=\"Function name\" ng-if=\"action.action.type.value === \'callFunction\'\" detail-class=\"empty-border\" pad-vertically=\"false\" ng-class=\"{\'has-error\' : appPageActionEditorForm.class.$invalid}\"><ap-edited-input mode=\"::edit\" model=\"action.action.attribute.main\" edited-name=\"functionName\" is-required=\"::true\" edited-placeholder=\"e.g. myFunction\" elimination-options=\"::{disabled:true}\"></ap-edited-input></ap-detail><ap-detail detail-class=\"empty-border\" pad-vertically=\"false\" ng-if=\"action.event.type.value === \'tableClick\' && action.action.type.value !== \'callFunction\'\"><i class=\"clip clip-notification\"></i> <i>pre</i>-action function will be generated in the javascript editor.</ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/app/views/visualizer/page/appPageActionsTable.html","<div ng-show=\"!(actions.length > 0)\"><strong>No actions.</strong></div><table ng-if=\"actions.length > 0\" class=\"table table-bordered table-striped\"><thead><tr><th class=\"center medium-column\"></th><th>Event</th><th>Element</th><th>Action Type</th><th>Action Attribute</th><th></th></tr></thead><tbody ui-sortable=\"::tableSortingOptions\" ng-model=\"actions\"><tr ng-repeat=\"action in actions\"><td class=\"clickable-column\"><i class=\"fa fa-arrows sorter\"></i></td><td>{{action.event.type.text}}</td><td><span ng-if=\"action.event.type.value === \'keyPress\'\">{{action.event.element | keyCode}}</span> <span ng-if=\"action.event.type.value === \'buttonClick\'\">Button \"{{action.event.element}}\"</span></td><td>{{action.action.type.text}}</td><td>{{action.action.attribute.main.text !== undefined ? action.action.attribute.main.text : action.action.attribute.main}}</td><td><a class=\"btn btn-sm action-button btn-blue\" ng-click=\"editCallback({index: $index})\" uib-tooltip=\"Edit\" tooltip-trigger tooltip-placement=\"bottom\"><i class=\"clip-pencil-3\"></i> </a><a class=\"btn btn-sm action-button btn-red\" ng-click=\"deleteCallback({index: $index})\" uib-tooltip=\"Delete\" tooltip-trigger tooltip-placement=\"bottom\"><i class=\"clip-remove\"></i></a></td></tr></tbody></table>");
$templateCache.put("app/modules/app/views/visualizer/page/appPageFieldsTable.html","<table ng-if=\"fields.length > 0\" class=\"table table-bordered table-striped\"><thead><tr><th class=\"center medium-column\"></th><th>Parameter</th><th class=\"center wide-column\">New Line</th><th>Label</th><th>Default Value</th><th>Data Type</th><th class=\"center wide-column\">Required</th><th class=\"center wide-column\"></th></tr></thead><tbody ui-sortable=\"tableSortingOptions\" ng-model=\"fields\"><tr ng-repeat=\"field in fields\"><td class=\"clickable-column\"><i class=\"fa fa-arrows sorter\"></i></td><td>{{::field.id.name}}</td><td><ap-checkbox model=\"field.newLine\" in-table=\"::true\" should-disable=\"::field.dataTypeInfo.dataType.value === \'map\'\"></ap-checkbox></td><td><input type=\"text\" class=\"form-control\" ng-model=\"field.paramLabel\" ng-disabled=\"::field.isDisabledInVisualizer\"></td><td><ap-data-type-value param=\"field\" should-disable=\"::field.isDisabledInVisualizer\"></ap-data-type-value></td><td><ap-data-type-selector model=\"field.dataTypeInfo.dataType\" context=\"all\" ng-if=\"::field.dataTypeInfo.dataType.value !== \'map\'\" on-select-callback=\"onDataTypeInfoSelect(field, dataType, systemProperties)\"></ap-data-type-selector><span ng-if=\"field.dataTypeInfo.dataType.value === \'map\'\" style=\"padding-left:15px\">Map</span></td><td><ap-checkbox model=\"field.required\" in-table=\"::true\" ng-if=\"::field.dataTypeInfo.dataType.value !== \'map\'\"></ap-checkbox><a class=\"btn btn-sm action-button btn-purple\" ng-click=\"editMapCallback({field: field})\" ng-if=\"::field.dataTypeInfo.dataType.value === \'map\'\" uib-tooltip=\"Edit\" tooltip-trigger tooltip-placement=\"bottom\"><i class=\"fa fa-cogs\"></i></a></td><td><a class=\"btn btn-sm action-button btn-red\" ng-click=\"deleteCallback({fieldName: field.id.name})\" uib-tooltip=\"Delete\" tooltip-trigger tooltip-placement=\"bottom\"><i class=\"clip-remove\"></i></a></td></tr></tbody></table><strong>{{fields.length}} fields.</strong>");
$templateCache.put("app/modules/app/views/visualizer/page/appPageNamesList.html","<list-form items=\"pages\" parent-form=\"::parentForm\" on-change=\"onChange\" on-edit=\"onEdit\" on-delete=\"onDelete\" on-blur=\"validateHtmlSuffix\" sortable=\"true\" class=\"list-form-frame\" template=\"nextItem\" validate=\"validateItem\"><ins>&vellip;&vellip;</ins><div><ng-form name=\"listItemForm_{{$index}}\" novalidate><span ng-init=\"attachToParentForm($index, this)\" class=\"input-icon\" ng-class=\"{\'has-error\': listItemForm_{{$index}}.pageName.$invalid }\"><input name=\"pageName\" ng-model=\"it.name\" ng-model-options=\"::{debounce: 150}\" special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" ng-trim=\"true\" page-name-validator pages=\"items\" current-page-index=\"$index\" required ng-blur=\"blur($index)\" placeholder=\"Enter page name\" id=\"form-field-14\" class=\"form-control\"> <i class=\"clip clip-new\" style=\"color: #C83A2A\" ng-if=\"it.ui_isNew!==true && !it.ui_ready\"></i> <i class=\"fa fa-check\" style=\"color: #5cb85c\" ng-if=\"it.ui_isNew!==true && it.ui_ready\"></i></span><div ng-messages=\"this[\'listItemForm_\' + $index].pageName.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Page name is required</div><div ng-message=\"name\">Page already exists!</div></div></ng-form></div><soft-button ng-click=\"edit($index)\"><i ng-show=\"listItemForm_{{$index}}.$valid\" class=\"fa fa-edit\"></i></soft-button><soft-button ng-click=\"remove($index)\">&times;</soft-button></list-form>");
$templateCache.put("app/modules/app/views/visualizer/page/appPageSelector.html","<ap-constant-selector title=\"Current page\" constants=\"pageNames\" hide-value=\"true\" chosen-constant=\"currentPageConstant\" is-required=\"::true\" on-select-callback=\"::onSelect(constant)\" should-disable=\"shouldDisable\"></ap-constant-selector>");
$templateCache.put("app/modules/app/views/visualizer/page/appPagesGrid.html","<ap-grid-editor-actions entities=\"pages\" additional-actions=\"::pageTableActions\" add-callback=\"addCallback()\" remove-callback=\"removePages\"></ap-grid-editor-actions><div class=\"container-fluid\"><div ng-if=\"pages.length === 0\"><br><strong>No pages.</strong></div><ap-paged-grid ng-if=\"pages.length > 0\" entities=\"pages\" table-actions=\"::tableActions\" column-defs=\"::columnDefs\" filtered-columns=\"::filteredColumns\" use-selection=\"::true\" enable-pagination=\"::false\" enable-sorting=\"::false\" enable-select-all=\"::true\" use-inline-actions=\"::true\"></ap-paged-grid></div>");
$templateCache.put("app/modules/app/views/visualizer/page/appPageTableFieldsTable.html","<table ng-if=\"fields.length > 0\" class=\"table table-bordered table-striped\"><thead><tr><th class=\"center medium-column\"></th><th>Parameter</th><th>Label</th><th ng-if=\"supportsTypes\">Data Type</th><th>Display Format</th><th class=\"center wide-column\"></th></tr></thead><tbody ui-sortable=\"tableSortingOptions\" ng-model=\"fields\"><tr ng-repeat=\"field in fields\"><td class=\"clickable-column\"><i class=\"fa fa-arrows sorter\"></i></td><td>{{::field.id.name}}</td><td><input type=\"text\" class=\"form-control\" ng-model=\"field.paramLabel\" ng-disabled=\"::field.isDisabledInVisualizer\"></td><td ng-if=\"supportsTypes\"><ap-data-type-selector model=\"field.dataTypeInfo.dataType\" context=\"table\" on-select-callback=\"onDataTypeInfoSelect(field, dataType, systemProperties)\"></ap-data-type-selector></td><td><input ng-if=\"field.dataTypeInfo.dataType.value === \'read only\'\" type=\"text\" class=\"form-control\" ng-model=\"field.dataTypeInfo.format\" ng-disabled=\"::field.isDisabledInVisualizer\"><ap-checkbox ng-if=\"field.dataTypeInfo.dataType.value === \'checkbox\'\" title=\"Editable\" model=\"field.dataTypeInfo.format\"></ap-checkbox></td><td><a class=\"btn btn-sm action-button btn-red\" ng-click=\"deleteCallback({fieldName: field.id.name})\" uib-tooltip=\"Delete\" tooltip-trigger tooltip-placement=\"bottom\"><i class=\"clip-remove\"></i></a></td></tr></tbody></table><strong>{{fields.length}} fields.</strong>");
$templateCache.put("app/modules/app/views/visualizer/page/appStaticLovList.html","<list-form items=\"values\" parent-form=\"::parentForm\" on-change=\"onChange\" sortable=\"true\" class=\"list-form-frame\" template=\"nextItem\" validate=\"validateItem\"><ins>&vellip;&vellip;</ins><div><ng-form name=\"listItemForm_{{$index}}\" novalidate><span ng-init=\"attachToParentForm($index, this)\" class=\"input-icon\" ng-class=\"{\'has-error\': listItemForm_{{$index}}.itemValue.$invalid }\"><input name=\"itemValue\" ng-model=\"it.name\" ng-model-options=\"::{debounce: 150}\" ng-trim=\"true\" required ng-blur=\"blur($index)\" placeholder=\"Enter value\" id=\"form-field-14\" class=\"form-control\" ap-uniqueness-validator items=\"items\" current-item-index=\"$index\"></span><div ng-messages=\"this[\'listItemForm_\' + $index].itemValue.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Value required</div><div ng-message=\"unique\">Value already exists!</div></div></ng-form></div><soft-button ng-click=\"remove($index)\">&times;</soft-button></list-form>");
$templateCache.put("app/modules/app/views/visualizer/service/appServicesGrid.html","<div ng-if=\"!(services.length > 0)\"><h5 class=\"entity-absence-indicator\">No services</h5></div><div ng-if=\"services.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"services\" table-actions=\"::tableActions\" column-defs=\"::columnDefs\" filtered-columns=\"::filteredColumns\" use-selection=\"::true\" compact-view=\"::false\" enable-pagination=\"::true\" enable-select-all=\"::true\" enable-filtering=\"::true\" enable-draggable=\"::false\" use-inline-actions=\"::false\"></ap-paged-grid></div>");
$templateCache.put("app/modules/integration/views/dialogs/mcsExportDialog.html","<form name=\"mcsExportDialogForm\" novalidate><md-dialog aria-label=\"MCS Export\" class=\"wide-dialog\"><ap-form-dialog title=\"MCS Export\" save-label=\"Export\" save-callback=\"onConfirm()\" save-allowed=\"mcsExportDialogForm.$valid\"><ap-details><ap-detail title=\"API name\" detail-class=\"empty-border\" ng-class=\"{\'has-error\': mcsExportDialogForm.apiName.$invalid}\"><input type=\"text\" ng-model=\"api.name\" class=\"form-control input-medium\" placeholder=\"Identifies the API in MCS\" name=\"apiName\" ng-model-options=\"::{debounce: 150}\" special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" required ng-trim=\"true\"><div class=\"field-error\" ng-messages=\"mcsExportDialogForm.apiName.$error\" role=\"alert\"><div ng-message=\"required\">Name required</div></div></ap-detail><ap-detail title=\"API version\" detail-class=\"empty-border\" ng-class=\"{\'has-error\': mcsExportDialogForm.apiVersion.$invalid}\"><input type=\"text\" pattern=\"[0-9]+\\.[0-9]+\" ng-model=\"api.version\" class=\"form-control input-medium\" placeholder=\"e.g. 1.0\" name=\"apiVersion\" ng-model-options=\"::{debounce: 150}\" special-char-eliminator=\"::{}\" required ng-trim=\"true\"><div class=\"field-error\" ng-messages=\"mcsExportDialogForm.apiVersion.$error\" role=\"alert\"><div ng-message=\"required\">Version required</div><div ng-message=\"pattern\">Format mismatch: <i>number.number</i></div></div></ap-detail><ap-detail title=\"Connector\" detail-class=\"empty-border\" ng-class=\"{\'has-error\': mcsExportDialogForm.connector.$invalid}\"><input type=\"text\" ng-model=\"api.connector\" class=\"form-control input-medium\" placeholder=\"MCS Connector to your ServiceManager\" name=\"apiConnector\" ng-model-options=\"::{debounce: 150}\" special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" required ng-trim=\"true\"><div class=\"field-error\" ng-messages=\"mcsExportDialogForm.apiConnector.$error\" role=\"alert\"><div ng-message=\"required\">Connector required</div></div></ap-detail><ap-detail title=\"Connector version\" detail-class=\"empty-border\" ng-class=\"{\'has-error\': mcsExportDialogForm.connectorVersion.$invalid}\"><input type=\"text\" pattern=\"[0-9]+\\.[0-9]+\" ng-model=\"api.connectorVersion\" class=\"form-control input-medium\" placeholder=\"e.g. 1.0\" name=\"connectorVersion\" ng-model-options=\"::{debounce: 150}\" special-char-eliminator=\"::{}\" required ng-trim=\"true\"><div class=\"field-error\" ng-messages=\"mcsExportDialogForm.connectorVersion.$error\" role=\"alert\"><div ng-message=\"required\">Version required</div><div ng-message=\"pattern\">Format mismatch: <i>number.number</i></div></div></ap-detail><ap-detail detail-class=\"empty-border\"><i class=\"clip clip-notification\"></i> A user guide for integrating on MCS is availabe at our <a href=\"http://support.auraplayer.com\" target=\"_blank\">Support site</a>.</ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/integration/views/dialogs/mcsResponseStructureDialog.html","<form name=\"mcsResponseStructureForm\" novalidate><md-dialog aria-label=\"Service Options\" class=\"wide-dialog\"><ap-form-dialog title=\"Response structure\" footer-visible=\"::false\" save-callback=\"onConfirm()\" save-allowed=\"mcsResponseStructureForm.$valid\"><div id=\"responseTree\" class=\"treeview\" data-role=\"treeview\" initial-selection=\"{{::initialSelection}}\" propagate-checks=\"false\" style=\"height: 300px\"><ul><li data-mode=\"checkbox\" class=\"node\"><span class=\"leaf\">success</span></li><li data-mode=\"checkbox\" class=\"node\"><span class=\"leaf\">Response</span> <span class=\"node-toggle\"></span><ul><li data-mode=\"checkbox\" class=\"leaf\"><span class=\"leaf\">serviceSuccess</span></li><li data-mode=\"checkbox\" class=\"node\"><span class=\"leaf\">serviceTableArray</span> <span class=\"node-toggle\"></span><ul><li data-mode=\"checkbox\" class=\"leaf\"><span class=\"leaf\">serviceArrayItem</span></li></ul></li><li data-mode=\"checkbox\" class=\"node\"><span class=\"leaf\">serviceElements</span> <span class=\"node-toggle\"></span><ul><li data-mode=\"checkbox\" class=\"leaf\"><span class=\"leaf\">(serviceElements contents)</span></li></ul></li><li data-mode=\"checkbox\" class=\"node\"><span class=\"leaf\">serviceMessage</span> <span class=\"node-toggle\"></span><ul><li data-mode=\"checkbox\" class=\"leaf\"><span class=\"leaf\">(serviceMessage contents)</span></li></ul></li></ul></li></ul></div><div class=\"panel-footer\" style=\"padding-left: 0\"><div class=\"col-lg-8\" style=\"padding-left: 0\"><div class=\"col-lg-3\">MAX compatibility:{{maxCompatible}}</div><div class=\"col-lg-6 col-lg-push-1\"><md-switch title=\"{{maxCompatibility.requiredStructure === undefined ? \'Method always compatible\' : \'\'}}\" ng-model=\"maxCompatibility.isCompatible\" id=\"isMaxCompatible\" ng-change=\"onMaxCompatibilityChange(model)\" ng-disabled=\"maxCompatibility.requiredStructure === undefined\" aria-label=\"switch\" class=\"md-raised md-primary narrow-switch\"><h5>{{maxCompatibility.isCompatible? \'Yes\' : \'Custom\'}}</h5></md-switch></div></div><div class=\"pull-right dialog-actions\"><button ng-click=\"onConfirm()\" class=\"btn btn-primary\">Confirm</button> <button ng-click=\"onCancel()\" class=\"btn btn-default\">Cancel</button></div></div></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/integration/views/dialogs/vbcsExportDialog.html","<form name=\"vbcsExportDialogForm\" novalidate><md-dialog aria-label=\"VBCS Export\" class=\"wide-dialog\"><ap-form-dialog title=\"VBCS Export\" save-label=\"Export\" save-callback=\"onConfirm()\" save-allowed=\"vbcsExportDialogForm.$valid\"><ap-details><ap-detail title=\"Title\" detail-class=\"empty-border\" ng-class=\"{\'has-error\': vbcsExportDialogForm.apiName.$invalid}\"><input type=\"text\" ng-model=\"api.name\" class=\"form-control input-medium\" name=\"title\" ng-model-options=\"::{debounce: 150}\" special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" required ng-trim=\"true\"><div class=\"field-error\" ng-messages=\"vbcsExportDialogForm.title.$error\" role=\"alert\"><div ng-message=\"required\">Title required</div></div></ap-detail><ap-detail title=\"Version\" detail-class=\"empty-border\" ng-class=\"{\'has-error\': vbcsExportDialogForm.apiVersion.$invalid}\"><input type=\"text\" pattern=\"[0-9]+\\.[0-9]+\\.[0-9]+\" ng-model=\"api.version\" class=\"form-control input-medium\" placeholder=\"e.g. 1.0.0\" name=\"apiVersion\" ng-model-options=\"::{debounce: 150}\" special-char-eliminator=\"::{}\" required ng-trim=\"true\"><div class=\"field-error\" ng-messages=\"vbcsExportDialogForm.apiVersion.$error\" role=\"alert\"><div ng-message=\"required\">Version required</div><div ng-message=\"pattern\">Format mismatch: <i>number.number.number</i></div></div></ap-detail></ap-details></ap-form-dialog></md-dialog></form>");
$templateCache.put("app/modules/integration/views/managers/integrationManager.html","<div class=\"container-fluid\"><ap-header main-title=\"Integration Manager\" sub-title=\"Connections to external providers\" context=\"management\"></ap-header><md-tabs md-dynamic-height=\"true\" md-selected=\"tabs.selectedIndex\"><md-tab id=\"processTab\"><md-tab-label>Processes</md-tab-label><md-tab-body><md-content ng-if=\"tabs.selectedIndex === 0\" class=\"md-padding overflowed-content\"><div class=\"row details-page\"><ap-collapsing-panel data-title=\"Multi-step processes\"><process-manager processes=\"::processes\"></process-manager></ap-collapsing-panel></div></md-content></md-tab-body></md-tab><md-tab id=\"mcsTab\"><md-tab-label>MCS</md-tab-label><md-tab-body><md-content ng-if=\"tabs.selectedIndex === 1\" class=\"md-padding overflowed-content\"><div class=\"row details-page\"><ap-collapsing-panel data-title=\"Oracle MCS resources\"><mcs-manager resources=\"::mcsResources\"></mcs-manager></ap-collapsing-panel></div></md-content></md-tab-body></md-tab><md-tab id=\"vbcsTab\"><md-tab-label>VBCS</md-tab-label><md-tab-body><md-content ng-if=\"tabs.selectedIndex === 2\" class=\"md-padding overflowed-content\"><div class=\"row details-page\"><ap-collapsing-panel data-title=\"VBCS\"><vbcs-manager resources=\"::vbcsResources\"></vbcs-manager></ap-collapsing-panel></div></md-content></md-tab-body></md-tab></md-tabs></div>");
$templateCache.put("app/modules/integration/views/managers/mcsGrid.html","<div ng-if=\"!(resources.length > 0)\"><br><h5 class=\"entity-absence-indicator\">No MCS resources</h5></div><div ng-if=\"resources.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"resources\" column-defs=\"::columnDefs\" filtered-columns=\"::filteredColumns\" clearselection=\"::true\"></ap-paged-grid></div>");
$templateCache.put("app/modules/integration/views/managers/mcsManager.html","<div class=\"container-fluid\"><a href=\"\" ng-click=\"createMcsResource()\" class=\"btn btn-primary btn-success\" check-permission uib-tooltip=\"New resource\" tooltip-trigger tooltip-placement=\"bottom\"><span class=\"glyphicon glyphicon-plus\"></span></a><ap-group-action actions=\"::mcsGroupActions\" entities=\"resources\"></ap-group-action></div><mcs-grid resources=\"resources\" system-properties=\"::systemProperties\"></mcs-grid>");
$templateCache.put("app/modules/integration/views/managers/processGrid.html","<div ng-if=\"!(entities.length > 0)\"><br><h5 class=\"entity-absence-indicator\">No processes</h5></div><div ng-if=\"entities.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"entities\" column-defs=\"::columnDefs\" filtered-columns=\"::filteredColumns\" clearselection=\"::true\"></ap-paged-grid></div>");
$templateCache.put("app/modules/integration/views/managers/processManager.html","<div class=\"container-fluid\"><a href=\"\" ng-click=\"createProcess()\" class=\"btn btn-primary btn-success\" check-permission uib-tooltip=\"New process\" tooltip-trigger tooltip-placement=\"bottom\"><span class=\"glyphicon glyphicon-plus\"></span></a><ap-group-action actions=\"::groupActions\" entities=\"processes\"></ap-group-action></div><process-grid entities=\"processes\" loading-indicator=\"::loadingIndicator\" system-properties=\"::systemProperties\"></process-grid>");
$templateCache.put("app/modules/integration/views/managers/processStepsGrid.html","<div ng-if=\"!(steps.length > 0)\"><h5 class=\"entity-absence-indicator\">No steps</h5></div><div ng-if=\"steps.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"steps\" column-defs=\"::columnDefs\" use-selection=\"::true\" enable-pagination=\"::false\" enable-select-all=\"::true\" enable-draggable=\"::true\" use-inline-actions=\"::false\"></ap-paged-grid></div>");
$templateCache.put("app/modules/integration/views/managers/vbcsGrid.html","<div ng-if=\"!(resources.length > 0)\"><br><h5 class=\"entity-absence-indicator\">No VBCS resources</h5></div><div ng-if=\"resources.length > 0\" class=\"container-fluid\"><ap-paged-grid entities=\"resources\" column-defs=\"::columnDefs\" filtered-columns=\"::filteredColumns\" clearselection=\"::true\"></ap-paged-grid></div>");
$templateCache.put("app/modules/integration/views/managers/vbcsManager.html","<div class=\"container-fluid\"><a href=\"\" ng-click=\"createVbcsResource()\" class=\"btn btn-primary btn-success\" check-permission uib-tooltip=\"New resource\" tooltip-trigger tooltip-placement=\"bottom\"><span class=\"glyphicon glyphicon-plus\"></span></a><ap-group-action actions=\"::groupActions\" entities=\"resources\"></ap-group-action></div><vbcs-grid resources=\"resources\" system-properties=\"::systemProperties\"></vbcs-grid>");
$templateCache.put("app/modules/integration/views/editors/mcsNameEditor.html","<ng-form name=\"resourceNameInputForm\" novalidate><div ng-if=\"::(mode.new || mode.duplicate)\" ng-class=\"{\'has-error\': resourceNameInputForm.resourceName.$invalid }\"><input type=\"text\" class=\"form-control input-medium\" placeholder=\"Resource name input\" ng-model=\"resource.name\" name=\"resourceName\" ng-model-options=\"::{debounce: 150}\" required mcs-name-validator=\"{{::!shouldDisable}}\" special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" ng-trim=\"true\" focus-me=\"::true\"></div><div ng-messages=\"resourceNameInputForm.resourceName.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Resource name required.</div><div ng-message=\"name\">Name already exists.</div></div><div ng-if=\"::((mode.edit && !mode.new && !mode.duplicate) || mode.details)\">{{resource.name}}</div></ng-form>");
$templateCache.put("app/modules/integration/views/editors/processNameEditor.html","<ng-form name=\"processNameInputForm\" novalidate><div ng-if=\"::(mode.new || mode.duplicate)\" ng-class=\"{\'has-error\': processNameInputForm.processName.$invalid }\"><input type=\"text\" class=\"form-control input-medium\" ng-model=\"process.name\" name=\"processName\" ng-model-options=\"::{debounce: 150}\" required process-name-validator=\"{{::!shouldDisable}}\" special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" ng-trim=\"true\" focus-me=\"::true\"></div><div ng-messages=\"processNameInputForm.processName.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Process name required.</div><div ng-message=\"name\">Name already exists.</div></div><div ng-if=\"::((mode.edit && !mode.new && !mode.duplicate) || mode.details)\">{{process.name}}</div></ng-form>");
$templateCache.put("app/modules/integration/views/editors/vbcsEditor.html","<ap-loader indicator=\"::loadingIndicator\"></ap-loader><ng-form name=\"vbcsForm\" novalidate><div class=\"container-fluid\"><div class=\"row\"><ap-breadcrumbs crumbs=\"::crumbs\"></ap-breadcrumbs></div><div class=\"row\"><ap-header mode=\"::mode\" context=\"entity\" loading-indicator=\"loadingIndicator\"><a check-permission ng-href=\"#/serviceTester/{{::resource.name}}\" class=\"btn btn-sm btn-primary\">Edit</a></ap-header></div><div class=\"row details-page\"><ap-collapsing-panel data-title=\"VBCS Details\"><ap-details><ap-detail title=\"VBCS / Service Name\" detail-class=\"empty-border\">{{resource.name}}</ap-detail></ap-details></ap-collapsing-panel><ap-collapsing-panel data-title=\"Response\" should-collapse=\"::true\"><ap-editor mode=\"{{::responseEditorHolder.mode}}\" edited=\"responseEditorHolder.value\" editor-reference-holder=\"::responseEditorHolder\" should-disable=\"::true\"></ap-editor></ap-collapsing-panel></div><div class=\"row\"><ap-header mode=\"::mode\" context=\"entity\" loading-indicator=\"loadingIndicator\"><a check-permission ng-href=\"#/serviceTester/{{::resource.name}}\" class=\"btn btn-sm btn-primary\">Edit</a></ap-header></div></div></ng-form>");
$templateCache.put("app/modules/integration/views/wizard/mcsMethods.html","<div class=\"methods-frame\"><table class=\"methods-table\"><tr ng-repeat=\"method in methods\"><td class=\"methods-status-column\"><span ng-hide=\"!isEnabled[method.value]\" ng-bind-html=\"method.icon | trusted\"></span></td><td class=\"methods-names-column\">{{method.text}}</td><td class=\"methods-sliders-column\"><md-switch ng-model=\"isEnabled[method.value]\" ng-change=\"_onChange(model, \'{{model}}\')\" aria-label=\"switch\" class=\"md-raised md-primary narrow-switch\"><h5>{{isEnabled[method.value]? \'Enabled\' : \'Disabled\'}}</h5></md-switch></td><td class=\"methods-description-column\">{{resource.name !== undefined ? method.getDescription(resource.name) : \'\'}}</td><td class=\"methods-actions-column\"><soft-button ng-hide=\"disableButtons || !isEnabled[method.value]\" ng-click=\"onEdit(method)\"><i class=\"fa fa-edit\"></i></soft-button></td></tr></table></div>");
$templateCache.put("app/modules/integration/views/wizard/mcsMethodSelector.html","<ap-constant-selector title=\"Current method\" constants=\"methodConstants\" hide-value=\"true\" chosen-constant=\"resource._metadata.currentMethodConstant\" is-required=\"::true\" on-select-callback=\"::onSelect(constant)\" should-disable=\"shouldDisable\"></ap-constant-selector>");
$templateCache.put("app/modules/integration/views/wizard/mcsWizard.html","<div class=\"container-fluid\"><form name=\"mcsWizardForm\" novalidate><div class=\"container-fluid\"><ap-breadcrumbs crumbs=\"::mcsWizardCrumbs\"></ap-breadcrumbs><ap-header main-title=\"MCS Exporter\"></ap-header></div><div class=\"row\"><ng-form id=\"wizardForm\" name=\"wizardForm\" novalidate><wizard name=\"mcsWizard\" on-finish=\"submit()\"><ap-smart-step data-title=\"Methods\" description=\"Exposed HTTP methods\" navigation=\"{next:false}\"><mcs-wizard-step-1 resource=\"resource\" mode=\"::mode\" ng-if=\"step === 0\"></mcs-wizard-step-1></ap-smart-step><ap-smart-step data-title=\"Method Editor\" description=\"Connect method to service\" navigation=\"{next: false}\"><mcs-wizard-step-2 resource=\"resource\" all-resources=\"::allResources\" ng-if=\"step === 1\"></mcs-wizard-step-2></ap-smart-step><ap-smart-step data-title=\"Confirm\" navigation=\"{next: false}\"><mcs-wizard-step-3 resource=\"resource\" loading-indicator=\"loadingIndicator\" ng-if=\"step === 2\"></mcs-wizard-step-3></ap-smart-step></wizard></ng-form></div></form></div>");
$templateCache.put("app/modules/integration/views/wizard/mcsWizardStep1.html","<ap-step-navigation next-allowed=\"mcsWizardStep1Form.$invalid\" navigation=\"{back: false}\" on-next=\"::onNext\"></ap-step-navigation><ng-form name=\"mcsWizardStep1Form\" novalidate><ap-details><ap-detail data-title=\"Resource name\" detail-class=\"empty-border\"><mcs-name-editor mode=\"::mode\" resource=\"resource\"></mcs-name-editor></ap-detail><ap-detail title=\"Parent\"><ap-constant-selector constants=\"resource._metadata.parentConstants\" hide-value=\"true\" edited-name=\"parentResource\" chosen-constant=\"resource.parent\"></ap-constant-selector><ap-detail detail-class=\"empty-border\" ng-if=\"resource.parent.value !== \'none\'\"><i class=\"clip clip-notification\"></i> Make sure that parent resource defines GET {id} method!</ap-detail></ap-detail><ap-detail data-title=\"Methods\"><mcs-methods resource=\"resource\" on-edit=\"onMethodEdit\" on-change=\"onMethodChange\" disable-buttons=\"mcsWizardStep1Form.resourceNameInputForm.$invalid\"></mcs-methods><ap-length-validator name=\"resourceMethods\" ng-model=\"resource.methods\"></ap-length-validator><div ng-messages=\"mcsWizardStep1Form.resourceMethods.$error\" class=\"container-fluid field-error\" role=\"alert\"><div ng-message=\"empty\">At least one method must be enabled.</div></div></ap-detail></ap-details></ng-form>");
$templateCache.put("app/modules/integration/views/wizard/mcsWizardStep2.html","<ap-step-navigation on-next=\"::onNext\" navigation=\"{back: true}\" next-allowed=\"mcsWizardStep2Form.$invalid || !hasResponse\"><mcs-method-selector resource=\"resource\" on-select-callback=\"::onMethodSelect(constant)\" class=\"col-lg-push-2 col-lg-4\"></mcs-method-selector></ap-step-navigation><ng-form name=\"mcsWizardStep2Form\" novalidate><ap-collapsing-panel data-title=\"Definition\"><ap-details><ap-detail title=\"Method\" detail-class=\"empty-border\"><p style=\"font-weight: bold\">{{::resource._metadata.currentMethodConstant.text}} &emsp; <span ng-bind-html=\"colorParams(resolveUrl()) | trusted\"></span></p><p>({{::resource._metadata.currentMethodConstant.getDescription(resource.name)}})</p></ap-detail><ap-detail title=\"Service\"><ap-constant-selector constants=\"resource._metadata.serviceConstants\" hide-value=\"true\" edited-name=\"serviceName\" chosen-constant=\"editedMethod.service\" is-required=\"::true\" on-select-callback=\"onServiceSelect(constant)\" search-enabled=\"::true\"></ap-constant-selector></ap-detail><ap-detail title=\"Request Id\" ng-if=\"::resource._metadata.currentMethodConstant.requiresId\"><ap-constant-selector constants=\"serviceInputParamConstants\" hide-value=\"true\" edited-name=\"identifier\" chosen-constant=\"editedMethod.idField\" is-required=\"::true\"></ap-constant-selector></ap-detail></ap-details></ap-collapsing-panel><ap-collapsing-panel data-title=\"Request example\" should-collapse=\"editedMethod.service !== undefined\"><ap-details><ap-detail title=\"Schema name\" detail-class=\"empty-border\" ng-class=\"{\'has-error\': mcsWizardStep2Form.requestSchemaName.$invalid }\"><input type=\"text\" class=\"form-control input-medium\" placeholder=\"Request schema name\" ng-model=\"editedMethod.request.schemaName\" name=\"requestSchemaName\" ng-model-options=\"::{debounce: 150}\" required special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" ng-trim=\"true\"></ap-detail></ap-details><ap-editor mode=\"json\" edited=\"editedMethod.request.example\" editor-height=\"150\" editor-theme=\"dawn\"></ap-editor><div class=\"action-row pull-right\" ng-hide=\"loadingIndicator.isLoading\"><button ng-disabled=\"editedMethod.service === undefined\" ng-click=\"getResponse()\" title=\"Execute service to acquire response\" class=\"btn btn-sm btn-primary\">Get response</button></div></ap-collapsing-panel><ap-collapsing-panel data-title=\"Response example\" should-collapse=\"editedMethod.service !== undefined && (loadingIndicator.isLoading || hasResponse)\"><ap-details ng-hide=\"loadingIndicator.isLoading\"><ap-detail title=\"Schema name\" detail-class=\"empty-border\" ng-class=\"{\'has-error\': mcsWizardStep2Form.responseSchemaName.$invalid }\"><input type=\"text\" class=\"col-lg-9 input-medium\" placeholder=\"Response schema name\" ng-model=\"editedMethod.response.schemaName\" name=\"responseSchemaName\" ng-model-options=\"::{debounce: 150}\" required special-char-eliminator=\"::{eliminateLeadingNumbers:true}\" ng-trim=\"true\"><div class=\"pull-right\" ng-hide=\"loadingIndicator.isLoading\"><span id=\"mcs-max-compatibility-indicator\" class=\"col-lg-pull-3\"><span ng-if=\"maxCompatibility.isCompatible\" class=\"blue-text\">MAX compatible</span> <span ng-if=\"!maxCompatibility.isCompatible\" class=\"bordeaux-text\">Custom structure</span> </span><button ng-disabled=\"!hasResponse\" ng-click=\"editResponse()\" title=\"Edit response sent to MCS\" class=\"btn btn-sm btn-primary\">Edit response</button></div></ap-detail></ap-details><ap-loader indicator=\"loadingIndicator\" is-full-screen=\"false\"></ap-loader><ap-editor ng-hide=\"loadingIndicator.isLoading\" should-disable=\"::true\" mode=\"json\" edited=\"editedMethod.response.example\" editor-height=\"300\" editor-theme=\"dawn\"></ap-editor></ap-collapsing-panel></ng-form>");
$templateCache.put("app/modules/integration/views/wizard/mcsWizardStep3.html","<ap-step-navigation confirm-button=\"Save resource\" navigation=\"{back: true}\" on-back=\"::onBack\"></ap-step-navigation><ap-loader indicator=\"loadingIndicator\"></ap-loader>");
$templateCache.put("app/modules/integration/views/wizard/processCondition.html","<ap-details><ap-detail title=\"Command\"><ap-constant-selector constants=\"::processConditions\" chosen-constant=\"process._currentService.conditionType\" hide-value=\"::true\" edited-classes=\"process-condition-combo\"></ap-constant-selector></ap-detail><span ng-show=\"process._currentService.conditionType.value !== \'ELSE\'\"><span ng-show=\"process._isConditionBuilderOpen\"><ap-detail title=\"Argument 1\" should-paint-background=\"true\"><input type=\"text\" ng-model=\"process._condition.argument1\" placeholder=\"(Enter or select JavaScript value)\" class=\"inline input-sm process-condition-input\"> <button ng-click=\"openFieldsDialog(\'argument1\')\" title=\"Set to parameter\" class=\"btn btn-xs btn-link\"><i class=\"clip clip-list\"></i></button></ap-detail><ap-detail title=\"Operator\" should-paint-background=\"true\"><ap-constant-selector constants=\"::processConditionOperators\" chosen-constant=\"process._condition.operator\" hide-value=\"::true\" edited-classes=\"process-condition-combo inline\"></ap-constant-selector><ap-checkbox ng-if=\"process._condition.operator.caseInsensitiveTemplate !== undefined\" ng-init=\"process._condition.caseInsensitive = false\" title=\"Case insensitive\" model=\"process._condition.caseInsensitive\" style=\"margin:0 0 0 50px; color: DimGray\"></ap-checkbox><br></ap-detail><ap-detail title=\"Argument 2\" should-paint-background=\"true\" ng-show=\"process._condition.operator.hasArg2\"><input type=\"text\" ng-model=\"process._condition.argument2\" placeholder=\"(Enter or select JavaScript value)\" class=\"inline input-sm process-condition-input\"> <button ng-click=\"openFieldsDialog(\'argument2\')\" title=\"Set to parameter\" class=\"btn btn-xs btn-link\"><i class=\"clip clip-list\"></i></button></ap-detail></span><ap-detail title=\"JS Condition\" ng-show=\"!process._isConditionBuilderOpen\"><ap-editor mode=\"javascript\" edited=\"process._currentService.command\" editor-height=\"60\" ap-context-menu=\"jsContextMenu\" editor-reference-holder=\"::editorHolder\"></ap-editor></ap-detail><ap-detail should-paint-background=\"true\"><button ng-click=\"toggleJsCondition()\" class=\"btn btn-sm\" ng-class=\"{\'btn-teal\': process._isConditionBuilderOpen}\">{{process._isConditionBuilderOpen ? \'Generate &amp; Validate\' : \'Condition builder\'}}</button></ap-detail></span></ap-details>");
$templateCache.put("app/modules/integration/views/wizard/processThrowError.html","<ap-details><ap-detail title=\"Thrown Type\"><md-switch ng-model=\"process._currentService.isJavaScript\" ng-change=\"_onEditorModeChange(model, \'{{model}}\')\" aria-label=\"switch\" class=\"md-raised md-primary narrow-switch\"><h5>{{process._currentService.isJavaScript ? \'JavaScript\' : \'Text\'}}</h5></md-switch></ap-detail><ap-detail title=\"Thrown Expression\"><b style=\"color: #0b64ac\">Throw ({{process._currentService.isJavaScript ? \"\" : \"\'\"}}</b><ap-editor edited=\"process._currentService.command\" editor-height=\"60\" ap-context-menu=\"jsContextMenu\" editor-reference-holder=\"::editorHolder\"></ap-editor><b style=\"color: #0b64ac\">{{process._currentService.isJavaScript ? \"\" : \"\'\"}});</b></ap-detail></ap-details>");
$templateCache.put("app/modules/integration/views/wizard/processWizard.html","<div class=\"container-fluid\"><form name=\"processWizardForm\" novalidate><div class=\"container-fluid\"><ap-breadcrumbs crumbs=\"::crumbs\"></ap-breadcrumbs><ap-header main-title=\"Process wizard\"></ap-header></div><div class=\"row\"><ng-form id=\"wizardForm\" name=\"wizardForm\" novalidate><wizard name=\"processWizard\" on-finish=\"submit()\"><ap-smart-step data-title=\"General\" description=\"Details & services\" navigation=\"{next:false}\"><process-wizard-step-1 process=\"process\" services=\"::services\" mode=\"::mode\" system-properties=\"::systemProperties\" ng-if=\"step === 0\"></process-wizard-step-1></ap-smart-step><ap-smart-step data-title=\"Step configurion\" description=\"Part A: Input\" navigation=\"{next:false}\"><process-wizard-step-2 process=\"process\" ng-if=\"step === 1\"></process-wizard-step-2></ap-smart-step><ap-smart-step data-title=\"Step configurion\" description=\"Part B: Output\" navigation=\"{next:false}\"><process-wizard-step-3 process=\"process\" ng-if=\"step === 2\"></process-wizard-step-3></ap-smart-step><ap-smart-step data-title=\"Process API\" description=\"Input & Output\" navigation=\"{next:false}\"><process-wizard-step-4 process=\"process\" ng-if=\"step === 3\"></process-wizard-step-4></ap-smart-step><ap-smart-step data-title=\"Confirm\" navigation=\"{next: false}\"><process-wizard-step-5 process=\"process\" loading-indicator=\"loadingIndicator\" ng-if=\"step === 4\"></process-wizard-step-5></ap-smart-step></wizard></ng-form></div></form></div>");
$templateCache.put("app/modules/integration/views/wizard/processWizardStep1.html","<ap-step-navigation on-next=\"::onNext\" next-allowed=\"processWizardStep1Form.$invalid\"></ap-step-navigation><ng-form name=\"processWizardStep1Form\" novalidate><ap-collapsing-panel data-title=\"Process Details\"><ap-details><ap-detail title=\"Process Name\" detail-class=\"empty-border\"><process-name-editor mode=\"::mode\" process=\"process\"></process-name-editor></ap-detail><ap-detail title=\"Description\"><input type=\"text\" ng-model=\"process.description\" class=\"form-control input-sm\" placeholder=\"description\"></ap-detail></ap-details></ap-collapsing-panel><ap-collapsing-panel data-title=\"Steps\" bindable-collapse=\"collapseManager.collapseServices\"><div class=\"row\"><div class=\"dropdown\" style=\"display:inline-block; margin-left:15px\"><a href=\"javascript:void(0)\" data-toggle=\"dropdown\" class=\"btn btn-primary btn-success\"><span class=\"glyphicon glyphicon-plus\"></span> <b class=\"caret\"></b></a><ul class=\"dropdown-menu\"><li><a href=\"javascript:void(0)\" ng-click=\"addService()\">Service</a></li><li class=\"divider narrow-divider\"></li><li><a href=\"javascript:void(0)\" ng-click=\"addCondition()\">Condition</a></li><li class=\"divider narrow-divider\"></li><li><a href=\"javascript:void(0)\" ng-click=\"addThrowError()\">Throw Error</a></li></ul></div><ap-group-action actions=\"processServicesActions\" entities=\"process.services\" use-single-callback=\"::true\"></ap-group-action><process-steps-grid steps=\"process.services\" allow-partial=\"::allowPartial\" actions=\"::stepActions\"></process-steps-grid><ap-length-validator name=\"processServices\" ng-model=\"process.services\"></ap-length-validator><div ng-messages=\"processWizardStep1Form.processServices.$error\" class=\"container-fluid field-error\" role=\"alert\"><div ng-message=\"empty\"><br>At least one step must be added.</div></div><div ng-if=\"process.services.length > 0\"><i class=\"clip clip-notification\" style=\"padding-left: 1em\"></i> Drag &amp; drop steps to reorder.</div></div></ap-collapsing-panel></ng-form>");
$templateCache.put("app/modules/integration/views/wizard/processWizardStep2.html","<ap-step-navigation navigation=\"{back: true}\" on-next=\"::onNext\" next-allowed=\"editedParam !== undefined\"></ap-step-navigation><ap-collapsing-panel ng-if=\"::process._currentService.type === \'Condition\'\" data-title=\"Condition\" shouldcollapse=\"::false\"><process-condition process=\"process\" editor-holder=\"::conditionEditorHolder\" generate-condition=\"generateCondition()\"></process-condition></ap-collapsing-panel><ap-collapsing-panel ng-if=\"::process._currentService.type === \'Service\'\" data-title=\"Input of {{::process._currentService.name}}\" ng-show=\"editedParam === undefined\" shouldcollapse=\"::false\"><table id=\"processWizardStep2Table\" resizeable mode=\"::\'BasicResizer\'\" class=\"table table-striped table-bordered table-hover\" ng-if=\"process._currentService.inputParams.length > 0 || newParam !== undefined\"><thead><tr><th class=\"center narrow-column\">Visible</th><th>Name</th><th ng-if=\"::process._currentService.type !== \'JS\'\">Label</th><th>Default Value</th></tr></thead><tbody><tr ng-repeat=\"inputParam in process._currentService.inputParams\"><td class=\"center narrow-column\"><ap-checkbox model=\"inputParam.visible\" should-disable=\"::true\" in-table=\"::true\"></ap-checkbox></td><td>{{::inputParam.id.name}}</td><td ng-if=\"::process._currentService.type !== \'JS\'\">{{::inputParam.paramLabel}}</td><td><input type=\"text\" ng-model=\"inputParam.paramValue\" class=\"inline input-sm\" style=\"width: 75%\"> <button ng-click=\"toggleEditor(inputParam)\" title=\"Edit as JavaScript\" class=\"btn btn-xs btn-link\" style=\"margin-left:0.2em\">{}</button> <button ng-click=\"openFieldsDialog(inputParam)\" title=\"Set to parameter\" class=\"btn btn-xs btn-link\"><i class=\"clip clip-list\"></i></button></td></tr><tr ng-if=\"newParam !== undefined\"><td><ap-checkbox model=\"newParam.visible\" in-table=\"::true\"></ap-checkbox></td><td><div ng-class=\"{\'has-error\': newParamForm.paramName.$invalid}\"><input type=\"text\" class=\"form-control input-sm\" placeholder=\"name\" required ng-model=\"newParam.id.name\" name=\"paramName\" ng-model-options=\"::{debounce: 200}\" entity-uniqueness-validator collection=\"process._currentService.inputParams\"></div><div ng-messages=\"newParamForm.paramName.$error\" class=\"field-error\" role=\"alert\"><div ng-message=\"required\">Parameter name is required</div><div ng-message=\"name\">Parameter already exists!</div></div></td><td><ap-edited-input mode=\"::mode\" model=\"newParam.paramLabel\" edited-placeholder=\"label\" model-debounce=\"::{debounce : 200}\" elimination-options=\"::{disabled:true}\"></ap-edited-input></td><td><a ng-click=\"saveInlineParam()\" ng-disabled=\"newParamForm.paramName.$invalid\" class=\"btn btn-sm btn-green\"><i class=\"fa fa-save\"></i> </a><a ng-click=\"cancelInlineParam()\" class=\"btn btn-sm btn-red\"><i class=\"clip clip-remove\"></i></a></td></tr></tbody></table><div ng-if=\"::process._currentService.type === \'JS\'\" class=\"row details-page action-row\"><span ng-if=\"newParam === undefined\" style=\"padding-left: 12px\"><a ng-click=\"openInlineInputParamEditor()\" class=\"btn btn-sm btn-green tooltips\" data-original-title=\"add\"><i class=\"clip-plus-circle\"></i></a></span></div></ap-collapsing-panel><ap-collapsing-panel data-title=\"Edit input value\" ng-if=\"editedParam !== undefined\" shouldcollapse=\"::false\"><div><b>{{process._currentService.name}}.<span style=\"color: #0b64ac\">{{editedParam.id.name}}</span> =</b> {{editedParam.isJavaScript ? \'(function() {\' : \'\'}} <button title=\"Cancel\" ng-click=\"cancelEditor()\" class=\"btn btn-link btn-red pull-right\"><i class=\"clip clip-redo\"></i></button> <button title=\"Save\" ng-click=\"toggleEditor()\" class=\"btn btn-link btn-green pull-right\" style=\"margin-right:0.1em\"><i class=\"fa fa-save\"></i></button><md-switch ng-model=\"editedParam.isJavaScript\" ng-change=\"_onEditorModeChange(model, \'{{model}}\')\" style=\"margin-right:0.1em\" aria-label=\"switch\" class=\"md-raised md-primary narrow-switch pull-right\"></md-switch><h5 class=\"pull-right\" style=\"margin-right:0.1em\">{{editedParam.isJavaScript ? \'JavaScript\' : \'Text\'}}</h5></div><br><ap-editor mode=\"javascript\" edited=\"editedParam.paramValue\" ap-context-menu=\"jsContextMenu\" editor-reference-holder=\"::editorHolder\"></ap-editor>{{editedParam.isJavaScript ? \'})();\' : \'\'}}<br><i class=\"clip clip-notification\" style=\"padding-left: 2em\"></i> Right click in editor to open <i style=\"color: #0b64ac\">Auto Complete</i> suggestions.</ap-collapsing-panel>");
$templateCache.put("app/modules/integration/views/wizard/processWizardStep3.html","<ap-step-navigation navigation=\"{back: true}\" on-back=\"::onBack\" on-next=\"::onNext\"></ap-step-navigation><ap-collapsing-panel ng-if=\"::process._currentService.type === \'ThrowError\'\" data-title=\"Throw Error\" shouldcollapse=\"::false\"><process-throw-error process=\"process\" editor-holder=\"::errorEditorHolder\"></process-throw-error></ap-collapsing-panel>");
$templateCache.put("app/modules/integration/views/wizard/processWizardStep4.html","<ap-step-navigation navigation=\"{back: true}\" on-back=\"::onBack\"></ap-step-navigation><ap-collapsing-panel data-title=\"Process Input\" shouldcollapse=\"::false\"><table id=\"processApiInputTable\" resizeable mode=\"::\'BasicResizer\'\" class=\"table table-striped table-bordered table-hover\"><thead><tr><th class=\"center narrow-column\">Visible</th><th>Service</th><th>Name</th><th>Default Value</th></tr></thead><tbody><tr ng-repeat=\"inputEntry in process._allInput\"><td class=\"center narrow-column\"><ap-checkbox model=\"inputEntry.visible\" in-table=\"::true\"></ap-checkbox></td><td>{{::inputEntry.service}}</td><td>{{::inputEntry.name}}</td><td>{{::inputEntry.paramValue}}</td></tr></tbody></table></ap-collapsing-panel><ap-collapsing-panel data-title=\"Process Output\" shouldcollapse=\"::false\"><table id=\"processApiOutputTable\" resizeable mode=\"::\'BasicResizer\'\" class=\"table table-striped table-bordered table-hover\"><thead><tr><th class=\"center narrow-column\">Visible</th><th>Service</th><th>Name</th><th class=\"center medium-column\">Multi Record</th></tr></thead><tbody><tr ng-repeat=\"outputEntry in process._allOutput\"><td class=\"center narrow-column\"><ap-checkbox model=\"outputEntry.visible\" in-table=\"::true\"></ap-checkbox></td><td>{{::outputEntry.service}}</td><td>{{::outputEntry.name}}</td><td class=\"center narrow-column\"><ap-checkbox model=\"outputEntry.inTable\" should-disable=\"::true\" in-table=\"::true\"></ap-checkbox></td></tr></tbody></table></ap-collapsing-panel>");
$templateCache.put("app/modules/integration/views/wizard/processWizardStep5.html","<ap-step-navigation confirm-button=\"Create process\" navigation=\"{back: true}\" on-next=\"::onNext\" next-allowed=\"processWizardStep5Form.$invalid && !process.service.overwrite\"></ap-step-navigation><ap-loader indicator=\"loadingIndicator\"></ap-loader><ng-form name=\"processWizardStep5Form\" novalidate><ap-collapsing-panel data-title=\"Generated service\"><ap-details><ap-detail title=\"Service name\" detail-class=\"empty-border\"><service-name-editor mode=\"::{new:true}\" service=\"process.service\"></service-name-editor><ap-checkbox title=\"Overwrite\" model=\"process.service.overwrite\" ng-show=\"processWizardStep5Form.$invalid\" style=\"color: DimGray\"></ap-checkbox></ap-detail></ap-details></ap-collapsing-panel></ng-form>");
$templateCache.put("app/modules/admin/views/dialogs/resetDialog.html","<md-dialog aria-label=\"Database Reset\"><ap-form-dialog title=\"Database Reset\" save-label=\"OK\" save-class=\"btn-danger\" save-callback=\"onConfirm()\" cancel-callback=\"onCancel()\" warning-dialog=\"::true\"><div class=\"panel-body\">All your data will be erased!<br><br><ap-checkbox title=\"Create backup\" model=\"options.createBackup\"></ap-checkbox><br></div></ap-form-dialog></md-dialog>");
$templateCache.put("app/modules/admin/views/managers/statisticsGrid.html","<div ng-if=\"!(statistics.services.length > 0)\"><h5 class=\"entity-absence-indicator\">No statistics available since the services list is empty.</h5></div><div ng-if=\"statistics.services.length > 0\" class=\"container-fluid statistics-grid\"><ap-paged-grid entities=\"statistics.services\" column-defs=\"::columnDefs\" filtered-columns=\"::filteredColumns\" use-selection=\"::false\" enable-pagination=\"::true\" enable-select-all=\"::false\" enable-filtering=\"::true\" enable-draggable=\"::false\" use-inline-actions=\"::false\"></ap-paged-grid></div>");}]);
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin', [
    'ap.serviceManager.core'
]);
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin')
    .directive('apStatisticsGrid', statisticsGridDirective);

function statisticsGridDirective() {
    return {
        restrict: 'E',
        scope: {
        	statistics: '=',
        	clickCallback: '&'
        },
        templateUrl: 'app/modules/admin/views/managers/statisticsGrid.html',
        controller: 'StatisticsGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager', [
    'ap.serviceManager.core',
    'ap.serviceManager.service',
    'ap.serviceManager.templates',
    'ap.serviceManager.visualize',
    'ap.serviceManager.auraTester',
    'ap.serviceManager.page',
    'ap.serviceManager.app',
    'ap.serviceManager.integration',
    'ap.serviceManager.admin'
]);
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service('StatisticsManager', statisticsManagerService);

function statisticsManagerService(HttpHandler, EntityManager) {
    var self = this;

    activate();

    function activate() {
        self.statisticsManagerConfig = {
            getUrl: '/Macro/Statistics',
            getServiceExecutionLogs: '/Macro/ExecutionLog/',
            executionLogResetUrl: '/Macro/ExecutionLogDownload'
        };
    }
    
    this.getStatistics = function () {
        return HttpHandler.getAndResolve(self.statisticsManagerConfig.getUrl);
    };
    
    this.getExecutionLogs = function (serviceName) {
    	return EntityManager.getAll({
            type: 'Service Execution Log',
            getAllUrl: self.statisticsManagerConfig.getServiceExecutionLogs + serviceName,
            silentLoad: true
        });
    };
    
    this.resetExecutionLog = function (loadingIndicator) {
    	return EntityManager.handleHttpRequest({
            executionLog: 'Resetting execution log...',
            httpHandlerFunction: HttpHandler.delete,
            httpHandlerUrl: self.statisticsManagerConfig.executionLogResetUrl,
            loadingIndicator: loadingIndicator,
            entityConfig: self.statisticsManagerConfig,
            logTitle: 'Reset Execution Log',
            expectedErrorLog: 'Could not reset execution log',
            unexpectedErrorLog: 'Something went wrong while resetting your execution log :(',
            successLog: 'Execution Log reset!'
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service('AdminManager', adminManagerService);

function adminManagerService($window, $http, FileDownloader, HttpHandler, System, FileUploader, EntityManager,
							 ServiceCacheManager, DialogManager, LoginManager) {
    var self = this;

    activate();

    function activate() {
        self.adminManagerConfig = {
            systemInfoUrl: '/Macro/SystemInfo',
            isAdminUrl: '/Macro/isAdmin',
            backupUrl: '/Macro/Backup',
            dailyBackupUrl: '/Macro/DailyBackup',
            restoreUrl: '/Macro/Restore',
            resetUrl: '/Macro/Reset',
            syncUrl: '/Macro/Sync',
            uploadLicenseUrl: '/Macro/LicenseUpload',
            listFormsUrl: '/Macro/Forms?forms=true&htmls=false&dbs=false',
            updateDefaultValuesUrl: '/Macro/Services/Params',
            replaceServiceUrl: '/Macro/ServiceReplace/',
            sessionsUrl: '/Macro/Sessions',
            deleteSessionUrl: '/Macro/Sessions/',
            versionsUrl: '/Macro/Version'
        };
    }

    this.getSystemInfo = function () {
        return HttpHandler.getAndResolve(self.adminManagerConfig.systemInfoUrl);
    };

    this.isAdmin = function () {
        return HttpHandler.getAndResolve(self.adminManagerConfig.isAdminUrl);
    };

    this.backupSystem = function (loadingIndicator) {
        return FileDownloader.download({
            executionLog: 'Backing up system...',
            httpHandlerUrl: self.adminManagerConfig.backupUrl,
            loadingIndicator: loadingIndicator,
            entityConfig: self.adminManagerConfig,
            logTitle: 'System Backup',
            expectedErrorLog: 'Could not backup your system.',
            unexpectedErrorLog: 'Something went wrong while backing up your system :(',
            successLog: 'Backup successful!'
        });
    };

    this.getDailyBackups = function () {
        return HttpHandler.getAndResolve(self.adminManagerConfig.dailyBackupUrl)
            .then(function (dailyBackupResponse) {
                return _.map(dailyBackupResponse, function (dailyBackupFile) {
                    var dailyBackupFileParts = dailyBackupFile.split('.');
                    return {
                        name: dailyBackupFile,
                        displayName: dailyBackupFileParts[0]
                    };
                });
            });
    };

    this.restoreDailyBackup = function (backupFileName, loadingIndicator) {
        ServiceCacheManager.clear();

        return EntityManager.handleHttpRequest({
            executionLog: 'Restoring daily backup ' + backupFileName + ' ...',
            httpHandlerFunction: HttpHandler.post,
            httpHandlerUrl: self.adminManagerConfig.dailyBackupUrl + '/' + backupFileName,
            loadingIndicator: loadingIndicator,
            entityConfig: self.adminManagerConfig,
            logTitle: 'Daily Backup Restore ',
            expectedErrorLog: 'Could not restore from this backup.',
            unexpectedErrorLog: 'Something went wrong while restoring :(',
            successLog: 'Restore completed successfully !'
        });
    };

    this.restoreSystem = function (backupFile, loadingIndicator) {
        ServiceCacheManager.clear();

        return FileUploader.upload({
            type: 'restoration file',
            uploadUrl: self.adminManagerConfig.restoreUrl,
            file: backupFile,
            loadingIndicator: loadingIndicator,
            loadingText: 'Restoring data from ' + backupFile.name + '...',
            actionTitle: 'System Restore',
            expectedErrorLog: 'Could not restore from ' + backupFile.name,
            unexpectedErrorLog: 'Something went wrong during restore :(',
            successLog: 'Successfully restored from ' + backupFile.name + '!'
        });
    };

    this.reset = function (loadingIndicator) {
        return EntityManager.handleHttpRequest({
            executionLog: 'Resetting database...',
            httpHandlerFunction: HttpHandler.delete,
            httpHandlerUrl: self.adminManagerConfig.resetUrl,
            loadingIndicator: loadingIndicator,
            entityConfig: self.adminManagerConfig,
            logTitle: 'Reset',
            expectedErrorLog: 'Could not reset database',
            unexpectedErrorLog: 'Something went wrong while resetting your database :(',
            successLog: 'Database successfully reset!'
        });
    };

    this.sync = function (loadingIndicator) {
        return EntityManager.handleHttpRequest({
            executionLog: 'Syncing database...',
            httpHandlerFunction: HttpHandler.post,
            httpHandlerUrl: self.adminManagerConfig.syncUrl,
            loadingIndicator: loadingIndicator,
            entityConfig: self.adminManagerConfig,
            logTitle: 'Sync',
            expectedErrorLog: 'Could not sync database',
            unexpectedErrorLog: 'Something went wrong while syncing your database :(',
            successLog: 'Database successfully synced!'
        });
    };

    this.updateLicense = function (licenseFile, loadingIndicator) {
        return FileUploader.upload({
            type: 'license',
            uploadUrl: self.adminManagerConfig.uploadLicenseUrl,
            file: licenseFile,
            loadingIndicator: loadingIndicator,
            loadingText: 'updating license from ' + licenseFile.name + '...',
            actionTitle: 'License upload',
            expectedErrorLog: 'could not update license from ' + licenseFile.name,
            successLog: licenseFile.name + ' uploaded.'
        });
    };
    
    this.listFormUrls = function () {
		return $http.get(System.baseUrl + self.adminManagerConfig.listFormsUrl);
	};
	
	this.updateDefaultValues = function (paramName, newValue) {
		return HttpHandler.post(self.adminManagerConfig.updateDefaultValuesUrl, {
			action: 'SET_DEFAULT_VALUE',
			paramName: paramName,
			newValue: newValue
		});
	};
	
	this.replaceService = function (service1, service2, service1NewName) {
		return HttpHandler.patch(self.adminManagerConfig.replaceServiceUrl + service1 + '/' + service2 + '/' + service1NewName);
	};
    
    this.getSessions = function () {
        return HttpHandler.getAndResolve(self.adminManagerConfig.sessionsUrl);
    };
    
    this.killSession = function (sessionId, loadingIndicator) {
    	return EntityManager.handleHttpRequest({
            executionLog: 'Killing session ' + sessionId + '...',
            httpHandlerFunction: HttpHandler.delete,
            httpHandlerUrl: self.adminManagerConfig.deleteSessionUrl + sessionId,
            loadingIndicator: loadingIndicator,
            entityConfig: self.adminManagerConfig,
            logTitle: 'Kill session',
            expectedErrorLog: 'Could not kill session',
            unexpectedErrorLog: 'Something went wrong while killing session :(',
            successLog: 'Session ' + sessionId + ' terminated.'
        });
    };
    
    this.getVersions = function () {
    	return HttpHandler.getAndResolve(self.adminManagerConfig.versionsUrl);
    };
    
    this.askUserRestart = function (reason) {
    	DialogManager.openInfoDialog({
            title: 'Restart required',
            description: reason,
            onCloseCallback: function () {
            	LoginManager.logout();
            	$window.location.reload();
            }
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin')
    .controller('StatisticsGridCtrl', statisticsGridCtrl)
    .filter('filter2DecimalPlaces', filter2DecimalPlaces);

function statisticsGridCtrl($scope, uiGridConstants) {
    activate();
    
    function activate() {
    	initStatisticsFunctions();
        initColumnDefs();
        initColumnFilter();
    }

    function initStatisticsFunctions() {
        $scope.statistics.services.forEach(function (serviceStatistics) {
        	serviceStatistics.onClick = function(service) {
        		$scope.clickCallback({serviceName: service.name, type: service.type});
        	};
        });
    }
    
    function initColumnDefs() {
        $scope.columnDefs = [
            {
                name: 'name',
                displayName: 'Service Name',
                enableColumnMenu: false,
                enableFiltering: false,
                width: '20%',
                cellTemplate: "<a class='aura-grid-column' ng-click='row.entity.onClick(row.entity)'>{{COL_FIELD}}</a>"
            },
            { 	
            	name: 'type', 
            	field: 'type',
            	width: '8%',
            	filter: { selectOptions: [{ value: 'forms', label: 'Forms' },
  	                                      { value: 'html', label: 'HTML' },
  	                                      { value: 'db', label: 'DB' },
  	                                      { value: 'js', label: 'JS' }],
  	                      type: uiGridConstants.filter.SELECT },
  	            cellTemplate: "<div>{{row.entity.type !== undefined ? row.entity.type : '(Deleted)'}}</div>"
  			},
  			{
                name: 'callsPerDay',
                displayName: 'Calls/Day',
                enableFiltering: false,
                width: '8%',
                cellTemplate: "<div>{{row.entity.callsPerDay !== -1 ? ''+row.entity.callsPerDay.toFixed(2) : 'N/A'}}</div>"
            },
            {
                name: 'callsTotal',
                displayName: 'Calls Total',
                enableFiltering: false,
                width: '8%'
            },
            {
                name: 'failures',
                displayName: 'Failures',
                enableFiltering: false,
                width: '8%'
            },
            {
                name: 'minResponseTime',
                cellFilter: 'filter2DecimalPlaces',
                displayName: 'Min Response Time (Sec)',
                enableFiltering: false,
                width: '16%'
            },
            {
                name: 'avgResponseTime',
                cellFilter: 'filter2DecimalPlaces',
                displayName: 'Avg Response Time (Sec)',
                enableFiltering: false,
                width: '16%'
            },
            {
                name: 'maxResponseTime',
                cellFilter: 'filter2DecimalPlaces',
                displayName: 'Max Response Time',
                enableFiltering: false,
                width: '16%'
            }
		];
    }
    
    function initColumnFilter() {
        $scope.filteredColumns = ['name'];
    }
}

function filter2DecimalPlaces() {
	return function (value) {
		return value.toFixed(2);
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin')
    .controller('ResetDialogCtrl', resetDialogCtrl);

function resetDialogCtrl($scope, $mdDialog) {
	
	function activate() {
		$scope.options = {createBackup: true};
	}
	
    $scope.onConfirm = function () {
        $mdDialog.hide($scope.options.createBackup);
    };

    $scope.onCancel = function () {
        $mdDialog.cancel();
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration', [
    'ap.serviceManager.core'
]);
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('processWizardStep5', processWizardStep5Directive);

function processWizardStep5Directive() {
    return {
        restrict: 'E',
        scope: {
            process: '=',
            loadingIndicator: '='
        },
        templateUrl: 'app/modules/integration/views/wizard/processWizardStep5.html',
        controller: 'ProcessWizardStep5Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('processWizardStep4', processWizardStep4Directive);

function processWizardStep4Directive() {
    return {
        restrict: 'E',
        scope: {
            process: '=',
            systemProperties: '='
        },
        templateUrl: 'app/modules/integration/views/wizard/processWizardStep4.html',
        controller: 'ProcessWizardStep4Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('processWizardStep3', processWizardStep3Directive);

function processWizardStep3Directive() {
    return {
        restrict: 'E',
        scope: {
            process: '='
        },
        templateUrl: 'app/modules/integration/views/wizard/processWizardStep3.html',
        controller: 'ProcessWizardStep3Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('processWizardStep2', processWizardStep2Directive);

function processWizardStep2Directive() {
    return {
        restrict: 'E',
        scope: {
            process: '='
        },
        templateUrl: 'app/modules/integration/views/wizard/processWizardStep2.html',
        controller: 'ProcessWizardStep2Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('processWizardStep1', processWizardStep1Directive);

function processWizardStep1Directive() {
    return {
        restrict: 'E',
        scope: {
        	services: '=',
            process: '=',
            systemProperties: '=',
            mode: '='
        },
        templateUrl: 'app/modules/integration/views/wizard/processWizardStep1.html',
        controller: 'ProcessWizardStep1Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('processThrowError', processThrowErrorDirective);

function processThrowErrorDirective() {
    return {
        restrict: 'E',
        scope: {
        	process: '=',
        	editorHolder: '='
        },
        templateUrl: 'app/modules/integration/views/wizard/processThrowError.html',
        controller: 'ProcessThrowErrorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('processCondition', processConditionDirective);

function processConditionDirective() {
    return {
        restrict: 'E',
        scope: {
        	process: '=',
        	editorHolder: '=',
        	generateCondition: '&'
        },
        templateUrl: 'app/modules/integration/views/wizard/processCondition.html',
        controller: 'ProcessConditionCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('mcsWizardStep3', mcsWizardStep3Directive);

function mcsWizardStep3Directive() {
    return {
        restrict: 'E',
        scope: {
        	resource: '=',
        	loadingIndicator: '='
        },
        templateUrl: 'app/modules/integration/views/wizard/mcsWizardStep3.html',
        controller: 'McsWizardStep3Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('mcsWizardStep2', mcsWizardStep2Directive);

function mcsWizardStep2Directive() {
    return {
        restrict: 'E',
        scope: {
        	resource: '=',
        	allResources: '='
        },
        templateUrl: 'app/modules/integration/views/wizard/mcsWizardStep2.html',
        controller: 'McsWizardStep2Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('mcsWizardStep1', mcsWizardStep1Directive);

function mcsWizardStep1Directive() {
    return {
        restrict: 'E',
        scope: {
        	resource: '=',
        	mode: '='
        },
        templateUrl: 'app/modules/integration/views/wizard/mcsWizardStep1.html',
        controller: 'McsWizardStep1Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('mcsMethodSelector', mcsMethodSelectorDirective);

function mcsMethodSelectorDirective() {
    return {
        restrict: 'E',
        scope: {
        	resource: '=',
        	onSelectCallback: '&',
        	shouldDisable: '=?'
        },
        templateUrl: 'app/modules/integration/views/wizard/mcsMethodSelector.html',
        controller: 'McsMethodSelectorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('mcsMethods', mcsMethodsDirective);

function mcsMethodsDirective() {
    return {
        restrict: 'E',
        scope: {
        	resource: '=',
        	onEdit: '=',
        	onChange: '=',
        	disableButtons: '=?'
        },
        templateUrl: 'app/modules/integration/views/wizard/mcsMethods.html',
        controller: 'McsMethodsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('vbcsManager', vbcsManagerDirective);

function vbcsManagerDirective() {
    return {
        scope: {
        	resources: '='
        },
        templateUrl: 'app/modules/integration/views/managers/vbcsManager.html',
        controller: 'VbcsManagerCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('vbcsGrid', vbcsGridDirective);

function vbcsGridDirective() {
    return {
        restrict: 'E',
        scope: {
        	resources: '=',
        	systemProperties: '='
        },
        templateUrl: 'app/modules/integration/views/managers/vbcsGrid.html',
        controller: 'VbcsGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('processStepsGrid', processStepsGridDirective);

function processStepsGridDirective() {
    return {
        restrict: 'E',
        scope: {
            steps: '=',
            allowPartial: '=',
            actions: '='
        },
        templateUrl: 'app/modules/integration/views/managers/processStepsGrid.html',
        controller: 'ProcessStepsGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('processManager', processManagerDirective);

function processManagerDirective() {
    return {
        scope: {
        	processes: '='
        },
        templateUrl: 'app/modules/integration/views/managers/processManager.html',
        controller: 'ProcessManagerCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('processGrid', processGridDirective);

function processGridDirective() {
    return {
        restrict: 'E',
        scope: {
        	entities: '=',
        	systemProperties: '='
        },
        templateUrl: 'app/modules/integration/views/managers/processGrid.html',
        controller: 'ProcessGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('mcsManager', mcsManagerDirective);

function mcsManagerDirective() {
    return {
        scope: {
        	resources: '='
        },
        templateUrl: 'app/modules/integration/views/managers/mcsManager.html',
        controller: 'McsManagerCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('mcsGrid', mcsGridDirective);

function mcsGridDirective() {
    return {
        restrict: 'E',
        scope: {
        	resources: '=',
        	systemProperties: '='
        },
        templateUrl: 'app/modules/integration/views/managers/mcsGrid.html',
        controller: 'McsGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('processNameValidator', processNameValidator);

function processNameValidator(ProcessManager, $q) {
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$asyncValidators.name = function (modelValue) {
                return ProcessManager.exist(modelValue).then(function (isExists) {
                    return isExists ? $q.reject('Already exists!') : true;
                }, function () {
                    return true;
                });
            };
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('processNameEditor', processNameEditorDirective);

function processNameEditorDirective() {
    return {
        restrict: 'E',
        scope: {
        	mode: '=?',
            process: '=',
            shouldDisable: '=?'
        },
        templateUrl: 'app/modules/integration/views/editors/processNameEditor.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('mcsNameValidator', mcsNameValidator);

function mcsNameValidator(McsManager, $q) {
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$asyncValidators.name = function (modelValue) {
                return McsManager.exist(modelValue).then(function (mcsExists) {
                    return mcsExists ? $q.reject('Resource " +  mcs.name + " already exists!') : true;
                }, function () {
                    return true;
                });
            };
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .directive('mcsNameEditor', mcsNameEditorDirective);

function mcsNameEditorDirective() {
    return {
        restrict: 'E',
        scope: {
        	mode: '=?',
            resource: '=',
            shouldDisable: '=?'
        },
        templateUrl: 'app/modules/integration/views/editors/mcsNameEditor.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .service('VbcsManager', vbcsManagerService);

function vbcsManagerService($window, VbcsCacheManager, DataManager, CollectionUtils, ObjectUtils, EntityManager, System, SystemPropertyManager, Permissions) {
    var self = this;
    activate();

    function activate() {
        self.config = {
            type: 'Vbcs resource',
            getAllUrl: '/Macro/Vbcss',
            getUrl: '/Macro/Vbcs/',
            updateUrl: '/Macro/Vbcs',
            deleteUrl: '/Macro/Vbcs/',
            existUrl: '/Macro/Vbcs/',
            exportUrl: '/Macro/VbcsExport',
            backupUrl: '/Macro/Backup'
        };
    }
    
    this.get = function (id, isRequestingCompact) {
        return EntityManager.get(self.config, id);
    };

    this.getAll = function () {
        return EntityManager.getAll(self.config).then(afterGetAll);
    };

    function afterGetAll(resources) {
        DataManager.setIsLoading(false);
        return SystemPropertyManager.get(true).then(function (systemProperties) {
        	resources = Permissions.filterIfNecessary(resources, systemProperties);
            VbcsCacheManager.cacheVbcs(resources);
            return resources;
        });
    }
    
    this.update = function (resource, loadingIndicator) {
        return EntityManager.update(self.config, resource, loadingIndicator)
            .then(function (updateResourceResponse) {
                VbcsCacheManager.cacheVbcs(resource);
                return updateResourceResponse;
            });
    };
    
    this.delete = function (vbcsName, loadingIndicator, overrideConfig) {
        return EntityManager.delete(ObjectUtils.override(self.config, overrideConfig), vbcsName, loadingIndicator).then(function () {
            VbcsCacheManager.removeVbcs(vbcsName);
        });
    };

    this.exist = function (vbcsName, loadingIndicator) {
        return EntityManager.exist(self.config, vbcsName, loadingIndicator);
    };

    this.export = function (integration) {
        var encoded = encodeURIComponent(JSON.stringify(integration));
        $window.open(System.baseUrl + self.config.exportUrl + '?data=' + encoded, '_blank');
    };
    
    this.download = function (resources) {
        var encoded = encodeURIComponent(JSON.stringify({vbcss: resources}));
        $window.open(System.baseUrl + self.config.backupUrl +
            '?data=' + encoded, '_blank');
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .service('VbcsCacheManager', vbcsCacheManagerService);

function vbcsCacheManagerService(EntityCacheManager) {
    var CACHE_KEY = 'vbcss';

    this.cacheVbcs = function (vbcs) {
        EntityCacheManager.cacheEntity(CACHE_KEY, vbcs);
    };

    this.getVbcs = function (vbcsName) {
        return EntityCacheManager.getEntity(CACHE_KEY, vbcsName);
    };

    this.removeVbcs = function (vbcsName) {
        EntityCacheManager.removeEntity(CACHE_KEY, vbcsName);
    };

    this.cacheVbcss = function (vbcss) {
        EntityCacheManager.cacheEntities(CACHE_KEY, vbcss);
    };

    this.getVbcss = function (requestedVbcss) {
        return EntityCacheManager.getEntities(CACHE_KEY, requestedVbcss);
    };

    this.removeVbcss = function (vbcss) {
        EntityCacheManager.removeEntities(CACHE_KEY, vbcss);
    };

    this.clear = function () {
        EntityCacheManager.clear(CACHE_KEY);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .service('ProcessManager', processManagerService);

function processManagerService( $window, ProcessConverter, DataManager, System,
								ObjectUtils, EntityManager, SystemPropertyManager, Permissions) {
    var self = this;
    activate();

    function activate() {
        self.config = {
            type: 'Process',
            getAllUrl: '/Macro/Processes',
            getUrl: '/Macro/Process/',
            updateUrl: '/Macro/Process',
            deleteUrl: '/Macro/Process/',
            renameUrl: '/Macro/Process/',
            existUrl: '/Macro/Process/',
            backupUrl: '/Macro/Backup',
            toServerConverter: ProcessConverter.toServer
        };
    }
    
    this.get = function (id) {
        return EntityManager.get(self.config, id);
    };

    this.getAll = function () {
        return EntityManager.getAll(self.config).then(afterGetAll);
    };

    function afterGetAll(entities) {
        DataManager.setIsLoading(false);
        return SystemPropertyManager.get(true).then(function (systemProperties) {
        	entities = Permissions.filterIfNecessary(entities, systemProperties);
            return entities;
        });
    }
    
    this.update = function (entity, loadingIndicator) {
        return EntityManager.update(self.config, entity, loadingIndicator);
    };
    
    this.delete = function (id, loadingIndicator, overrideConfig) {
        return EntityManager.delete(ObjectUtils.override(self.config, overrideConfig), id, loadingIndicator);
    };

    this.exist = function (id, loadingIndicator) {
        return EntityManager.exist(self.config, id, loadingIndicator);
    };
    
    this.download = function (ids) {
        var encodedIds = encodeURIComponent(JSON.stringify({processes: ids}));
        $window.open(System.baseUrl + self.config.backupUrl +'?data=' + encodedIds, '_blank');
    };
    
    this.rename = function (currentId, newId, loadingIndicator) {
        return EntityManager.rename(self.config, currentId, newId, loadingIndicator);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .service('ProcessConverter', processConverterService);

function processConverterService(ProcessConditions, CollectionUtils) {
	var self = this;
	
	/** fromServer *********************/
	
	this.updateInputInAPI = function (process, service, inputParam, isVisible) {
		var $ = CollectionUtils.findByName(process._allInput, inputParam.id.name);
		if (angular.isDefined($)) {
			$.paramValue = inputParam.paramValue;
			$.service = service.name;
			return $;
		}
		
		$ = {
			visible: isVisible,
			service: service.name,
			name: inputParam.id.name,
			nameOrLabel: service.useLabelsAsKeys ? inputParam.paramLabel : inputParam.id.name,
			paramValue: inputParam.paramValue
		};
		process._allInput.push($);
		return $;
	};
	
	this.updateOutputInAPI = function (process, service, outputParam, isVisible) {
		var $ = CollectionUtils.findByName(process._allOutput, outputParam.id.name);
		if (angular.isDefined($)) {
			return $;
		}
		
		$ = {
			visible: isVisible,
			service: service.name,
			name: outputParam.id.name,
			nameOrLabel: service.useLabelsAsKeys ? outputParam.paramLabel : outputParam.id.name,
			inTable: outputParam.inTable
		};
		process._allOutput.push($);
		return $;
	};
	
	/**
	 * Replaces 'process.services' with full service details, and updates the 'paramValue' of each 'process.services.inputParams' to the value defined by process.
	 * Assumption: 'services' are in the same order as 'process.services'.
	 */
	this.fromServer = function (process, services) {
		for (var i = 0; i < process.services.length; i++) {
			if (services[i] == null) {
				if (process.services[i].type === 'Condition') {
					process.services[i].conditionType = ProcessConditions.getByValue(process.services[i].name);
				}
				process.services[i].name += ' (' + process.services[i].command + ')'; 
				continue;
			}
			
			var processService = process.services[i];
			process.services[i] = services[i];
			process.services[i].type = 'Service';
			process.services[i].keepAlive = processService.keepAlive;
			process._allInput = [];
			process._allOutput = [];
			
			// set processes' input values in the input parameters, and generate API input
			process.services[i].inputParams.forEach(function(inputParam) {
				if (inputParam.visible) {
					var input = CollectionUtils.findByName(processService.inputs, inputParam.id.name);
					if (angular.isDefined(input)) {	// if it is undefined, it will be created automatically when entering step4
						inputParam.isJavaScript = input.isJavaScript;
						inputParam.paramValue = input.paramValue;
						self.updateInputInAPI(process, services[i], inputParam, input.visible);
					}
				}
			});
			
			// generate API output
			process.services[i].outputParams.forEach(function(outputParam) {
				if (outputParam.visible) {
					var output = CollectionUtils.findByName(processService.outputs, outputParam.id.name);
					if (angular.isDefined(output)) {	// if it is undefined, it will be created automatically when entering step4
						self.updateOutputInAPI(process, services[i], outputParam, output.visible);
					}
				}
			});
		}
		return process;
	};
	
    /** toServer *********************/
	
	function toServerServices(process) {
		var $ = [];
		process.services.forEach(function(service) {
			var inputs = [];
			var outputs = [];
			
			if (service.type === 'Service') {
				// collect service's input visibility from allInput
				service.inputParams.forEach(function(inputParam) {
					if (inputParam.visible) {
						var input = CollectionUtils.findByName(process._allInput, inputParam.id.name);
						inputs.push({
							visible:		input.visible,
							isJavaScript:	inputParam.isJavaScript,
							name:			inputParam.id.name,
							paramValue:		inputParam.paramValue
						});
					}
				});
				
				// collect service's output visibility from allOutput
				service.outputParams.forEach(function(outputParam) {
					if (outputParam.visible) {
						var output = CollectionUtils.findByName(process._allOutput, outputParam.id.name);
						outputs.push({
							visible:		output.visible,
							name:			outputParam.id.name,
						});
					}
				});
			}
			
			$.push({
				type:			service.type,
				name: 			service.type === 'Service' ? service.name : service.name.substr(0, service.name.indexOf(' (')),
				command:		service.type !== 'Service' ? service.command : undefined,
				keepAlive:		service.keepAlive,
				isJavaScript:	service.isJavaScript,
				inputs:			inputs,
				outputs:		outputs
			});
		});
		
		return $;
	}
	
    this.toServer = function (process) {
    	var $ = {
    		name:			process.name,
    		serviceName:	process.service.name,
    		description:	process.description,
    		services:		toServerServices(process),
    		createdBy:		process.createdBy,
    	};
    	return $;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .service('ProcessContextMenu', processContextMenuService);

function processContextMenuService(ServiceConverter, FunctionUtils) {
    
	this.create = function () {
		return [];
	};
	
	function initEditorParamsContextMenu($, serviceName, params, isOutput, onContextParameterClick) {
    	var references = [];
    	params.forEach(function(param) {
			if (param.visible || (isOutput && ServiceConverter.isSpecialOutputParam(param))) {
				references.push([param.id.name, FunctionUtils.partial(onContextParameterClick, serviceName, param.id.name, isOutput)]);
			}
		});
		if (references.length > 0) {
			if ($.length > 0) {
				$.push(null);
			}
			$.push([serviceName, references]);
		}
    }
	
	this.appendParameterReferences = function (contextMenu, process, onContextParameterClick) {
		var inputs = [];
		var outputs = [];
		
		var i, service;
		for (i = 0; i < process._currentServiceIndex; i++) {
			service = process.services[i];
			if (service.type === 'Service') {
				initEditorParamsContextMenu(inputs, service.name, service.inputParams, false, onContextParameterClick);
				initEditorParamsContextMenu(outputs, service.name, service.outputParams, true, onContextParameterClick);
			}
		}
		for (i = process._currentServiceIndex; i < process.services.length; i++) {
			service = process.services[i];
			if (service.type === 'Service') {
				initEditorParamsContextMenu(inputs, service.name, service.inputParams, false, onContextParameterClick);
			}
		}
		
		contextMenu.push(['Refer input', inputs]);
		contextMenu.push(['Refer output', outputs]);
	};
	
	this.appendEntry = function (contextMenu, label, callbackFunction) {
		contextMenu.push([label, callbackFunction]);
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .service('McsResponseStructure', mcsResponseStructureService);

function mcsResponseStructureService() {
	var self = this;
    
	this.values = function() {
		return ["success","Response","serviceSuccess","serviceTableArray","serviceArrayItem","serviceElements","(serviceElements contents)","serviceMessage","(serviceMessage contents)"];
	};
	
	this.getMaxCompatibilityStructure = function(method) {
    	if (method !== 'getAll' && method !== 'get') {
    		return;
    	}
    	
    	if (method === 'getAll') {
    		return ["serviceArrayItem"];
    	} else if (method === 'get') {
    		return ["(serviceElements contents)"];
    	}
    };
	
	/**
	 * Extract the name of the service from a service's response.
	 */
	function extractService(response) {
		var responseKeys = Object.keys(response['Response']);
		responseKeys.sort();
		return responseKeys[0].replace('Elements', '');
	}
	
	/**
	 * Transform a response to match a structure.
	 */
    this.transform = function(_response, structure) {
    	var $ = {};
    	var response = angular.fromJson(_response);
    	var hook = $;
    	var service = extractService(response);
    	var key;
        
        if (structure.indexOf('success') !== -1) {
        	$['success'] = response['success'];
        }
        
        if (structure.indexOf('Response') !== -1) {
        	$['Response'] = {};
        	hook = $['Response'];
        }
        
        if (structure.indexOf('serviceSuccess') !== -1) {
           	key = service + 'Success';
           	hook[key] = response['Response'][key];
        }
        
        ['serviceElements', 'serviceMessage'].forEach(function(element) {
        	var innerHook = hook;
        	key = element.replace('service', '{0}').format(service);
        	if (structure.indexOf(element) !== -1) {
            	hook[key] = {};
            	innerHook = hook[key];
            }
        	if (structure.indexOf('({0} contents)'.format(element)) !== -1) {
        		Object.keys(response['Response'][key]).forEach(function(innerKey) {
        			innerHook[innerKey] = response['Response'][key][innerKey];
        		});
        	}
        });
        
        if (angular.isDefined(response['Response']['{0}TableArray'.format(service)])) {
        	if (structure.indexOf('serviceTableArray') !== -1) {
            	key = '{0}TableArray'.format(service);
            	hook[key] = {};
            	hook = hook[key];
            }
            
            if (structure.indexOf('serviceArrayItem') !== -1) {
            	key = '{0}ArrayItem'.format(service);
            	hook[key] = response['Response']['{0}TableArray'.format(service)][key];
            }
        }
        
        return $;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .service('McsManager', mcsManagerService);

function mcsManagerService($window, McsConverter, McsCacheManager, DataManager, CollectionUtils, ObjectUtils, EntityManager, System, SystemPropertyManager, Permissions) {
    var self = this;
    activate();

    function activate() {
        self.mcsManagerConfig = {
            type: 'Mcs resource',
            getAllUrl: '/Macro/Mcss',
            getUrl: '/Macro/Mcs/',
            updateUrl: '/Macro/Mcs',
            deleteUrl: '/Macro/Mcs/',
            renameUrl: '/Macro/Mcs/',
            existUrl: '/Macro/Mcs/',
            exportUrl: '/Macro/McsExport',
            backupUrl: '/Macro/Backup',
            fromServerConverter: McsConverter.fromServer,
            toServerConverter: McsConverter.toServer
        };
    }
    
    this.get = function (mcsId, isRequestingCompact) {
        return EntityManager.get(self.mcsManagerConfig, mcsId);
    };

    this.getAll = function () {
        return EntityManager.getAll(self.mcsManagerConfig).then(afterGetAll);
    };

    function afterGetAll(mcss) {
        DataManager.setIsLoading(false);
        return SystemPropertyManager.get(true).then(function (systemProperties) {
        	mcss = Permissions.filterIfNecessary(mcss, systemProperties);
            McsCacheManager.cacheMcss(mcss);
            return mcss;
        });
    }
    
    this.update = function (resource, loadingIndicator) {
        return EntityManager.update(self.mcsManagerConfig, resource, loadingIndicator)
            .then(function (updateResourceResponse) {
                McsCacheManager.cacheMcs(resource);
                return updateResourceResponse;
            });
    };
    
    this.delete = function (mcsName, loadingIndicator, overrideConfig) {
        return EntityManager.delete(ObjectUtils.override(self.mcsManagerConfig, overrideConfig),
        	mcsName, loadingIndicator).then(function () {
            McsCacheManager.removeMcs(mcsName);
        });
    };

    this.exist = function (mcsName, loadingIndicator) {
        return EntityManager.exist(self.mcsManagerConfig, mcsName, loadingIndicator);
    };

    this.export = function (integration) {
        var encodedMcss = encodeURIComponent(JSON.stringify(integration));
        $window.open(System.baseUrl + self.mcsManagerConfig.exportUrl +
            '?data=' + encodedMcss, '_blank');
    };
    
    this.download = function (mcss) {
        var encodedMcss = encodeURIComponent(JSON.stringify({mcss: mcss}));
        $window.open(System.baseUrl + self.mcsManagerConfig.backupUrl +
            '?data=' + encodedMcss, '_blank');
    };
    
    this.rename = function (currentMcsId, newMcsId, loadingIndicator) {
        return EntityManager.rename(self.mcsManagerConfig, currentMcsId, newMcsId, loadingIndicator);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .service('McsConverter', mcsConverterService);

function mcsConverterService(McsMethods) {

	/*********************************
     ** fromServer *******************
     *********************************/
	
	function fromServerMethods(methods) {
		var $ = {};
		methods.forEach(function(method){
			if (angular.isDefined(method.idField)) {
				method.idField = {value: method.idField, text: method.idField}; 
			}
			var methodConstant = McsMethods.getByValue(method.type);
			delete methodConstant.request;
			delete methodConstant.response;
			$[method.type] = angular.extend(method, methodConstant);
		});
	    return $;
	}
	
	this.fromServer = function (resource) {
		var $ = {
    		name:			resource.name,
    		parent:			resource.parent,
    		methods:		fromServerMethods(resource.methods),
    		createdBy:		resource.createdBy,
    		lastModified:	resource.lastModified
    	};
    	return $;
    };
	
    /*********************************
     ** toServer *********************
     *********************************/
    
	function toServerMethod(methodKey, method) {
		var $ = {
			type:				methodKey,
			service:			method.service.name,
			idField:			method.requiresId ? method.idField.value : undefined,
			request:			method.request,			//TODO schema probably should be removed
			response:			method.response,		//TODO schema probably should be removed
		};
		return $;
	}
	
	function toServerMethods(methods) {
		var $ = [];
		Object.keys(methods).forEach(function(methodKey){
			$.push(toServerMethod(methodKey, methods[methodKey]));
		});
		return $;
	}
	
    this.toServer = function (resource) {
    	var $ = {
    		name:			resource.name,
    		parent:			resource.parent.value !== 'none' ? resource.parent.value : undefined,
    		methods:		toServerMethods(resource.methods),
    		createdBy:		resource.createdBy
    	};
    	return $;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .service('McsCacheManager', mcsCacheManagerService);

function mcsCacheManagerService(EntityCacheManager) {
    var CACHE_KEY = 'mcss';

    this.cacheMcs = function (mcs) {
        EntityCacheManager.cacheEntity(CACHE_KEY, mcs);
    };

    this.getMcs = function (mcsName) {
        return EntityCacheManager.getEntity(CACHE_KEY, mcsName);
    };

    this.removeMcs = function (mcsName) {
        EntityCacheManager.removeEntity(CACHE_KEY, mcsName);
    };

    this.cacheMcss = function (mcss) {
        EntityCacheManager.cacheEntities(CACHE_KEY, mcss);
    };

    this.getMcss = function (requestedMcss) {
        return EntityCacheManager.getEntities(CACHE_KEY, requestedMcss);
    };

    this.removeMcss = function (mcss) {
        EntityCacheManager.removeEntities(CACHE_KEY, mcss);
    };

    this.clear = function () {
        EntityCacheManager.clear(CACHE_KEY);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('ProcessWizardStep5Ctrl', processWizardStep5Ctrl);

function processWizardStep5Ctrl($scope, WizardHandler, ObjectUtils) {
	
	function activate() {
		$scope.process.service = ObjectUtils.defaultValue($scope.process.service, {name: $scope.process.name, overwrite: false});
	}
	
	$scope.onNext = function() {
		if ($scope.process.service.overwrite && angular.isUndefined($scope.process.service.name)) {
			$scope.process.service.name = $scope.processWizardStep5Form.serviceNameForm.serviceName.$$rawModelValue;
		}
	};
	
	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('ProcessWizardStep4Ctrl', processWizardStep4Ctrl);

function processWizardStep4Ctrl($scope, ProcessConverter, WizardHandler) {
    
	function activate() {
		collectParameters();
	}
	
	function markAllUntouched() {
		$scope.process._allInput.forEach(function(input) {
			input.touched = false;
		});
		$scope.process._allOutput.forEach(function(output) {
			output.touched = false;
		});
	}
	
	function removeUntouched() {
		$scope.process._allInput = _.filter($scope.process._allInput, function (input) {
			return input.touched;
		});
		$scope.process._allOutput = _.filter($scope.process._allOutput, function (output) {
			return output.touched;
		});
	}
	
	function collectParameters() {
		if (angular.isUndefined($scope.process._allInput)) {
			$scope.process._allInput = [];
		}
		if (angular.isUndefined($scope.process._allOutput)) {
			$scope.process._allOutput = [];
		}
		
		markAllUntouched();
		
		$scope.process.services.forEach(function(service) {
			if (service.type === 'Service') {
				service.inputParams.forEach(function(inputParam) {
					if (inputParam.visible) {
						var input = ProcessConverter.updateInputInAPI($scope.process, service, inputParam, !inputParam.isJavaScript);
						input.touched = true;
					}
				});
				service.outputParams.forEach(function(outputParam) {
					if (outputParam.visible) {
						var output = ProcessConverter.updateOutputInAPI($scope.process, service, outputParam, true);
						output.touched = true;
					}
				});
			}
		});
		
		removeUntouched();
	}
	
	/*********************************
     ** Wizard ***********************
     *********************************/
	
    $scope.onBack = function() {
		WizardHandler.wizard('processWizard').goTo(0);
    	return true;
	};
	
	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('ProcessWizardStep3Ctrl', processWizardStep3Ctrl);

function processWizardStep3Ctrl($scope, ToastManager, WizardHandler) {

	function activate() {
		$scope.errorEditorHolder = {};
	}
	
	/*********************************
     ** Wizard ***********************
     *********************************/
	
    $scope.onBack = function() {
		WizardHandler.wizard('processWizard').goTo($scope.process._currentService.type === 'ThrowError' ? 0 : 1);
    	return true;
	};
	
    $scope.onNext = function () {
    	if ($scope.process._currentService.type === 'ThrowError') {
    		if (!$scope.errorEditorHolder.editor.$valid) {
    			ToastManager.showError('JavaScript Syntax Error', 'Throw Error');
    			return true;
    		}
    		$scope.process._currentService.name = 'THROW ERROR (' + $scope.process._currentService.command + ')';
    		ToastManager.showInfo('Throw Error', 'Step updated in process:');
    	}
    	if ($scope.process._currentServiceIndex === $scope.process.services.length) {
			$scope.process.services.push($scope.process._currentService);
		}
    	$scope.process._currentService = undefined;
    	
    	WizardHandler.wizard('processWizard').setCompleted(2);	//indices starting from 0
    	WizardHandler.wizard('processWizard').goTo(0);
    	return true;
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('ProcessWizardStep2Ctrl', processWizardStep2Ctrl);

function processWizardStep2Ctrl($scope, $timeout, ProcessContextMenu, JsServiceUtils, WizardHandler, ToastManager, CollectionUtils, ObjectUtils) {
	
	function activate() {
		ToastManager.showInfo($scope.process._currentService.name, 'Editing step:');
		if ($scope.process._currentService.type === 'Service') {
			$scope.editorHolder = {};
			initEditorContextMenu();
		}
		$scope.conditionEditorHolder = {};
		$scope.editedParam = undefined;
	}
	
	$scope.openFieldsDialog = function (inputParam) {
		JsServiceUtils.openFieldsDialog($scope.process.services, $scope.process._currentServiceIndex).then(function (selection) {
			inputParam.isJavaScript = true;
			inputParam.paramValue = selection.all[1] === 'Input parameters' ?
									JsServiceUtils.generateInputReference(selection.all[2]) :
									'return PROCESS.{0}.output["{1}"];'.format(selection.all[0], selection.all[2]);
        });
    };
    
    $scope._onEditorModeChange = function(newValue, oldValue) {
		$timeout(function () {
			var mode = $scope.editedParam.isJavaScript ? 'ace/mode/javascript' : undefined;
			var theme = $scope.editedParam.isJavaScript ? 'ace/theme/tomorrow_night_eighties' : 'ace/theme/chrome';
			$scope.editorHolder.editor.getSession().setMode(mode);
			$scope.editorHolder.editor.setTheme(theme);
        }, 100);	//we have to wait for the md-switch to be refreshed with the new value
	};
	
	$scope.toggleEditor = function (inputParam) {
		if (angular.isDefined(inputParam)) {
			// switching to editor
			$scope.editedOriginalValue = inputParam.paramValue;
		
		} else {								
			// switching to input table
			var returnStatement;
			if ($scope.editedParam.isJavaScript) {
				try {returnStatement = JsServiceUtils.extractReturnStatement($scope.editedParam.paramValue, /^RETURN /);} catch (e) {}
				if (angular.isUndefined(returnStatement)) {
					ToastManager.showError('Missing return statement.', 'JavaScript error');
					return;
				}
			}
		}
		$scope.editedParam = inputParam;
		
		if (angular.isDefined(inputParam)) {
			$scope._onEditorModeChange();
		}
	};
	
	$scope.cancelEditor = function () {
		$scope.editedParam.paramValue = $scope.editedOriginalValue;
		$scope.editedParam = undefined;
	};
	
	/*********************************
     ** JS context menu **************
     *********************************/
	
    function initEditorContextMenu() {
    	var contextMenu = ProcessContextMenu.create();
    	ProcessContextMenu.appendParameterReferences(contextMenu, $scope.process, onContextParameterClick);
    	ProcessContextMenu.appendEntry(contextMenu, 'Reset as Javascript', onResetAsJavascript);
    	ProcessContextMenu.appendEntry(contextMenu, 'Reset value', onResetClick);
		$scope.jsContextMenu = contextMenu;
	}
	
	function onContextParameterClick(serviceName, outputParamName, isOutput) {
		var editor = $scope.editorHolder.editor;
		var expression = isOutput ? 'PROCESS.{0}.output["{1}"]'.format(serviceName, outputParamName) :
						 JsServiceUtils.generateInputReference(outputParamName);
		editor.session.insert(editor.getCursorPosition(), expression);
		$scope.editedParam.isJavaScript = true;
		$scope._onEditorModeChange();
		editor.focus();
	}
	
	function onResetAsJavascript() {
		$scope.editedParam.isJavaScript = true;
		$scope.editorHolder.editor.setValue('return "";', 1); // moves cursor to the end
		$scope._onEditorModeChange();
	}
	
	function onResetClick() {
		$scope.editorHolder.editor.setValue($scope.editedOriginalValue, 1); // moves cursor to the end
	}
	
	/*********************************
     ** JS step new input parameter **
     *********************************/
	
	$scope.openInlineInputParamEditor = function () {
        $scope.newParam = {
            edited: true,
            isCustom: true,
            visible: true
        };
    };
    
    $scope.saveInlineParam = function () {
    	if (CollectionUtils.isEmpty($scope.process._currentService.inputParams)) {
            $scope.process._currentService.inputParams = [];
        }
    	$scope.process._currentService.inputParams.push($scope.newParam);
    	$scope.newParam = undefined;
    };
    
    $scope.cancelInlineParam = function () {
    	$scope.newParam = undefined;
    };
    
    /*********************************
     ** Wizard ***********************
     *********************************/
	
    $scope.generateCondition = function () {
    	var template =  angular.isDefined($scope.process._condition.operator.caseInsensitiveTemplate) && $scope.process._condition.caseInsensitive ?
						$scope.process._condition.operator.caseInsensitiveTemplate :
						$scope.process._condition.operator.template;
    	$scope.process._currentService.command = template.format($scope.process._condition.argument1, $scope.process._condition.argument2);
    	$scope.process._isConditionBuilderOpen = false;
    };
    
    function finishService() {
		CollectionUtils.findByProperty($scope.process._currentService.outputParams, 'PopupMessages', 'id.name').isSpecial = true;
		CollectionUtils.findByProperty($scope.process._currentService.outputParams, 'StatusBarMessages', 'id.name').isSpecial = true;
		CollectionUtils.findByProperty($scope.process._currentService.outputParams, 'Error', 'id.name').isSpecial = true;
		ToastManager.showInfo($scope.process._currentService.name, 'Service updated in process:');
	}
    
    function finishCondition() {
    	if ($scope.process._isConditionBuilderOpen && $scope.process._currentService.conditionType.value !== 'ELSE') {
			$scope.generateCondition();
		}
		
		if (!$scope.conditionEditorHolder.editor.$valid) {
			ToastManager.showError('JavaScript Syntax Error', 'Condition');
			return true;
		}
		if ($scope.process._currentService.conditionType.value === 'ELSE') {
			$scope.process._currentService.command = '';
		}
		$scope.process._currentService.name = $scope.process._currentService.conditionType.value + ' (' + $scope.process._currentService.command + ')';
		
		ToastManager.showInfo($scope.process._currentService.conditionType.value, 'Condition updated in process:');
		
    }
    
    $scope.onNext = function () {
    	var nextStep = 2;
    	
    	if ($scope.process._currentService.type === 'Service') {
    		finishService();
    		
    	} else if ($scope.process._currentService.type === 'Condition' && finishCondition() === true) {
			return true;
    	}
    	
    	if ($scope.process._currentService.type === 'Service' || $scope.process._currentService.type === 'Condition') {
    		if ($scope.process._currentServiceIndex === $scope.process.services.length) {
    			$scope.process.services.push($scope.process._currentService);
    		}
    		$scope.process._currentService = undefined;
    		nextStep = 0;
    	}
    		
    	WizardHandler.wizard('processWizard').setCompleted(1);	//indices starting from 0
    	WizardHandler.wizard('processWizard').goTo(nextStep);
    	return true;
    };
	
	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('ProcessWizardStep1Ctrl', processWizardStep1Ctrl);

function processWizardStep1Ctrl($scope, $mdDialog, ServiceManager, ActionBuilder, WizardHandler, CollectionUtils) {

    function activate() {
    	$scope.allowPartial = ($scope.systemProperties.ALLOW_PARTIAL_RECORDINGS === "true");
    	$scope.stepActions = [ActionBuilder.build('Edit', '', editStep, false, 'fa fa-edit', true, true)];
    	initGroupActions();
    	
    	if (!$scope.mode.new) {
    		setAllWizardStepsCompleted();
    	}
    }
    
    function initGroupActions() {
        $scope.processServicesActions = [{
            name: "Delete",
            loadingIndicator: $scope.loadingIndicator,
            groupLoadingText: "Deleting services...",
            callback: $scope.removeServices
        }];
    }
    
    function setAllWizardStepsCompleted() {
    	for (var i = 0, l = 5; i < l; i++) {
    		WizardHandler.wizard('processWizard').setCompleted(i);
    	}
    }
    
    $scope.addService = function() {
    	$mdDialog.show({
    		controller: 'ServiceSelectorDialogCtrl',
    		templateUrl: 'app/modules/auraTester/views/managers/testCase/serviceSelectorDialog.html',
    		clickOutsideToClose: false,
			bindToController: true,
			locals: {
				title: 'Select service',
    			context: 'Process'
    		}
		}).then(function (serviceConstant) {
			ServiceManager.get(serviceConstant.properties.name).then(function (service) {
				addAndEdit(service, 'Service');
            });
		});
    };
    
    function addAndEdit(service, type, nextStep) {
    	service.type = type;
		$scope.process._currentService = service;
		$scope.process._currentServiceIndex = $scope.process.services.length;
		
		WizardHandler.wizard('processWizard').setCompleted(0);
		WizardHandler.wizard('processWizard').goTo(angular.isDefined(nextStep) ? nextStep : 1);
    }
    
    function editStep(service, actions, index) {
    	$scope.process._currentService = service;
    	$scope.process._currentServiceIndex = index;
    	WizardHandler.wizard('processWizard').goTo(service.type === 'ThrowError' ? 2 : 1);
    }
    
    $scope.addCondition = function() {
    	addAndEdit({}, 'Condition');
    };
    
    $scope.addThrowError = function() {
    	addAndEdit({command: 'Oops, that\'s an error!'}, 'ThrowError', 2);
    };
    
    /****************************************
     *    Services selector functionality   *
     ****************************************/
    
    $scope.removeServices = function(services) {
    	services.forEach(function(service) {
    		$scope.process.services = CollectionUtils.removeObjectByReference($scope.process.services, service);
    	});
    };
    
    function toServiceNames(services) {
        return angular.isUndefined(services) ? [] :
            services.map(function (service) {
            	if (angular.isDefined(service.name)) {
            		return service.name;
            	}
            	return service;
            });
    }
    
    /*********************************
     ** Wizard ***********************
     *********************************/
    
    $scope.onNext = function () {
    	WizardHandler.wizard('processWizard').setCompleted(2);	// in case that step 3 was never displayed
    	WizardHandler.wizard('processWizard').goTo(3);
    	return true;
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('ProcessWizardCtrl', processWizardCtrl);

function processWizardCtrl(	$scope, $routeParams, $location, services, process, systemProperties, ProcessManager,
							NavigationManager, UserManager, ModeParser) {

    function activate() {
    	$scope.loadingIndicator = {isLoading: false, loadingText: "Saving process..."};
    	$scope.systemProperties = systemProperties;
    	$scope.services = services;
    	
    	initByMode();
    	buildCrumbs();
    	prepareServiceConstants();
    }
    
    function initByMode() {
        $scope.mode = {};
        ModeParser.parse($scope.mode, $routeParams.mode);
        
        $scope.process = $scope.mode.new ? {services: []} : process;
    }
    
    function buildCrumbs() {
        $scope.crumbs = [
            {title: "Integration Manager", url: "#/integrationManager"},
            {title: "Process", url: "#/integrationManager/processes"},
            {title: ($scope.mode.new ? "New" : $scope.process.name), active: true}
        ];
    }
    
    function prepareServiceConstants() {
    	$scope.serviceConstants = [];
    	services.forEach(function(service) {
    		service.value = service.name;
    		service.text = service.name;
    		$scope.serviceConstants.push(service);
    	});
    }
    
    $scope.$on('wizard:stepChanged', function(event, step) { 
    	$scope.step = step.index;
    });
    
    /*********************************
     ** Wizard submit ****************
     *********************************/
    
    $scope.submit = function() {
    	$scope.process.createdBy = UserManager.getUser().username;
    	
    	ProcessManager.update($scope.process, $scope.loadingIndicator).then(function() {
    		NavigationManager.goTo('serviceEditor/details/' + $scope.process.service.name);
    	});
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('ProcessThrowErrorCtrl', processThrowErrorCtrl);

function processThrowErrorCtrl($scope, $timeout, ProcessContextMenu, ObjectUtils) {
	var originalValue;
	var originalIsJavaScript;
	
	function activate() {
		$scope.process._currentService.isJavaScript = ObjectUtils.defaultValue($scope.process._currentService.isJavaScript, false);
		originalValue = $scope.process._currentService.command;
		originalIsJavaScript = $scope.process._currentService.isJavaScript;
		$scope._onEditorModeChange();
		initEditorContextMenu();
	}
	
	$scope._onEditorModeChange = function(newValue, oldValue) {
		$timeout(function () {
			var mode = $scope.process._currentService.isJavaScript ? 'ace/mode/javascript' : undefined;
			var theme = $scope.process._currentService.isJavaScript ? 'ace/theme/tomorrow_night_eighties' : 'ace/theme/chrome';
			$scope.editorHolder.editor.getSession().setMode(mode);
			$scope.editorHolder.editor.setTheme(theme);
        }, 100);	//we have to wait for the md-switch to be refreshed with the new value
	};
	
	/*********************************
     ** JS context menu **************
     *********************************/
	
    function initEditorContextMenu() {
    	var contextMenu = ProcessContextMenu.create();
    	ProcessContextMenu.appendParameterReferences(contextMenu, $scope.process, onContextParameterClick);
    	ProcessContextMenu.appendEntry(contextMenu, 'Reset as Javascript', onResetAsJavascript);
    	ProcessContextMenu.appendEntry(contextMenu, 'Reset value', onResetClick);
		$scope.jsContextMenu = contextMenu;
	}
	
	function onContextParameterClick(serviceName, outputParamName, isOutput) {
		var editor = $scope.editorHolder.editor;
		editor.session.insert(editor.getCursorPosition(), 'PROCESS.' + serviceName + '.' + (isOutput ? 'output' : 'input') + '["' + outputParamName + '"]');
		$scope.process._currentService.isJavaScript = true;
		$scope._onEditorModeChange();
		editor.focus();
	}
	
	function onResetAsJavascript() {
		$scope.editorHolder.editor.setValue('"I am code!".replace("code", "error")', 1); // moves cursor to the end
		$scope.process._currentService.isJavaScript = true;
		$scope._onEditorModeChange();
	}
	
	function onResetClick() {
		$scope.editorHolder.editor.setValue(originalValue, 1); // moves cursor to the end
		$scope.process._currentService.isJavaScript = originalIsJavaScript;
		$scope._onEditorModeChange();
	}
	
	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('ProcessConditionCtrl', processConditionCtrl);

function processConditionCtrl($scope, DialogManager, JsServiceUtils, ProcessConditions, ProcessConditionOperators, ProcessContextMenu, StringUtils, ObjectUtils) {
	var originalValue;
	
	function activate() {
		$scope.processConditions = ProcessConditions.values;
		$scope.processConditionOperators = ProcessConditionOperators.values;
		$scope.process._currentService.conditionType = ObjectUtils.defaultValue($scope.process._currentService.conditionType, ProcessConditions.default);
		$scope.process._isConditionBuilderOpen = StringUtils.isEmpty($scope.process._currentService.command);
		$scope.process._condition = {operator: ProcessConditionOperators.default};
		originalValue = $scope.process._currentService.command;
		initEditorContextMenu();
	}
	
	$scope.openFieldsDialog = function (argumentName) {
		JsServiceUtils.openFieldsDialog($scope.process.services, $scope.process._currentServiceIndex).then(function (selection) {
			$scope.process._condition[argumentName] = 	selection.all[1] === 'Input parameters' ?
											 			JsServiceUtils.generateInputReference(selection.all[2]) :
											 			'PROCESS.{0}.output["{1}"]'.format(selection.all[0], selection.all[2]);
        });
    };
	
	function switchToJsCondition() {
		originalValue = $scope.process._currentService.command;
		$scope.generateCondition();
	}
	
	function switchToConditionBuilder() {
		DialogManager.openConfirmationDialog({
            title: 'Condition builder',
            description: 'Current condition will be discarded. Continue?',
            onConfirmCallback: function() {
            	$scope.process._condition.argument1 = undefined;
        		$scope.process._condition.argument2 = undefined;
        		$scope.process._isConditionBuilderOpen = true;
            }
        });
	}
	
	$scope.toggleJsCondition = function() {
		if ($scope.process._isConditionBuilderOpen) {
			switchToJsCondition();
		} else {
			switchToConditionBuilder();
		}
	};
	
	/*********************************
     ** JS context menu **************
     *********************************/
	
    function initEditorContextMenu() {
    	var contextMenu = ProcessContextMenu.create();
    	ProcessContextMenu.appendParameterReferences(contextMenu, $scope.process, onContextParameterClick);
    	ProcessContextMenu.appendEntry(contextMenu, 'Reset value', onResetClick);
		$scope.jsContextMenu = contextMenu;
	}
	
	function onContextParameterClick(serviceName, outputParamName, isOutput) {
		var editor = $scope.editorHolder.editor;
		var expression = isOutput ? 'PROCESS.{0}.output["{1}"]'.format(serviceName, outputParamName) :
									JsServiceUtils.generateInputReference(outputParamName);
		editor.session.insert(editor.getCursorPosition(), expression);
		editor.focus();
	}
	
	function onResetClick() {
		$scope.editorHolder.editor.setValue(angular.isDefined(originalValue) ? originalValue : '' , 1); // moves cursor to the end
	}
	
	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('McsWizardStep3Ctrl', mcsWizardStep3Ctrl);

function mcsWizardStep3Ctrl($scope, WizardHandler) {
	
	function activate() {
		validateAllMethodsEdited();
	}

	function validateAllMethodsEdited() {
		if (!$scope.resource._metadata.isAllMethodsEdited) {
	    	WizardHandler.wizard('mcsWizard').goTo(1);
		}
	}
	
	$scope.onBack = function() {
		WizardHandler.wizard('mcsWizard').goTo(0);
    	return true;
	};
	
	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('McsWizardStep2Ctrl', mcsWizardStep2Ctrl);

function mcsWizardStep2Ctrl($scope, $mdDialog, McsMethods, McsResponseStructure, JsonSchemaGenerator,
							ServiceExecutor, ToastManager, DocumentNavigator, WizardHandler,
							CollectionUtils, ObjectUtils) {
	
	function activate() {
		$scope.loadingIndicator = {isLoading: false, isLoaded: false, loadingText: 'Getting service response..', block: false};

		if (!selectCurrentMethod()) {
			$scope.resource._metadata.isAllMethodsEdited = true;
			WizardHandler.wizard('mcsWizard').setCompleted(1);
	    	WizardHandler.wizard('mcsWizard').goTo(2);
			return;
		}
		
		initMaxCompatibility();
		prepareInputParams($scope.editedMethod.service);
		initDefaults();
		
		ToastManager.showInfo('Editing ' + $scope.resource._metadata.currentMethodConstant.text + ' method');
	}
	
	function initMaxCompatibility() {
    	$scope.maxCompatibility = {};
    	$scope.maxCompatibility.requiredStructure = McsResponseStructure.getMaxCompatibilityStructure($scope.editedMethod.value);
    	if (angular.isDefined($scope.editedMethod.response.structure)) {
    		$scope.maxCompatibility.isCompatible = 	angular.isUndefined($scope.maxCompatibility.requiredStructure) ||
													CollectionUtils.equalsIgnoreOrder($scope.editedMethod.response.structure, $scope.maxCompatibility.requiredStructure);
    	} else {
    		$scope.maxCompatibility.isCompatible = angular.isUndefined($scope.maxCompatibility.requiredStructure);
    	}
	}
	
	function selectUneditedMethod() {
		var $ = false;
		Object.keys($scope.resource.methods).every(function(methodKey) {
			if ($scope.resource._metadata.isNew[methodKey]) {
				$scope.resource._metadata.currentMethodConstant = $scope.resource.methods[methodKey];
				$ = true;
				return false;
			}
			return true;
		});
		return $;
	}
	
	function selectCurrentMethod() {
		if (angular.isUndefined($scope.resource._metadata.currentMethodConstant)) {
			if (!selectUneditedMethod()) {
				return false;
			}
		}
		
		var methodValue = $scope.resource._metadata.currentMethodConstant.value;
		$scope.editedMethod = angular.copy($scope.resource.methods[methodValue]);
		
		if (!$scope.resource._metadata.isNew[methodValue]) {
			$scope.hasResponse = true;
		}
		return true;
	}
	
	function prepareInputParams(service) {
		$scope.serviceInputParamConstants = [];
		if (angular.isUndefined(service) || angular.isUndefined(service.inputParams)) {
			return;
		}
		service.inputParams.forEach(function(inputParam) {
			if (inputParam.visible === true) {
				var paramKey = getInputParamKey(inputParam, service);
				$scope.serviceInputParamConstants.push({value: paramKey, text: paramKey});
			}
		});
	}
	
	function initDefaults() {
    	$scope.editedMethod.request.schemaName = ObjectUtils.defaultValue(
				$scope.editedMethod.request.schemaName,
				$scope.resource.name + '_' + $scope.editedMethod.value + '_request');
    	$scope.editedMethod.response.schemaName = ObjectUtils.defaultValue(
				$scope.editedMethod.response.schemaName,
				$scope.resource.name + '_' + $scope.editedMethod.value + '_response');
	}
	
	$scope.resolveUrl = function() {
		if (angular.isUndefined($scope.resource._metadata.currentMethodConstant)) {
			return '';
		}
		
	   	var url = $scope.resource.name;
	   	var current = $scope.resource;
	   	while (angular.isDefined(current.parent) && current.parent.value !== 'none') {
	   		current = CollectionUtils.findByName($scope.allResources, current.parent.value);
	   		url = current.name + '/{' + current.methods.get.idField.value + '}/' + url;
	   	}
	   	
	   	url = '/' + url;
	   	if ($scope.resource._metadata.currentMethodConstant.requiresId) {
	   		var idField = angular.isDefined($scope.editedMethod.idField) ? $scope.editedMethod.idField.value : 'id';
	   		url += '/{' + idField + '}';
	   	}
	   	return url;
   };
   
   $scope.colorParams = function(text) {
	   return text.replace(/{/g, '<span class="text-info">{')
	   			  .replace(/}/g, '}</span>');
   };
	
	/*********************************
     ** Request generation ***********
     *********************************/
	
	function getInputParamKey(inputParam, service) {
        return service.useLabelsAsKeys ? inputParam.paramLabel : inputParam.id.name;
    }
	
	function prepareRequest(service) {
		var requestParams = {};
		service.inputParams.forEach(function(inputParam) {
			requestParams[getInputParamKey(inputParam, service)] = angular.isDefined(inputParam.paramValue) ? inputParam.paramValue : '';
		});
		$scope.editedMethod.request.example = angular.toJson(requestParams, true);
		$scope.editedMethod.response.example = '';
		$scope.hasResponse = false;
	}
	
	$scope.onServiceSelect = function(service) {
		prepareInputParams(service);
		prepareRequest(service);
	};
	
	/*********************************
     ** Response generation **********
     *********************************/
	
	var originalResponse;
	
	function generateQuery() {
        var query = '?';

        var requestExampleAsJson = angular.fromJson($scope.editedMethod.request.example); 
        Object.keys(requestExampleAsJson).forEach(function(inputParamKey) {
        	query += inputParamKey + '=' + encodeURIComponent(requestExampleAsJson[inputParamKey]) + '&';
        });

        query += 'numOfRowsInTable=2&json=true';
        return query;
    }
	
	$scope.getResponse = function() {
		$scope.loadingIndicator.isGoTop = false;
		ServiceExecutor.execute($scope.editedMethod.service.value, generateQuery(), 'GET', $scope.loadingIndicator).then(function(response) {
			$scope.editedMethod.response.example = angular.toJson(response, true);
			$scope.loadingIndicator.isLoaded = true;
			$scope.hasResponse = true;
			
			originalResponse = $scope.editedMethod.response.example;
			$scope.editedMethod.response.structure = McsResponseStructure.values();
			makeMaxCompatible();
		});
	};
	
	$scope.editResponse = function() {
		if (angular.isUndefined(originalResponse) ) {
			if (angular.isUndefined($scope.editedMethod.response.structure) || $scope.editedMethod.response.structure.length !== McsResponseStructure.values().length) {
				ToastManager.showWarning('Click on the "Get Response" button, and try again.', 'Response regeneration required');
				return;
			} else {
				originalResponse = $scope.editedMethod.response.example; 
			}
		}
		
		openResponseStructureDialog();
	};
	
	/*********************************
     ** Response structure ***********
     *********************************/
	
	function makeMaxCompatible() {
		if (angular.isDefined($scope.maxCompatibility.requiredStructure)) {
			transformToStructure($scope.maxCompatibility.requiredStructure);
		}
		$scope.maxCompatibility.isCompatible = true;
	}
	
	function transformToStructure(structure) {
		$scope.editedMethod.response.structure = structure;
    	$scope.editedMethod.response.example = angular.toJson(McsResponseStructure.transform(originalResponse, structure), true);
	}
	
	/*********************************
     ** Dialogs **********************
     *********************************/
	
    function openResponseStructureDialog() {
    	$mdDialog.show({
            controller: 'McsResponseStructureDialogCtrl',
            templateUrl: 'app/modules/integration/views/dialogs/mcsResponseStructureDialog.html',
            locals: {
            	initialSelection: $scope.editedMethod.response.structure,
            	maxCompatibility: $scope.maxCompatibility
            },
            bindToController: true
        }).then(function (selection) {
        	transformToStructure(selection.all);
        });
    }
	
	/*********************************
     ** Wizard ***********************
     *********************************/
    
	function generateSchemas() {
		$scope.editedMethod.request.schema = angular.toJson(JsonSchemaGenerator.generate($scope.editedMethod.request.schemaName, angular.fromJson($scope.editedMethod.request.example)), true);
		$scope.editedMethod.response.schema = angular.toJson(JsonSchemaGenerator.generate($scope.editedMethod.response.schemaName, angular.fromJson($scope.editedMethod.response.example)), true);
	}
	
	function saveMethod() {
		generateSchemas();
		var methodKey = $scope.resource._metadata.currentMethodConstant.value;
		$scope.resource.methods[methodKey] = $scope.editedMethod;
		$scope.resource._metadata.isNew[methodKey] = false;
	}
	
    function onLeave() {
    	if ($scope.mcsWizardStep2Form.$valid && $scope.hasResponse) {
    		saveMethod();
    	} else {
    		ToastManager.showWarning('Method ' + $scope.resource._metadata.currentMethodConstant.text + ' was not saved',
    								 'Editing Incomplete');
    	}
    }
    
    $scope.onMethodSelect = function (constant) {
    	if ($scope.resource._metadata.currentMethodConstant.value === constant.value) {
    		return;
    	}
    	onLeave();
    	$scope.resource._metadata.currentMethodConstant = constant;
    	$scope.resource._metadata.isAllMethodsEdited = false;
    	
    	WizardHandler.wizard('mcsWizard').setCompleted(1);
    	WizardHandler.wizard('mcsWizard').goTo(2);
    	DocumentNavigator.goTop('slow');
    };
	
	$scope.onNext = function() {
		onLeave();
		delete $scope.resource._metadata.currentMethodConstant;
		
		WizardHandler.wizard('mcsWizard').setCompleted(1);
    	WizardHandler.wizard('mcsWizard').goTo(2);
    	return true;
	};
	
	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('McsWizardStep1Ctrl', mcsWizardStep1Ctrl);

function mcsWizardStep1Ctrl($scope, WizardHandler) {
	
	function activate() {}
	
	$scope.onMethodEdit = function (method){
		$scope.resource._metadata.currentMethodConstant = method;
		WizardHandler.wizard('mcsWizard').setCompleted(0);
    	WizardHandler.wizard('mcsWizard').goTo(1);
    	return true;
	};
	
	$scope.onMethodChange = function (){
		$scope.mcsWizardStep1Form.resourceMethods.$validate();
	};
	
	$scope.onNext = function (){
		delete $scope.resource._metadata.currentMethodConstant;
	};
	
	activate();
}

angular.module('ap.serviceManager.integration').directive('mcsMethodsValidator', function () {
    return {
    	restrict: 'E',
        require: 'ngModel',
        scope: {
            methods: '=',
        },
        link: function (scope, element, attr, ctrl) {
        	
        	function hasImplementedMethods(methods) {
        		var $ = false;
            	Object.keys(methods).every(function(method){
            		if (methods[method].isEnabled === 'Enabled')  {
            			$ = true;
            			return false;
            		}
            		return true;
            	});
            	return $;
        	}
        	
        	ctrl.$validators.empty = function() {
        		return hasImplementedMethods(scope.methods);
            };
        }};
});
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('McsWizardCtrl', mcsWizardCtrl);

function mcsWizardCtrl(	$scope, $routeParams, services, resource, allResources, McsMethods, McsManager,
						DialogManager, NavigationManager, UserManager, ModeParser,
						ConstantUtils, CollectionUtils, ObjectUtils) {

    function activate() {
    	$scope.loadingIndicator = {isLoading: false, loadingText: "Generating resource..."};
    	$scope.allResources = allResources;
    	
    	initByMode();
    	initIsNew();
    	buildCrumbs();
    	prepareParentConstants();
    	prepareServiceConstants();
    	convertParentToConstant();
    	convertServiceToConstant();
    	initDefaults();
    }
    
    function initNewResource() {
    	var $ = {
    		methods: {}
    	};
    	McsMethods.values.forEach(function(method){
    		$.methods[method.value] = method;
    		method.request = {};
			method.response = {};
    	});
    	return $;
    }
    
    function initByMode() {
        $scope.mode = {};
        ModeParser.parse($scope.mode, $routeParams.mode);
        
        $scope.resource = $scope.mode.new ? initNewResource() : resource;
        $scope.resource._metadata = {isNew: {}};
    }
    
    function initIsNew() {
    	McsMethods.values.forEach(function(method){
			$scope.resource._metadata.isNew[method.value] = $scope.mode.new ? 
															ObjectUtils.defaultValue($scope.resource._metadata.isNew[method.value], true) : 
															!(method.value in $scope.resource.methods);
		});
	}
    
    function buildCrumbs() {
        $scope.mcsWizardCrumbs = [
            {title: "Integration Manager", url: "#/integrationManager"},
            {title: "MCS", url: "#/integrationManager/mcs"},
            {title: ($scope.mode.new ? "New" : $scope.resource.name), active: true}
        ];
    }
    
    function prepareParentConstants() {
    	$scope.resource._metadata.parentConstants = [
    	    {value:	'none', text: '(None)'}
    	];
    	allResources.forEach(function(resource) {
    		if (resource.name !== $scope.resource.name) {
    			resource.value = resource.name;
        		resource.text = resource.name;
        		$scope.resource._metadata.parentConstants.push(resource);
    		}
    	});
    }
    
    function prepareServiceConstants() {
    	$scope.resource._metadata.serviceConstants = [];
    	services.forEach(function(service) {
    		service.value = service.name;
    		service.text = service.name;
    		$scope.resource._metadata.serviceConstants.push(service);
    	});
    }
    
    function convertParentToConstant() {
    	var parent = $scope.resource.parent;
		if (angular.isString(parent)) {
			$scope.resource.parent = ConstantUtils.getByValue(parent, {values: $scope.resource._metadata.parentConstants});
		} 
    }
    
    function convertServiceToConstant() {
    	Object.keys($scope.resource.methods).forEach(function(methodKey) {
    		var service = $scope.resource.methods[methodKey].service;
    		if (angular.isString(service)) {
    			$scope.resource.methods[methodKey].service = ConstantUtils.getByValue(service, {values: $scope.resource._metadata.serviceConstants});
    		} 
    	});
    }
    
    function initDefaults() {
    	$scope.resource.parent = ObjectUtils.defaultValue($scope.resource.parent, $scope.resource._metadata.parentConstants[0]);
    }
    
    $scope.$on('wizard:stepChanged', function(event, step) { 
    	$scope.step = step.index;
    });
    
    /*********************************
     ** Wizard submit ****************
     *********************************/
    
    function validateUseLabelsAsKeys(resource, isUseLabelsAsKeys) {
    	var $ = true;
    	Object.keys(resource.methods).every(function(methodKey) {
    		var service = resource.methods[methodKey].service;
			if (angular.isString(service)) {
				service = ConstantUtils.getByValue(service, {values: $scope.resource._metadata.serviceConstants});
    		}
    		var currentSetting = service.useLabelsAsKeys;
    		
    		if (angular.isUndefined(isUseLabelsAsKeys.value)) {
    			isUseLabelsAsKeys.value = currentSetting;
    		} else if (currentSetting !== isUseLabelsAsKeys.value) {
    			$ = false;
    			return false;
    		}
    		return true;
    	});
    	return $;
    }
    
    function validateUseLabelsAsKeysForAll() {
    	var isUseLabelsAsKeys = {};
    	if (!validateUseLabelsAsKeys($scope.resource, isUseLabelsAsKeys)) {
   			return false;
   		}
    	
    	var current = $scope.resource;
	   	while (angular.isDefined(current.parent) && current.parent.value !== 'none') {
	   		current = CollectionUtils.findByName($scope.allResources, current.parent.value);
	   		if (!validateUseLabelsAsKeys(current, isUseLabelsAsKeys)) {
	   			return false;
	   		}
	   	}
	   	
    	return true;
    }
    
    function saveToServer() {
    	McsManager.update($scope.resource, $scope.loadingIndicator).then(function() {
    		NavigationManager.goTo('integrationManager/mcs');
    	});
    }
    
    $scope.submit = function() {
    	$scope.resource.createdBy = UserManager.getUser().username;
    	
    	// validate that all services, in current resource and in predecessor resources, 
    	// have the same boolean value for the 'useLabelsAsKeys' property.
    	if (!validateUseLabelsAsKeysForAll()) {
    		DialogManager.openConfirmationDialog({
                title: 'Inconsistent services',
                description: 'Some of the selected services use LabelsAsKeys while others do not. Continue?',
                onConfirmCallback: function(){
                	saveToServer();
                }
            });
    		return;
    	}
    	
    	saveToServer();
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('McsMethodSelectorCtrl', mcsMethodSelectorCtrl);

function mcsMethodSelectorCtrl($scope, ConstantUtils) {
    
	function activate() {
		prepareMethodConstants();
    }

    function prepareMethodConstants() {
		$scope.methodConstants = [];
		Object.keys($scope.resource.methods).forEach(function(methodKey) {
			var method = $scope.resource.methods[methodKey];
			method.refreshIcon($scope.resource._metadata.isNew[methodKey]);
			$scope.methodConstants.push(method);
		});
		$scope.methodConstants.sort(function(method1, method2) {
		    return method1.order - method2.order;
		});
	}
    
    $scope.onSelect = function (constant) {
    	$scope.onSelectCallback({name: constant.value, constant: constant});
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('McsMethodsCtrl', mcsMethodsCtrl);

function mcsMethodsCtrl($scope, $timeout, McsMethods, ObjectUtils) {
	
	function activate() {
		$scope.isEnabled = {};
		$scope.resource._metadata.disabledMethods = {};
		$scope.methods = McsMethods.values;
		initMethods();
		initMethodIcons();
	}
	
	function initMethods() {
    	McsMethods.values.forEach(function(method){
    		var isEnabled = method.value in $scope.resource.methods;
    		$scope.isEnabled[method.value] = isEnabled;
			if (!isEnabled && !(method.value in $scope.resource._metadata.disabledMethods)) {
				$scope.resource._metadata.disabledMethods[method.value] = method;
				method.request = {};
				method.response = {};
			}
		});
	}
	
	function initMethodIcons() {
		$scope.methods.forEach(function(method) {
			method.refreshIcon($scope.resource._metadata.isNew[method.value]);
    	});
    }
	
	function updateMethodsByIsEnabled() {
		if (angular.isUndefined($scope.resource.methods)) {		//may get undefined when 'length-validator' fails on 'empty' validation. 
			$scope.resource.methods = {};
		}
		McsMethods.values.forEach(function(method) {
			var isEnabled = $scope.isEnabled[method.value];
			var isInDisabledMethods = method.value in $scope.resource._metadata.disabledMethods;
			var methodEntry;
			if (isEnabled && isInDisabledMethods) {
				methodEntry = $scope.resource._metadata.disabledMethods[method.value];
				delete $scope.resource._metadata.disabledMethods[method.value];
				$scope.resource.methods[method.value] = methodEntry;
			} else if (!isEnabled && !isInDisabledMethods) {
				methodEntry = $scope.resource.methods[method.value];
				delete $scope.resource.methods[method.value];
				$scope.resource._metadata.disabledMethods[method.value] = methodEntry;
			}
		});
		initMethodIcons();
	}
	
	$scope._onChange = function(newValue) {
		$timeout(function () {
			updateMethodsByIsEnabled();
			$scope.onChange();
        }, 100);	//we have to wait for the md-switches to be refreshed with the new values
	};
	
	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('VbcsEditorCtrl', vbcsEditorCtrl);

function vbcsEditorCtrl($scope, resource, licenseDetails, NavigationManager, DataManager, XmlFormatter, ToastManager, BreadcrumbsBuilder) {
	
    /**************************
     *   Init                 *
     **************************/

    function activate() {
        DataManager.setIsLoading(false);
        $scope.loadingIndicator = {isLoading: false};
        $scope.resource = resource;
        $scope.responseEditorHolder = {
        	mode: resource.response !== undefined && resource.response.trim()[0] === '<' ? 'xml' : 'json',
        	value: prettyResponse(resource.response, true)
        };

        buildCrumbs();
    }

    function buildCrumbs() {
        $scope.crumbs = BreadcrumbsBuilder.buildBasicBreadcrumbs(
            'Integration Manager',
            'VBCS',
            $scope.resource.name);
    }

	/**************************
     *   	Response          *
     **************************/
    
	function prettyResponse(string, shouldPretty) {
		var isXml = string !== undefined && string.trim()[0] === '<';
    	try {
    		return 	isXml ?
    				XmlFormatter.format(string) :
    				JSON.stringify(JSON.parse(string), shouldPretty ? null : undefined, shouldPretty ? 2 : undefined);
    	} catch (e) {
    		return string;
    	}
    }
	
	
    /**************************
     *   Functionality        *
     **************************/

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('VbcsManagerCtrl', vbcsManagerCtrl);

function vbcsManagerCtrl($scope, $location, $mdDialog, VbcsManager, ServiceManager, ServiceCacheManager, NavigationManager,
						 SystemPropertyManager, ToastManager, Permissions, PromiseUtils, CollectionUtils) {
    activate();

    function activate() {
    	initGroupActions();
    	$scope.systemProperties = SystemPropertyManager.systemConfig.properties;
    }
    
    function initGroupActions() {
        $scope.groupActions = [
			{
				name: "Export API", 
				callback: onExport, 
				map: getName
			},
            {
            	name: "Backup", 
            	callback: backup, 
            	map: getName
            },
            {
                name: "Delete",
                map: getName,
                loadingIndicator: $scope.loadingIndicator,
                groupLoadingText: "Deleting VBCS resources...",
                callback: onDelete
            }
        ];
    }
    
    function getName(entity) {
        return entity.name;
    }
    
    function filterOutExistingVbcs(services) {
    	var $ = [];
    	services.forEach(function(service) {
    		if (!CollectionUtils.containsByName($scope.resources, service.name)) {
    			$.push(service);
    		}
    	});
    	return $;
    }
    
    $scope.createVbcsResource = function () {
    	ServiceManager.getAll(ServiceManager.filters.SERVICES_LIST).then(function (services) {
    		ServiceCacheManager.clear();
			ServiceCacheManager.cacheServices(filterOutExistingVbcs(services));
			$mdDialog.show({
	    		controller: 'ServiceSelectorDialogCtrl',
	    		templateUrl: 'app/modules/auraTester/views/managers/testCase/serviceSelectorDialog.html',
	    		clickOutsideToClose: false,
				bindToController: true,
				locals: {
					title: 'Select service',
	    			context: 'Vbcs'
	    		}
			}).then(function (serviceConstant) {
				NavigationManager.goTo('#/serviceTester/' + serviceConstant.properties.name);
			});
		});
    };
   
    function onExport(resources) {
    	$mdDialog.show({
            controller: 'VbcsExportDialogCtrl',
            templateUrl: 'app/modules/integration/views/dialogs/vbcsExportDialog.html',
            bindToController: true
        }).then(function (integration) {
        	integration.resources = resources;
        	VbcsManager.export(integration);
        });
    }
    
    function backup(resources) {
    	VbcsManager.download(resources);
    }
    
    function deleteVbcs(resource, totalActionedResources) {
    	if (!Permissions.checkEntityAndToast(resource)) {
    		return PromiseUtils.emptyPromise([]);
    	}
    	
        return VbcsManager.delete(resource, $scope.loadingIndicator, getOverrideConfig(totalActionedResources))
            .then(function () {
                $scope.resources = CollectionUtils.removeByProperty($scope.resources, 'name', resource);
            });
    }
    
    function onDelete(resources) {
    	resources.forEach(function(resource) {
    		deleteVbcs(resource, resources.length);
    	});
    	afterDelete(resources.length);
    }

    function getOverrideConfig(totalActionedItems) {
        return totalActionedItems >= 3 ? {showSuccessLog: false} : {};
    }

    function afterDelete(totalActionedItems) {
        if (totalActionedItems >= 3) {
            ToastManager.showSuccess("Deleted " + totalActionedItems + " VBCS resources");
        }
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('VbcsGridCtrl', vbcsGridCtrl);

function vbcsGridCtrl($scope, $route, $location, uiGridConstants, ActionBuilder, PageNavigator,
					  VbcsManager, Permissions) {
	activate();
	
    function activate() {
    	initResources();
        initResourceActions();
        initResourceFunctions();
        initColumnVisibleConfig();
        initColumnDefs();
        initColumnFilter();
    }

    function initResources() {
        $scope.resources.forEach(function (resource) {
        	resource.editingName = false;
        });
    }

    function initResourceActions() {
        $scope.resources.forEach(function (resource) {
        	initVbcsActions(resource);
        });
    }

    function initVbcsActions(resource) {
        if (angular.isUndefined(resource)) {
            return;
        }
        var actions = [];
        actions.push(ActionBuilder.buildLink('Details', 'btn-purple', '#/vbcsEditor/details/' + resource.name, false, 'clip-list-3'));
        actions.push(ActionBuilder.buildLink("Edit", "btn-blue", '#/serviceTester/' + resource.name, false, "fa fa-pencil", true, true));

        resource.actionsData = {actions: actions};
    }

    function initResourceFunctions() {
        $scope.resources.forEach(function (resource) {
        	resource.navigateTo = navigateTo;
        });
    }
    
    function initColumnVisibleConfig() {
        $scope.columnVisibleConfig = {};
    	
    	var columns = $scope.systemProperties.VBCS_TABLE_COLUMNS;
        if (angular.isDefined(columns)) {
        	if (!angular.isArray(columns)) {
        		columns = [columns];
        	}
            columns.forEach(function (column) {
                $scope.columnVisibleConfig[column] = true;
            });
        } else {
            $scope.columnVisibleConfig = {
                name: true,
                lastModified: true,
                createdBy: true
            };
        }
    }
    
    function initColumnDefs() {
        $scope.columnDefs = [
            {
                name: 'name',
                displayName: 'Resource name',
                visible: isColumnVisible('name'),
                width: "*",
                cellTemplate: '<ap-edited-input control-buttons="row.entity.editingName" model="row.entity.name"' +
                ' is-required="true" required-err-msg="Resource name is required!"' +
                ' edited-name="resourceNameInput" save-callback="row.entity.rename(row.entity)"' +
                ' cancel-callback="row.entity.reproduceName(row.entity)"' +
                ' detail-type="link" detail-callback="row.entity.navigateTo(row.entity)">' +
                '</ap-edited-input>'
            },
            {
                name: 'lastModified',
                displayName: 'Modified',
                visible: isColumnVisible('lastModified'),
                cellFilter: 'date:"dd/MM/yy HH:mm:ss"',
                width: "160",
                sort: {
                    direction: uiGridConstants.DESC,
                    priority: 1
                }
            },
            {
                name: 'createdBy',
                displayName: 'Created By',
                visible: isColumnVisible('createdBy'),
                width: '115',
            },
            {
                name: 'actionData',
                displayName: 'Actions',
                enableSorting: false,
                enableColumnMenu: false,
                width: "175",
                cellTemplate: '<ap-action-panel action-data="row.entity.actionsData" action-context="row.entity"></ap-action-panel>'
            }
        ];
    }
    
    function isColumnVisible(column) {
        return angular.isDefined($scope.columnVisibleConfig[column]) &&
            $scope.columnVisibleConfig[column];
    }
    
    function initColumnFilter() {
        $scope.filteredColumns = ['name'];
    }
    
    function navigateTo(entity) {
        $location.path('vbcsEditor/details/' + entity.name);
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('ProcessStepsGridCtrl', processStepsGridCtrl);

function processStepsGridCtrl($scope) {
    activate();

    function activate() {
        initColumnDefs();
        
        if (angular.isDefined($scope.steps)) {
        	initStepsActions();
        }
    }

    function initStepsActions() {
        if (angular.isDefined($scope.actions)) {
            $scope.steps.forEach(function (step) {
            	if (angular.isDefined(step)) {
                	step.actionsData = {actions: $scope.actions};
                }
            });
        }
    }

    function initColumnDefs() {
        $scope.columnDefs = [
            {
                name: 'name',
                displayName: 'Step Name',
                enableSorting: false,
                enableColumnMenu: false,
                width: '*',
                cellTemplate: "<span model='row.entity.name' ng-class=\"{'blue-text': row.entity.name.indexOf('(') !== -1}\">{{COL_FIELD}}</span>"
            },
            {
                name: 'keepAlive',
                displayName: 'Keep Alive',
                visible: $scope.allowPartial,
                enableFiltering: false,
                width: "95",
                cellTemplate: '<ap-checkbox model="row.entity.keepAlive" should-disable="::false" in-table="::true" ng-if="row.entity.type === \'Service\'"></ap-checkbox>'
            },
            { 	
            	name: 'type', 
            	field: 'type',
            	enableSorting: false,
                enableColumnMenu: false,
            	width: '100'
  			},
  			{
                name: 'actionData',
                displayName: 'Actions',
                enableSorting: false,
                enableColumnMenu: false,
                width: '235',
                cellTemplate: "<ap-action-panel action-data='row.entity.actionsData' action-context='row.entity'></ap-action-panel>"
            }
		];
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('ProcessManagerCtrl', processManagerCtrl);

function processManagerCtrl($scope, $location, ProcessManager, SystemPropertyManager,
							ToastManager, Permissions, PromiseUtils, EntityUtils, CollectionUtils) {
    activate();

    function activate() {
    	$scope.systemProperties = SystemPropertyManager.systemConfig.properties;
    	initGroupActions();
    }
    
    function initGroupActions() {
        $scope.groupActions = [
            {
            	name: "Backup", 
            	map: EntityUtils.nameReducer,
            	callback: backup
            },
            {
                name: "Delete",
                loadingIndicator: $scope.loadingIndicator,
                groupLoadingText: "Deleting processes...",
                map: EntityUtils.nameReducer,
                callback: deleteMany
            }
        ];
    }
    
    $scope.createProcess = function () {
    	$location.path('processWizard/new');
    };
    
    function backup(processes) {
    	ProcessManager.download(processes);
    }
    
    function deleteSingle(process, totalActions) {
    	if (!Permissions.checkEntityAndToast(process)) {
    		return PromiseUtils.emptyPromise([]);
    	}
    	
        return ProcessManager.delete(process, $scope.loadingIndicator, getOverrideConfig(totalActions))
            .then(function () {
                $scope.processes = CollectionUtils.removeByProperty($scope.processes, 'name', process);
            });
    }
    
    function deleteMany(processes) {
    	processes.forEach(function(process) {
    		deleteSingle(process, processes.length);
    	});
    	afterDelete(processes.length);
    }

    function getOverrideConfig(totalActionedItems) {
        return totalActionedItems >= 3 ? {showSuccessLog: false} : {};
    }

    function afterDelete(totalActions) {
        if (totalActions >= 3) {
            ToastManager.showSuccess("Deleted " + totalActions + " processes");
        }
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('ProcessGridCtrl', processGridCtrl);

function processGridCtrl($scope, $route, $location, uiGridConstants, ActionBuilder, ProcessManager, Permissions) {
	activate();
	
    function activate() {
    	initEntities();
        initActions();
        initFunctions();
        initColumnVisibleConfig();
        initColumnDefs();
    }

    function initEntities() {
        $scope.entities.forEach(function (entity) {
        	entity.editingName = false;
        });
    }

    function initActions() {
        $scope.entities.forEach(function (entity) {
        	initEntityActions(entity);
        });
    }

    function initEntityActions(entity) {
        if (angular.isUndefined(entity)) {
            return;
        }
        var actions = [];
        actions.push(ActionBuilder.buildLink("Edit", "btn-blue", '#/processWizard/edit/' + entity.name, false, "fa fa-pencil", true, true));
        actions.push(ActionBuilder.buildLink("Duplicate", "btn-green", '#/processWizard/duplicate/' + entity.name, false, "fa fa-copy", true, true));
        actions.push(ActionBuilder.build("Rename", "btn-yellow", prepareNameEdit, false, "fa fa-edit", true, true));

        entity.actionsData = {actions: actions};
    }
    
    function initFunctions() {
        $scope.entities.forEach(function (entity) {
        	entity.rename = rename;
        	entity.reproduceName = reproduceName;
        	entity.navigateTo = navigateTo;
        });
    }
    
    function initColumnVisibleConfig() {
        $scope.columnVisibleConfig = {};
    	
    	var columns = $scope.systemProperties.PROCESS_TABLE_COLUMNS;
        if (angular.isDefined(columns)) {
        	if (!angular.isArray(columns)) {
        		columns = [columns];
        	}
            columns.forEach(function (column) {
                $scope.columnVisibleConfig[column] = true;
            });
        } else {
            $scope.columnVisibleConfig = {
                name: true,
                services: true,
                lastModified: true,
                createdBy: true
            };
        }
    }
    
    function initColumnDefs() {
        $scope.columnDefs = [
            {
                name: 'name',
                displayName: 'Process name',
                visible: isColumnVisible('name'),
                width: "*",
                cellTemplate: '<ap-edited-input control-buttons="row.entity.editingName" model="row.entity.name"' +
                ' is-required="true" required-err-msg="Resource name is required!"' +
                ' edited-name="resourceNameInput" save-callback="row.entity.rename(row.entity)"' +
                ' cancel-callback="row.entity.reproduceName(row.entity)"' +
                ' detail-type="link" detail-callback="row.entity.navigateTo(row.entity)">' +
                '</ap-edited-input>'
            },
            {
                name: 'services',
                displayName: '# Services',
                visible: isColumnVisible('services'),
                width: "100",
                cellTemplate: '<span>{{::row.entity.services.length}}</span>'
            },
            {
                name: 'lastModified',
                displayName: 'Modified',
                visible: isColumnVisible('lastModified'),
                cellFilter: 'date:"dd/MM/yy HH:mm:ss"',
                width: "160",
                sort: {
                    direction: uiGridConstants.DESC,
                    priority: 1
                }
            },
            {
                name: 'createdBy',
                displayName: 'Created By',
                visible: isColumnVisible('createdBy'),
                width: '115',
            },
            {
                name: 'actionData',
                displayName: 'Actions',
                enableSorting: false,
                enableColumnMenu: false,
                width: "200",
                cellTemplate: '<ap-action-panel action-data="row.entity.actionsData" action-context="row.entity"></ap-action-panel>'
            }
        ];
        $scope.filteredColumns = ['name'];
    }
    
    function isColumnVisible(column) {
        return angular.isDefined($scope.columnVisibleConfig[column]) &&
            $scope.columnVisibleConfig[column];
    }
    
    function navigateTo(entity) {
        $location.path('processWizard/edit/' + entity.name);
    }
    
    function prepareNameEdit(entity) {
    	if (!Permissions.checkAndToast(entity.createdBy) || Permissions.blockOperator()) {
    		return;
    	}
    	
    	entity.originalName = entity.name;
    	entity.editingName = true;
    }
    
    function reproduceName(entity) {
    	entity.name = entity.originalName;
    	entity.editingName = false;
    }
    
    function rename(entity) {
    	if (entity.name === entity.originalName) {
    		entity.editingName = false;
    		return;
    	}
    	
        ProcessManager.rename(entity.originalName, entity.name, $scope.loadingIndicator).then(function () {
        	entity.editingName = false;
            $route.reload();
        });
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('McsManagerCtrl', mcsManagerCtrl);

function mcsManagerCtrl($scope, $location, $mdDialog, McsManager, SystemPropertyManager, ToastManager, Permissions, PromiseUtils, CollectionUtils) {
    activate();

    function activate() {
    	initGroupActions();
    	$scope.systemProperties = SystemPropertyManager.systemConfig.properties;
    }
    
    function initGroupActions() {
        $scope.mcsGroupActions = [
			{
				name: "Export API", 
				callback: onExport, 
				map: getName
			},
            {
            	name: "Backup", 
            	callback: backup, 
            	map: getName
            },
            {
                name: "Delete",
                map: getName,
                loadingIndicator: $scope.loadingIndicator,
                groupLoadingText: "Deleting MCS resources...",
                callback: onDelete
            }
        ];
    }
    
    function getName(entity) {
        return entity.name;
    }
    
    $scope.createMcsResource = function () {
    	$location.path('mcsWizard/new');
    };
    
    function resolveDependenciesOnOthers(resourceName, allResources) {
    	var $ = [resourceName];
	   	var current = CollectionUtils.findByName(allResources, resourceName);
	   	
	   	while (angular.isDefined(current.parent)) {
	   		$.push(current.parent);
	   		current = CollectionUtils.findByName(allResources, current.parent);
	   	}
	   	
	   	return $;
   }
   
   function resolveDependenciesOnOthersForArray(resourceNames, allResources) {
	   var $ = [];
	   resourceNames.forEach(function(resourceName) {
		   $ = $.concat(resolveDependenciesOnOthers(resourceName, allResources));
	   });
	   return CollectionUtils.unique($);
   }
    
   function validateParentsSelected(resources) {
    	var dependencies = resolveDependenciesOnOthersForArray(resources, $scope.resources);
    	if (CollectionUtils.equalsIgnoreOrder(resources, dependencies)) {
    		return true;
    	} 
 
    	ToastManager.showError('All predecessors of selected resources must be selected as well.', 'Incomplete selection');
    	return false;
    }
    
    function onExport(resources) {
    	if (!validateParentsSelected(resources)) {
    		return;
    	}
    	
    	$mdDialog.show({
            controller: 'McsExportDialogCtrl',
            templateUrl: 'app/modules/integration/views/dialogs/mcsExportDialog.html',
            bindToController: true
        }).then(function (integration) {
        	integration.resources = resources;
        	McsManager.export(integration);
        });
    }
    
    function backup(resources) {
    	McsManager.download(resources);
    }
    
    function resolveDependenciesOnSelf(resourceName, allResources, $, visited) {
    	if (visited.indexOf(resourceName) !== -1) {
    		return;
    	}
    	$.push(resourceName);
    	visited.push(resourceName);
    	allResources.forEach(function(resource) {
    		if (resource.parent === resourceName) {
    			resolveDependenciesOnSelf(resource.name, allResources, $, visited);
    		}
  	   });
   }
    
    function resolveDependenciesOnSelfForArray(resourceNames, allResources) {
 	   var $ = [];
 	   var visited = [];
 	   resourceNames.forEach(function(resourceName) {
 		   resolveDependenciesOnSelf(resourceName, allResources, $, visited);
 	   });
 	   return CollectionUtils.unique($);
    }
    
    function validateChildrenSelected(resources) {
    	var dependencies = resolveDependenciesOnSelfForArray(resources, $scope.resources);
    	if (CollectionUtils.equalsIgnoreOrder(resources, dependencies)) {
    		return true;
    	} 
 
    	ToastManager.showError('All descendants of selected resources must be selected as well.', 'Incomplete selection');
    	return false;
    }
    
    function deleteMcs(resource, totalActionedResources) {
    	if (!Permissions.checkEntityAndToast(resource)) {
    		return PromiseUtils.emptyPromise([]);
    	}
    	
        return McsManager.delete(resource, $scope.loadingIndicator, getOverrideConfig(totalActionedResources))
            .then(function () {
                $scope.resources = CollectionUtils.removeByProperty($scope.resources, 'name', resource);
            });
    }
    
    function onDelete(resources) {
    	if (!validateChildrenSelected(resources)) {
    		return;
    	}
    	resources.forEach(function(resource) {
    		deleteMcs(resource, resources.length);
    	});
    	afterDelete(resources.length);
    }

    function getOverrideConfig(totalActionedItems) {
        return totalActionedItems >= 3 ? {showSuccessLog: false} : {};
    }

    function afterDelete(totalActionedItems) {
        if (totalActionedItems >= 3) {
            ToastManager.showSuccess("Deleted " + totalActionedItems + " MCS resources");
        }
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('McsGridCtrl', mcsGridCtrl);

function mcsGridCtrl($scope, $route, $location, uiGridConstants, ActionBuilder, PageNavigator, McsManager, McsMethods, Permissions) {
	activate();
	
    function activate() {
    	initResources();
        initResourceActions();
        initResourceFunctions();
        initColumnVisibleConfig();
        initColumnDefs();
        initColumnFilter();
    }

    function initResources() {
        $scope.resources.forEach(function (resource) {
        	resource.editingName = false;
        });
    }

    function initResourceActions() {
        $scope.resources.forEach(function (resource) {
        	initMcsActions(resource);
        });
    }

    function initMcsActions(resource) {
        if (angular.isUndefined(resource)) {
            return;
        }
        var actions = [];
        actions.push(ActionBuilder.buildLink("Edit", "btn-blue", '#/mcsWizard/edit/' + resource.name, false, "fa fa-pencil", true, true));
        actions.push(ActionBuilder.buildLink("Duplicate", "btn-green", '#/mcsWizard/duplicate/' + resource.name, false, "fa fa-copy", true, true));
        actions.push(ActionBuilder.build("Rename", "btn-yellow", prepareMcsNameEdit, false, "fa fa-edit", true, true));

        resource.actionsData = {actions: actions};
    }

    function initResourceFunctions() {
        $scope.resources.forEach(function (resource) {
        	resource.calculateMethods = calculateMethods;
        	resource.renameMcs = renameMcs;
        	resource.reproduceMcsName = reproduceMcsName;
        	resource.navigateTo = navigateToMcs;
        });
    }
    
    function initColumnVisibleConfig() {
        $scope.columnVisibleConfig = {};
    	
    	var columns = $scope.systemProperties.MCS_TABLE_COLUMNS;
        if (angular.isDefined(columns)) {
        	if (!angular.isArray(columns)) {
        		columns = [columns];
        	}
            columns.forEach(function (column) {
                $scope.columnVisibleConfig[column] = true;
            });
        } else {
            $scope.columnVisibleConfig = {
                name: true,
                parent: true,
                methods: true,
                lastModified: true,
                createdBy: true
            };
        }
    }
    
    function initColumnDefs() {
        $scope.columnDefs = [
            {
                name: 'name',
                displayName: 'Resource name',
                visible: isColumnVisible('name'),
                width: "*",
                cellTemplate: '<ap-edited-input control-buttons="row.entity.editingName" model="row.entity.name"' +
                ' is-required="true" required-err-msg="Resource name is required!"' +
                ' edited-name="resourceNameInput" save-callback="row.entity.renameMcs(row.entity)"' +
                ' cancel-callback="row.entity.reproduceMcsName(row.entity)"' +
                ' detail-type="link" detail-callback="row.entity.navigateTo(row.entity)">' +
                '</ap-edited-input>'
            },
            {
                name: 'parent',
                displayName: 'Parent',
                visible: isColumnVisible('parent'),
                width: "160"
            },
            {
                name: 'methods',
                displayName: 'Methods',
                visible: isColumnVisible('methods'),
                width: "275",
                cellTemplate: '<span>{{::row.entity.calculateMethods(row.entity)}}</span>'
            },
            {
                name: 'lastModified',
                displayName: 'Modified',
                visible: isColumnVisible('lastModified'),
                cellFilter: 'date:"dd/MM/yy HH:mm:ss"',
                width: "160",
                sort: {
                    direction: uiGridConstants.DESC,
                    priority: 1
                }
            },
            {
                name: 'createdBy',
                displayName: 'Created By',
                visible: isColumnVisible('createdBy'),
                width: '115',
            },
            {
                name: 'actionData',
                displayName: 'Actions',
                enableSorting: false,
                enableColumnMenu: false,
                width: "175",
                cellTemplate: '<ap-action-panel action-data="row.entity.actionsData" action-context="row.entity"></ap-action-panel>'
            }
        ];
    }
    
    function isColumnVisible(column) {
        return angular.isDefined($scope.columnVisibleConfig[column]) &&
            $scope.columnVisibleConfig[column];
    }
    
    function initColumnFilter() {
        $scope.filteredColumns = ['name', 'parent'];
    }
    
    function calculateMethods(mcs) {
    	var $ = [];
    	Object.keys(mcs.methods).forEach(function(methodKey) {
    		$.push(McsMethods.getByValue(methodKey).text);
    	});
    	return $.join(', ');
    }

    function navigateToMcs(mcs) {
        $location.path('mcsWizard/edit/' + mcs.name);
    }
    
    function prepareMcsNameEdit(resource) {
    	if (!Permissions.checkAndToast(resource.createdBy) || Permissions.blockOperator()) {
    		return;
    	}
    	
    	resource.originalName = resource.name;
    	resource.editingName = true;
    }
    
    function reproduceMcsName(resource) {
    	resource.name = resource.originalName;
    	resource.editingName = false;
    }
    
    function renameMcs(resource) {
    	if (resource.name === resource.originalName) {
    		resource.editingName = false;
    		return;
    	}
    	
        McsManager.rename(resource.originalName, resource.name, $scope.loadingIndicator)
            .then(function () {
            	resource.editingName = false;
                $route.reload();
            });
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('IntegrationManagerCtrl', integrationManagerCtrl);

function integrationManagerCtrl($scope, $routeParams, processes, mcsResources, vbcsResources, DataManager, TabBuilder) {
    activate();

    function activate() {
        DataManager.setIsLoading(false);
        $scope.processes = processes;
        $scope.mcsResources = mcsResources;
        $scope.vbcsResources = vbcsResources;
        initTabs();
    }

    function initTabs() {
        $scope.tabs = TabBuilder.buildTabs(["processes", "mcs", "vbcs"]);
        $scope.tabs.selectedIndex = TabBuilder.getTabIndex($scope.tabs, $routeParams.tab);
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('VbcsExportDialogCtrl', vbcsExportDialogCtrl);

function vbcsExportDialogCtrl($scope, $mdDialog, ObjectUtils) {
    
    function activate() {
    	$scope.api = {};
    	$scope.api.name = 'AuraPlayer';
    	$scope.api.version = '1.0.0';
    }    
    
    $scope.onConfirm = function () {
        $mdDialog.hide($scope.api);
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('McsResponseStructureDialogCtrl', mcsResponseStructureDialogCtrl);

function mcsResponseStructureDialogCtrl($scope, $mdDialog, $timeout, initialSelection, maxCompatibility, McsResponseStructure, CollectionUtils) {
    var tree;
	activate();
    
    function activate() {
    	$scope.initialSelection = initialSelection;
    	$scope.maxCompatibility = maxCompatibility;
    	$scope.originalMaxCompatibility = angular.copy(maxCompatibility);
    	$timeout(function () {
    		tree = $("#responseTree").data("treeview");
    		tree.setSelectionChangeCallback(checkIfSelectionMaxCompatible);
        }, 100);	//we have to for the tree to render
    }
    
    function checkIfSelectionMaxCompatible() {
    	var previousValue = $scope.maxCompatibility.isCompatible; 
		$scope.maxCompatibility.isCompatible = 	angular.isUndefined($scope.maxCompatibility.requiredStructure) ||
												CollectionUtils.equalsIgnoreOrder(tree.getSelection().all, $scope.maxCompatibility.requiredStructure);
    	if ($scope.maxCompatibility.isCompatible !== previousValue) {
    		angular.element('#isMaxCompatible').trigger('click');
    	}
    }
    
    $scope.onMaxCompatibilityChange = function() {
    	$timeout(function () {
    		if ($scope.maxCompatibility.isCompatible) {
    			if (angular.isDefined($scope.maxCompatibility.requiredStructure)) {
    				tree.checkExact($scope.maxCompatibility.requiredStructure);
    			}
    		}
        }, 100);	//we have to wait for the md-switches to be refreshed with the new values
    };
    
    $scope.onConfirm = function () {
        $mdDialog.hide(tree.getSelection());
    };
    
    $scope.onCancel = function () {
    	angular.copy($scope.originalMaxCompatibility, $scope.maxCompatibility);
    	$mdDialog.cancel();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .controller('McsExportDialogCtrl', mcsExportDialogCtrl);

function mcsExportDialogCtrl($scope, $mdDialog, ObjectUtils) {
    
    function activate() {
    	$scope.api = {};
    	$scope.api.version = '1.0';
    	$scope.api.connector = 'AuraPlayer_Connector';
    	$scope.api.connectorVersion = '1.0';
    }    
    
    $scope.onConfirm = function () {
        $mdDialog.hide($scope.api);
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .service('ProcessConditions', processConditionsConstants);

function processConditionsConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {value: "IF", 		text: "IF"},
            {value: "ELSE IF", 	text: "ELSE IF"},
   			{value: "ELSE", 	text: "ELSE"}
        ];
        
        self.default = self.values[0];
    }
    
    self.getByValue = function (value) {
        return ConstantUtils.getByValue(value, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .service('ProcessConditionOperators', processConditionOperators);

function processConditionOperators(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {value: "equals", 		text: "=",			hasArg2: true,		template: '{0} == {1}',					caseInsensitiveTemplate: '{0}.toLowerCase() == {1}.toLowerCase()'},
            {value: "lt", 			text: "<",			hasArg2: true,		template: '{0} < {1}'},
   			{value: "lte", 			text: "<=",			hasArg2: true,		template: '{0} <= {1}'},
   			{value: "gt", 			text: ">",			hasArg2: true,		template: '{0} > {1}'},
   			{value: "gte", 			text: ">=",			hasArg2: true,		template: '{0} >= {1}'},
   			{value: "contains", 	text: "Contains",	hasArg2: true,		template: '{0}.indexOf({1}) !== -1',	caseInsensitiveTemplate: '{0}.toLowerCase().indexOf({1}.toLowerCase()) !== -1'},
   			{value: "empty", 		text: "Empty",		hasArg2: false,		template: '{0}.length === 0'},
   			{value: "notEmpty", 	text: "Not Empty",	hasArg2: false,		template: '{0}.length > 0'}
        ];
        
        self.default = self.values[0];
    }
    
    self.getByValue = function (value) {
        return ConstantUtils.getByValue(value, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.integration')
    .service('McsMethods', mcsMethodsConstants);

function mcsMethodsConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {value: "getAll", 	text: "GET (ALL)",	description: "Returns a collection of {0}s",		order: 1, 	requiresId: false},
            {value: "get", 		text: "GET",		description: "Returns a single {0}",				order: 2, 	requiresId: true},
   			{value: "post", 	text: "POST", 		description: "Creates a new {0} via POST",			order: 3, 	requiresId: false},
   			{value: "patch", 	text: "PATCH", 		description: "Updates an existing instance of {0}",	order: 4, 	requiresId: true},
   			{value: "delete", 	text: "DELETE", 	description: "Deletes an instace of {0}",			order: 5, 	requiresId: true}
        ];
        
        self.values.forEach(function(value) {
        	value.refreshIcon = refreshIcon;
        	value.getDescription = getDescription;
        });
        
        self.default = self.values[0];
    }
    
    function refreshIcon(isNew) {
    	this.icon = !isNew ? '<i class="fa fa-check" style="color: #5cb85c"></i> ' :
    						 '<i class="clip clip-new" style="color: #C83A2A"></i> ';
    }
    
    function getDescription(resourceName) {
		if (resourceName.endsWith('s')) {
			resourceName = resourceName.substring(0, resourceName.length - 1);
		}
		return this.description.format(resourceName);
	}

    self.getByValue = function (value) {
        return ConstantUtils.getByValue(value, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app', [
    'ap.serviceManager.core'
]);
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .directive('appServicesGrid', appServicesGridDirective);

function appServicesGridDirective() {
    return {
        restrict: 'AE',
        scope: {
            services: '=',
            allowPartial: '='
        },
        templateUrl: 'app/modules/app/views/visualizer/service/appServicesGrid.html',
        controller: 'AppServicesGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .directive("appStaticLovList", appStaticLovListDirective);

function appStaticLovListDirective() {
    return {
        restrict: 'E',
        scope: {
        	values: '=',
        	onChange: '=',
        	parentForm: '='
        },
        templateUrl: 'app/modules/app/views/visualizer/page/appStaticLovList.html',
        controller: 'AppStaticLovListCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page', [
    'ap.serviceManager.core'
]);
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .directive('appPageTableFieldsTable', appPageTableFieldsTableDirective);

function appPageTableFieldsTableDirective() {
    return {
        restrict: 'E',
        scope: {
        	fields: '=',
        	deleteCallback: '&',
        	supportsTypes: '='
        },
        templateUrl: 'app/modules/app/views/visualizer/page/appPageTableFieldsTable.html',
        controller: 'AppPageTableFieldsTableCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .directive("appPagesGrid", appPagesGridDirective);

function appPagesGridDirective() {
    return {
        restrict: 'AE',
        scope: {
        	pages: '=',
        	addCallback: '&',
        	editCallback: '&',
        	duplicateCallback: '&',
        	renameCallback: '&',
        	batchRemoveCallback: '&'
        },
        templateUrl: 'app/modules/app/views/visualizer/page/appPagesGrid.html',
        controller: 'AppPagesGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .directive('appPageSelector', appPageSelectorDirective);

function appPageSelectorDirective() {
    return {
        restrict: 'AE',
        scope: {
        	pages: '=',
        	currentPageIndex: '=',
        	onSelectCallback: '&',
        	shouldDisable: '=?'
        },
        templateUrl: 'app/modules/app/views/visualizer/page/appPageSelector.html',
        controller: 'AppPageSelectorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .directive("appPageNamesList", appPageNamesListDirective);

function appPageNamesListDirective() {
    return {
        restrict: 'AE',
        scope: {
        	pages: '=',
        	onChange: '=',
        	onEdit: '=',
        	parentForm: '='
        },
        templateUrl: 'app/modules/app/views/visualizer/page/appPageNamesList.html',
        controller: 'AppPageNamesListCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .directive('appPageFieldsTable', appPageFieldsTableDirective);

function appPageFieldsTableDirective() {
    return {
        restrict: 'AE',
        scope: {
        	fields: '=',
        	editMapCallback: '&',
        	deleteCallback: '&'
        },
        templateUrl: 'app/modules/app/views/visualizer/page/appPageFieldsTable.html',
        controller: 'AppPageFieldsTableCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .directive("appPageActionsTable", appPageActionsTableDirective);

function appPageActionsTableDirective() {
    return {
        restrict: 'AE',
        scope: {
            actions: '=',
            editCallback: '&',
            deleteCallback: '&'
        },
        templateUrl: 'app/modules/app/views/visualizer/page/appPageActionsTable.html',
        controller: 'AppPageActionsTableCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .directive('appNameValidator', appNameValidator);

function appNameValidator(AppManager, $q) {
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$asyncValidators.name = function (modelValue) {
                return AppManager.exist(modelValue).then(function (appExists) {
                    return appExists ? $q.reject('Application " + app.name + " already exists!') : true;
                }, function () {
                    return true;
                });
            };
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .directive('appGrid', appGridDirective);

function appGridDirective() {
    return {
        restrict: 'AE',
        scope: {
        	apps: '=',
        	systemProperties: '=',
        	mode: '=?'
        },
        templateUrl: 'app/modules/app/views/managers/appGrid.html',
        controller: 'AppGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize', [
    'ap.serviceManager.core',
    'mgo-angular-wizard',
	'color.picker'
]);
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .directive('appVisualizerStep6', appVisualizerStep6Directive);

function appVisualizerStep6Directive() {
    return {
        restrict: 'AE',
        scope: {
            app: '=',
            loadingIndicator: '='
        },
        templateUrl: 'app/modules/app/views/visualizer/appVisualizerStep6.html',
        controller: 'AppVisualizerStep6Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .directive('appVisualizerStep5', appVisualizerStep5Directive);

function appVisualizerStep5Directive() {
    return {
        restrict: 'AE',
        scope: {
            app: '=',
            loadingIndicator: '='
        },
        templateUrl: 'app/modules/app/views/visualizer/appVisualizerStep5.html',
        controller: 'AppVisualizerStep5Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .directive('appVisualizerStep4', appVisualizerStep4Directive);

function appVisualizerStep4Directive() {
    return {
        restrict: 'AE',
        scope: {
            app: '=',
            form: '='
        },
        templateUrl: 'app/modules/app/views/visualizer/appVisualizerStep4.html',
        controller: 'AppVisualizerStep4Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .directive('appVisualizerStep3', appVisualizerStep3Directive);

function appVisualizerStep3Directive() {
    return {
        restrict: 'AE',
        scope: {
            app: '=',
            systemProperties: '='
        },
        templateUrl: 'app/modules/app/views/visualizer/appVisualizerStep3.html',
        controller: 'AppVisualizerStep3Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .directive('appVisualizerStep2', appVisualizerStep2Directive);

function appVisualizerStep2Directive() {
    return {
        restrict: 'AE',
        scope: {
            app: '='
        },
        templateUrl: 'app/modules/app/views/visualizer/appVisualizerStep2.html',
        controller: 'AppVisualizerStep2Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .directive('appVisualizerStep1', appVisualizerStep1Directive);

function appVisualizerStep1Directive() {
    return {
        restrict: 'AE',
        scope: {
        	services: '=',
            app: '=',
            mode: '=',
            systemProperties: '='
        },
        templateUrl: 'app/modules/app/views/visualizer/appVisualizerStep1.html',
        controller: 'AppVisualizerStep1Ctrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('appNameEditor', appNameEditorDirective);

function appNameEditorDirective() {
    return {
        restrict: 'AE',
        scope: {
            mode: '=?',
            app: '=',
            shouldDisable: '=?'
        },
        templateUrl: 'app/modules/app/views/editors/appNameEditor.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .service('AppCacheManager', appCacheManagerService);

function appCacheManagerService(EntityCacheManager) {
    var CACHE_KEY = 'apps';

    this.cacheApp = function (app) {
        EntityCacheManager.cacheEntity(CACHE_KEY, app);
    };

    this.getApp = function (appName) {
        return EntityCacheManager.getEntity(CACHE_KEY, appName);
    };

    this.removeApp = function (appName) {
        EntityCacheManager.removeEntity(CACHE_KEY, appName);
    };

    this.cacheApps = function (apps) {
        EntityCacheManager.cacheEntities(CACHE_KEY, apps);
    };

    this.getApps = function (requestedApps) {
        return EntityCacheManager.getEntities(CACHE_KEY, requestedApps);
    };

    this.removeApps = function (apps) {
        EntityCacheManager.removeEntities(CACHE_KEY, apps);
    };

    this.cacheContextApp = function (app) {
        EntityCacheManager.cacheContextEntity(CACHE_KEY, app);
    };

    this.getContextApp = function () {
        return EntityCacheManager.getContextEntity(CACHE_KEY);
    };

    this.removeContextApp = function () {
        EntityCacheManager.removeContextEntity(CACHE_KEY);
    };

    this.hasContextApp = function () {
        return EntityCacheManager.hasContextEntity(CACHE_KEY);
    };

    this.clear = function () {
        EntityCacheManager.clear(CACHE_KEY);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .service('AppManager', appManagerService);

function appManagerService($q, $window, AppConverter, AppCacheManager, DataManager, CollectionUtils, ObjectUtils, EntityManager, System, SystemPropertyManager, Permissions) {
    var self = this;
    activate();

    function activate() {
        self.appManagerConfig = {
            type: 'app',
            getAllUrl: '/Macro/Apps',
            getUrl: '/Macro/App/',
            updateUrl: '/Macro/App',
            deleteUrl: '/Macro/App/',
            renameUrl: '/Macro/App/',
            existUrl: '/Macro/App/',
            backupUrl: '/Macro/Backup',
            fromServerConverter: AppConverter.fromServer,
            toServerConverter: AppConverter.toServer
        };
    }

    function prepareGetHttpConfig(isRequestingCompact) {
        return {
            headers: {
            	'AP-Requesting-Compact': isRequestingCompact
            }
        };
    }
    
    this.get = function (appId, isRequestingCompact) {
        return EntityManager.get(self.appManagerConfig, appId, undefined, prepareGetHttpConfig(isRequestingCompact));
    };

    this.getAll = function () {
        return EntityManager.getAll(self.appManagerConfig).then(afterGetAll);
    };

    function afterGetAll(apps) {
        DataManager.setIsLoading(false);
        return SystemPropertyManager.get(true).then(function (systemProperties) {
            apps = Permissions.filterIfNecessary(apps, systemProperties);
            AppCacheManager.cacheApps(apps);
            return CollectionUtils.isNotEmpty(apps) ? apps : AppCacheManager.getApps();
        });
    }

    this.update = function (app, loadingIndicator) {
        return EntityManager.update(self.appManagerConfig, app, loadingIndicator)
            .then(function (updateAppResponse) {
                AppCacheManager.cacheApp(app);
                return updateAppResponse;
            });
    };

    this.delete = function (appId, loadingIndicator, overrideConfig) {
        return EntityManager.delete(ObjectUtils.override(self.appManagerConfig, overrideConfig),
            appId, loadingIndicator).then(function () {
            AppCacheManager.removeApp(appId);
        });
    };

    this.exist = function (appName, loadingIndicator) {
        return EntityManager.exist(self.appManagerConfig, appName, loadingIndicator);
    };

    this.download = function (apps, standAlone) {
        var encodedApps = encodeURIComponent(JSON.stringify({apps: apps, isStandalone:standAlone}));
        $window.open(System.baseUrl + self.appManagerConfig.backupUrl +
            '?data=' + encodedApps, '_blank');
    };

    this.rename = function (currentAppId, newAppId, loadingIndicator) {
        return EntityManager.rename(self.appManagerConfig, currentAppId, newAppId, loadingIndicator);
    };

    this.addPages = function (appName, pages, loadingIndicator) {
        var deferredRequest = $q.defer();

        this.get(appName).then(function (app) {
            app.pages = angular.isUndefined(app.pages) ? pages : app.pages.concat(pages);
            self.update(app, loadingIndicator).then(function (success) {
                deferredRequest.resolve(success);
            }, function (failure) {
                deferredRequest.reject(failure);
            });
        });

        return deferredRequest.promise;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .service('AppConverter', appConverterService);

function appConverterService(AppPageEvent, AppPageButtonPosition, AppPageButtonWidth, AppPageAction, AppPageServiceResponseAction,
							 PagePropertiesConverter, DataTypes, DateFormats, BackgroundStyles, AppOfflineAction, ConstantUtils) {
	var self = this;
	this.DEFAULT_IMAGE_WIDTH = 120;
	
	/*********************************
     ** fromServer *******************
     *********************************/
	
	function addConstantIfDefined(targetParent, key, sourceParent, isConstant) {
    	if (angular.isUndefined(sourceParent[key])) {
    		return;
    	}
    	targetParent[key] = isConstant ? {value: sourceParent[key], text: sourceParent[key]} : sourceParent[key]; 
    }
	
	function addServiceResponseHandler(targetParent, key, sourceParent) {
    	if (angular.isUndefined(sourceParent[key])) {
    		return;
    	}
    	
    	targetParent[key] = {};
    	targetParent[key].action = AppPageServiceResponseAction.getByValue(sourceParent[key].action);
    	addConstantIfDefined(targetParent[key], 'attribute', sourceParent[key], sourceParent[key].action !== 'popup');
    }
	
	function fromServerActions(actions) {
    	var $ = [];
    	actions.forEach(function(action) {
    		var current = {
    			event: {
    				type:			AppPageEvent.getByValue(action.event.type)
    			},
    			action: {
    				type:			AppPageAction.getByValue(action.action.type),
        			attribute:		{}
    			}
    		};
    		addConstantIfDefined(current.event, 'element', action.event, false);
    		addConstantIfDefined(current.action.attribute, 'main', action.action.attribute, action.action.type !== 'callFunction');
    		addConstantIfDefined(current.action.attribute, 'preFunction', action.action.attribute, false);
    		addServiceResponseHandler(current.action.attribute, 'onFailure', action.action.attribute);
    		addServiceResponseHandler(current.action.attribute, 'onSuccess', action.action.attribute);
    		
    		if (action.event.type === 'buttonClick') {
    			current.event.buttonPosition = angular.isDefined(action.event.attributes) ? AppPageButtonPosition.getByValue(action.event.attributes[0]) : AppPageButtonPosition.default;
    			current.event.buttonWidth = angular.isDefined(action.event.attributes) ? AppPageButtonWidth.getByValue(action.event.attributes[1]) : AppPageButtonWidth.default;
        	}
    		
    		$.push(current);
    	});
    	return $;
    }
	
	function fixParamDataTypes(param) {
		var type = param.dataTypeInfo.type;
		type = (type === 'READONLY') ? 'read only' : type;	//the server serializes datatype enum by name and not by value. 
		param.dataTypeInfo.dataType = DataTypes.getByValue(type);
		
		if (angular.isDefined(param.dataTypeInfo.service)) {
			param.dataTypeInfo.service = {properties: param.dataTypeInfo.service};
		}
		
		if (type === 'DATE') {
			if (angular.isDefined(param.dataTypeInfo.format)) {
				param.dataTypeInfo.format = DateFormats.getByValue(param.dataTypeInfo.format);
			}
			if (angular.isDefined(param.paramValue)) {
				var date = param.paramValue === "0" ? 0 : new Date(/^\d+$/.test(param.paramValue) ? +param.paramValue : param.paramValue);
				param.dataTypeInfo.value = date;
				param.paramValue = date;
			}
		}
		
		return param;
	}
	
	function fromServerPages(pages) {
		var $ = [];
		if (angular.isUndefined(pages)) {
			return $;
		}
    	pages.forEach(function(page) {
    		$.push({
    			name: 			page.name,
    			title:			page.title,
    			params:			page.params.map(fixParamDataTypes),
    			multiRecord: {
    				params:			page.multiRecord.params.map(fixParamDataTypes),
    				type:			page.multiRecord.type,
    				isSearchable: 	page.multiRecord.isSearchable,
    				isHidden:		page.multiRecord.isHidden,
    				startIndex:		page.multiRecord.startIndex
    			},
    			actions:			fromServerActions(page.actions),
    			javascript: 	page.javascript,
    			shouldSkip:		page.shouldSkip,
    			hasMenu:		page.hasMenu,
    			inMenu:			page.inMenu
    		});
    	});
    	return $;
	}
	
	function fromServerTheme (theme) {
		if (angular.isUndefined(theme)) {
			return undefined;
		}
		var $ = {};
		$.value = theme.themeBase;
		$.hex = theme.themeColor;
		$.captionColor = {hex: theme.captionColor};
		$.labelColor = {hex: theme.labelColor};
		$.backgroundColor = {hex: theme.backgroundColor};
		return $;
	}
	
	function fromServerOfflineSupport(offlineSupport) {
		if (angular.isUndefined(offlineSupport)) {
			return undefined;
		}
    	var $ = angular.copy(offlineSupport);
    	$.services.forEach(function(serviceOfflineConfig) {
    		serviceOfflineConfig.action = AppOfflineAction.getByValue(serviceOfflineConfig.action);
    	});
    	return $;
    }
	
    this.fromServer = function (app) {
    	var $ = {
    		name:				app.name,
    		description:		app.description,
    		serviceNames:		app.serviceNames,
    		keepAlive:			app.keepAlive,
    		direction:			app.direction,
    		theme:				fromServerTheme(app.theme),
    		backgroundPath: 	app.backgroundPath,
    		backgroundStyle:	BackgroundStyles.getByValue(app.backgroundStyle),
    		logoPath:			app.logoPath,
    		logoWidth:			app.logoWidth !== 0 ? app.logoWidth : self.DEFAULT_IMAGE_WIDTH,
    		pages:				fromServerPages(app.pages),
    		loginPage:			app.loginPage,
    		javascript:			app.javascript,
    		css:				app.css,
    		offlineSupport:		fromServerOfflineSupport(app.offlineSupport),
    		createdBy:			app.createdBy,
    		lastModified:		app.lastModified
    	};
    	return $;
    };
    
    /*********************************
     ** toServer *********************
     *********************************/
    
    function addFlatConstantIfDefined(targetParent, key, sourceParent) {
    	if (angular.isUndefined(sourceParent[key])) {
    		return;
    	}
    	targetParent[key] = angular.isDefined(sourceParent[key].value)? sourceParent[key].value : sourceParent[key];
    }
    
    function addFlatServiceResponseHandler(targetParent, key, sourceParent) {
    	if (angular.isUndefined(sourceParent[key])) {
    		return;
    	}
    	
    	targetParent[key] = {};
    	addFlatConstantIfDefined(targetParent[key], 'action', sourceParent[key]);
    	addFlatConstantIfDefined(targetParent[key], 'attribute', sourceParent[key]);
    }
    
    function toServerActions(actions) {
    	var $ = [];
    	actions.forEach(function(action) {
    		var current = {
    			event: {
    				type:			action.event.type.value
    			},
    			action: {
    				type:			action.action.type.value,
        			attribute:		{}
    			}
    		};
    		addFlatConstantIfDefined(current.event, 'element', action.event);
    		addFlatConstantIfDefined(current.action.attribute, 'main', action.action.attribute);
    		addFlatConstantIfDefined(current.action.attribute, 'preFunction', action.action.attribute);
    		addFlatServiceResponseHandler(current.action.attribute, 'onFailure', action.action.attribute);
    		addFlatServiceResponseHandler(current.action.attribute, 'onSuccess', action.action.attribute);
    		
    		if (action.event.type.value === 'buttonClick') {
        		current.event.attributes = [action.event.buttonPosition.value, action.event.buttonWidth.value];
        	}
    		
    		$.push(current);
    	});
    	return $;
    }
    
    function toServerPages(pages) {
    	var $ = [];
    	pages.forEach(function(page) {
    		$.push({
    			name: 			page.name,
    			title:			page.title,
    			params:			page.params.map(PagePropertiesConverter.toServerParam),
    			multiRecord: {
    				params:			page.multiRecord.params.map(PagePropertiesConverter.toServerParam),
    				type:			page.multiRecord.type,
    				isSearchable: 	page.multiRecord.isSearchable,
    				isHidden:		page.multiRecord.isHidden,
    				startIndex:		page.multiRecord.startIndex
    			},
    			actions:		toServerActions(page.actions),
    			javascript: 	page.javascript,
    			shouldSkip:		page.shouldSkip,
    			hasMenu:		page.hasMenu,
    			inMenu:			page.inMenu
    		});
    	});
    	return $;
    }
    
    function toServerKeepAlive(appServices) {
    	var $ = [];
    	appServices.forEach(function(appService) {
    		if (appService.keepAlive === true) {
    			$.push(appService.name);
    		}
    	});
    	return $;
    }
    
    function toServerOfflineSupport(offlineSupport) {
    	var $ = angular.copy(offlineSupport);
    	$.services.forEach(function(serviceOfflineConfig) {
    		serviceOfflineConfig.action = ConstantUtils.flatten(serviceOfflineConfig.action);
    	});
    	return $;
    }
    
    this.toServer = function (app) {
    	var $ = {
    		name:				app.name,
    		description:		app.description,
    		serviceNames:		app.serviceNames,
    		keepAlive:			toServerKeepAlive(app.services),
    		direction:			app.direction,
    		theme:				PagePropertiesConverter.toServerTheme(app.theme),
    		backgroundPath:		angular.isDefined(app.backgroundBlob) ? app.backgroundBlob.name : app.backgroundPath,
    		backgroundStyle:	angular.isDefined(app.backgroundStyle) ? app.backgroundStyle.value : undefined,
    		logoPath:			angular.isDefined(app.logoBlob) ? app.logoBlob.name : app.logoPath,
    		logoWidth:			app.logoWidth,
    		pages:				toServerPages(app.pages),
    		loginPage:			app.loginPage.value !== '' ? app.loginPage.value : undefined,
    		javascript:			app.javascript,
    		css:				app.css,
    		offlineSupport:		app._enableOffline ? toServerOfflineSupport(app.offlineSupport) : undefined,
    		createdBy:			app.createdBy
    	};
    	return $;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .controller('AppServicesGridCtrl', appServicesGridCtrl);

function appServicesGridCtrl($scope, uiGridConstants) {
    activate();

    function activate() {
        initColumnDefs();
        initColumnFilter();
    }

    function initColumnDefs() {
        $scope.columnDefs = [
            {
                name: 'name',
                displayName: 'Service Name',
                enableFiltering: false,
                width: '*'
            },
            {
                name: 'keepAlive',
                displayName: 'Keep Alive',
                visible: $scope.allowPartial,
                enableFiltering: false,
                width: "95",
                cellTemplate: '<ap-checkbox model="row.entity.keepAlive" should-disable="::false" in-table="::true"></ap-checkbox>'
            },
            { 	
            	name: 'type', 
            	field: 'type',
            	width: '100',
            	filter: { selectOptions: [{ value: 'forms', label: 'Forms' },
  	                                      { value: 'html', label: 'HTML' },
  	                                      { value: 'db', label: 'DB' },
  	                                      { value: 'js', label: 'JS' }],
  	                      type: uiGridConstants.filter.SELECT }
  			},
            {
                name: 'isEnabled',
                displayName: 'Status',
                width: '70',
            	filter: { selectOptions: [{ value: 'true', label: 'Active' },
  	                                      { value: 'false', label: 'Disabled' }],
  	                      type: uiGridConstants.filter.SELECT },
                cellTemplate: "<div class='aura-grid-column'>{{COL_FIELD ? 'Active' : 'Disabled'}}</div>"
            },
            {
                name: 'lastModified',
                displayName: 'Modified',
                enableFiltering: false,
                cellFilter: 'simpleDate',
                sort: {
                    direction: uiGridConstants.DESC,
                    priority: 1
                },
                width: '140'
            },
            {
                name: 'createdBy',
                displayName: 'Created By',
                enableFiltering: false,
                width: '120'
            }
        ];
    }

    function initColumnFilter() {
        $scope.filteredColumns = ['name'];
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .controller('AppStaticLovListCtrl', appStaticLovListCtrl);

function appStaticLovListCtrl($scope, $q, DialogManager) {
    
    $scope.nextItem = function () {
        return {};
    };
    
    $scope.validateItem = function (it) {
        return it && !!it.name;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .controller('AppPageTableFieldsTableCtrl', appPageTableFieldsTableCtrl);

function appPageTableFieldsTableCtrl($scope, DataTypeHandler, ObjectUtils) {
    activate();

    function activate() {
    	$scope.onDataTypeInfoSelect = DataTypeHandler.handleDataTypeInfoSelect;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .controller('AppPagesGridCtrl', appPagesGridCtrl);

function appPagesGridCtrl($scope, $route, Permissions, uiGridConstants, ActionBuilder, PageNavigator, PageManager, ObjectUtils) {
	activate();

    function activate() {
        initColumnDefs();
        initColumnFilter();
        
        if (angular.isDefined($scope.pages)) {
        	initPages();
        	initPagesActions();
        	initPagesFunctions();
        }
    }

    function initPages() {
        $scope.pages.forEach(function (page) {
            page.editingName = false;
        });
    }

    function initPagesActions() {
        $scope.pages.forEach(function (page) {
            initPageActions(page);
        });
    }

    function initPageActions(page) {
        if (angular.isUndefined(page)) {
            return;
        }

        var actions = [];
        actions.push(ActionBuilder.build("Edit", "btn-blue", editPage, false, "fa fa-pencil", true, true));
        actions.push(ActionBuilder.build("Duplicate", "btn-green", duplicatePage, false, "fa fa-copy", true, true));
        actions.push(ActionBuilder.build("Rename", "btn-yellow", renamePage, false, "fa fa-edit", true, true));

        page.actionsData = {actions: actions};
    }

    function initPagesFunctions() {
        $scope.pages.forEach(function (page) {
        	page.editPage = editPage;
        });
    }

    function initColumnDefs() {
    	var nameCellTemplate =
			'<ap-edited-input control-buttons="row.entity.editingName" model="row.entity.name"' +
            ' edited-name="pageFileNameInput"' +
            ' detail-type="link" detail-callback="row.entity.editPage(row.entity)">' +
            '</ap-edited-input>';
    	
        $scope.columnDefs = [
            {
                name: 'name',
                displayName: 'Page Name',
                width: "*",
                cellTemplate: nameCellTemplate
            },
            {
                name: 'shouldSkip',
                displayName: 'Skip',
                width: "95",
                cellTemplate: '<ap-checkbox model="row.entity.shouldSkip" should-disable="::false" in-table="::true"></ap-checkbox>'
            },
            {
                name: 'hasMenu',
                displayName: 'Has Menu',
                width: "95",
                cellTemplate: '<ap-checkbox model="row.entity.hasMenu" should-disable="::false" in-table="::true"></ap-checkbox>'
            },
            {
                name: 'inMenu',
                displayName: 'In Menu',
                width: "95",
                cellTemplate: '<ap-checkbox model="row.entity.inMenu" should-disable="::false" in-table="::true"></ap-checkbox>'
            },
            {
                name: 'numOfFields',
                displayName: 'Fields',
                width: "110",
                cellTemplate: '<span>{{::row.entity.params.length}}</span>'
            },
            {
                name: 'numOfMultiRecordFields',
                displayName: 'MultiRecord',
                width: "110",
                cellTemplate: '<span>{{::row.entity.multiRecord.params.length}}</span>'
            },
            {
                name: 'numOfActions',
                displayName: 'Actions',
                width: "120",
                cellTemplate: '<span>{{::row.entity.actions.length}}</span>'
            }
        ];

	    $scope.columnDefs.push({
	        name: 'actionData',
	        displayName: '',
	        enableSorting: false,
	        enableColumnMenu: false,
	        width: "220",
	        cellTemplate: '<ap-action-panel action-data="row.entity.actionsData" action-context="row.entity"></ap-action-panel>'
	    });
    }
    
    function initColumnFilter() {
        $scope.filteredColumns = ['fileName', 'description'];
    }

    function editPage(page) {
    	$scope.editCallback({name: page.name});
    }
    
    function duplicatePage(page) {
    	$scope.duplicateCallback({name: page.name});
    }

    function renamePage(page) {
    	$scope.renameCallback({name: page.name});
    }
    
    $scope.removePages = function (pages) {
    	$scope.batchRemoveCallback({pages: pages});
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .controller('AppPageSelectorCtrl', appPageSelectorCtrl);

function appPageSelectorCtrl($scope, ConstantUtils) {
    activate();

    function preparePageNames() {
    	$scope.pageNames = [];
    	$scope.pages.forEach(function(page) {
    		var isReadyIcon = page.ui_ready? '<i class="fa fa-check" style="color: #5cb85c"></i> ' :
    										 '<i class="clip clip-new" style="color: #C83A2A"></i> ';
			$scope.pageNames.push({
				value: page.name, 
				text: isReadyIcon + page.name
			});
    	});
    }
    
    function activate() {
    	if (angular.isUndefined($scope.currentPageIndex)) {
    		return;
    	}
    	preparePageNames();
    	$scope.currentPageConstant = ConstantUtils.getByValue($scope.pages[$scope.currentPageIndex].name, {values: $scope.pageNames});
    }
    
    $scope.onSelect = function (constant) {
    	$scope.onSelectCallback({name: constant.value});
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .controller('AppPageNamesListCtrl', appPageNamesListCtrl);

function appPageNamesListCtrl($scope, $q, DialogManager) {
    
    $scope.onDelete = function (index) {
    	var deferred = $q.defer();
    	var pageName = $scope.pages[index].name;
    	return DialogManager.openConfirmationDialog({
            title: 'Delete page',
            description: (angular.isDefined(pageName)? pageName : 'Untitled page') + ' will be deleted.',
            onConfirmCallback: function(){
            	deferred.resolve();
            },
            onCancelCallback: function(){
            	deferred.reject();
            }
        });
    };
    
    $scope.nextItem = function () {
        return {ui_isNew : true,
        		shouldSkip: false,
        		hasMenu: true,
        		inMenu: true};
    };
    
    $scope.validateItem = function (it) {
        return it && !!it.name;
    };
    
    $scope.validateHtmlSuffix = function(index) {
    	if (angular.isUndefined($scope.pages[index].name)) {
    		return;
    	}
    	
		if (!$scope.pages[index].name.endsWith('.html')) {
			$scope.pages[index].name = $scope.pages[index].name + '.html';
		}
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .controller('AppPageFieldsTableCtrl', appPageFieldsTableCtrl);

function appPageFieldsTableCtrl($scope, DataTypeHandler, ObjectUtils) {
    activate();

    function activate() {
    	$scope.onDataTypeInfoSelect = DataTypeHandler.handleDataTypeInfoSelect;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .controller('AppPageActionsTableCtrl', appPageActionsTableCtrl);

function appPageActionsTableCtrl($scope, SortableUtils) {

    function activate() {
    	$scope.tableSortingOptions = SortableUtils.getTableSortingOptions();
    }
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .controller('AppPageActionDialogCtrl', appPageActionDialogCtrl);

function appPageActionDialogCtrl($scope, $mdDialog, serviceNames, pageNames, editedAction,
								 AppPageEvent, AppPageButtonPosition, AppPageButtonWidth,
								 AppPageAction, AppPageServiceResponseAction, ConstantUtils, ObjectUtils) {
    function activate() {
    	prepareConstants();
    	prepareServiceNames();
    	preparePageNames();
    	setInitialValues();
    }
    
    function prepareConstants() {
    	$scope.events = AppPageEvent.values;
    	$scope.buttonPositions = AppPageButtonPosition.values;
    	$scope.buttonWidths = AppPageButtonWidth.values;
    	$scope.actionTypes = AppPageAction.values;
    	$scope.onServiceSuccessActions = AppPageServiceResponseAction.successValues;
    	$scope.onServiceFailureActions = AppPageServiceResponseAction.failureValues;
    }
    
    function prepareServiceNames() {
    	$scope.serviceNames = [];
    	serviceNames.forEach(function(serviceName) {
    		$scope.serviceNames.push({value: serviceName, text: serviceName});
    	});
    }
    
    function preparePageNames() {
    	$scope.pageNames = [];
    	pageNames.forEach(function(pageName) {
    		$scope.pageNames.push({value: pageName, text: pageName});
    	});
    }
    
    function setInitialValues() {
    	if (angular.isDefined(editedAction)) {
    		$scope.action = editedAction;
    		
    		if ($scope.action.action.type.value === 'executeService') {
        		splitAttributes();
        	}
    		return;
    	}
    	
    	$scope.action = {
    		event: 	{type: 				$scope.events[0],
    				 buttonPosition: 	$scope.buttonPositions[0],
    				 buttonWidth: 		$scope.buttonWidths[0]},
    		action:	{type: $scope.actionTypes[0], attribute: {}}
    	};
    	$scope.onActionTypeSelect($scope.action.action.type);
    }
    
    $scope.onEventSelect = function (constant) {
    	$scope.action.event.element = undefined;
    	
    	if (constant.value === 'tableClick') {
    		$scope.action.action.type = AppPageAction.getByValue('navigateToPage');
    	}
    };
    
    $scope.onActionTypeSelect = function (constant) {
    	$scope.action.action.attribute = {};
    	if (constant.value === 'executeService') {
    		$scope.action.action.attribute.onSuccess = {};
    		$scope.action.action.attribute.onFailure = {};
    		$scope.action.action.attribute.onSuccess.action = AppPageServiceResponseAction.successDefault;
    		$scope.action.action.attribute.onFailure.action = AppPageServiceResponseAction.failureDefault;	
    	}
    };
    
    $scope.onSuccessActionSelect = function (constant) {
    	$scope.action.action.attribute.onSuccess.attribute1 = (constant.value === 'callFunction') ? 
		    												  $scope.action.action.attribute.main.value + '_onSuccess' :
		    												  undefined;
    	$scope.action.action.attribute.onSuccess.attribute2 = undefined;
    };
    
    $scope.onFailureActionSelect = function (constant) {
    	$scope.action.action.attribute.onFailure.attribute1 = (constant.value === 'callFunction') ? 
    														  $scope.action.action.attribute.main.value + '_onFailure' :
    														  undefined;
    	$scope.action.action.attribute.onFailure.attribute2 = undefined;
    };
    
    $scope.keyCodeParser = function (keyEvent) {
        keyEvent.stopPropagation();
        keyEvent.preventDefault();
        $scope.action.event.element = keyEvent.keyCode;
        $scope.showClearKey = true;

        return false;
    };
    
    function splitAttributes() {
    	var attribute = $scope.action.action.attribute.onSuccess.attribute;
    	var pos;
    	
    	if ($scope.action.action.attribute.onSuccess.action.value === 'popupAndNavigate') {
    		attribute = ConstantUtils.flatten(attribute);
    		pos = attribute.lastIndexOf(':');
    		$scope.action.action.attribute.onSuccess.attribute1 = attribute.substring(0, pos);
    		$scope.action.action.attribute.onSuccess.attribute2 = ConstantUtils.getByValue(attribute.substring(pos + 1), {values: $scope.pageNames});
    	} else if ($scope.action.action.attribute.onSuccess.action.value === 'navigateToPage') {
    		$scope.action.action.attribute.onSuccess.attribute2 = attribute;
    	} else {
    		$scope.action.action.attribute.onSuccess.attribute1 = attribute;
    	}
    	
    	attribute = $scope.action.action.attribute.onFailure.attribute;
    	
    	if ($scope.action.action.attribute.onFailure.action.value === 'popupAndNavigate') {
    		attribute = ConstantUtils.flatten(attribute);
    		pos = attribute.lastIndexOf(':');
    		$scope.action.action.attribute.onFailure.attribute1 = attribute.substring(0, pos);
    		$scope.action.action.attribute.onFailure.attribute2 = ConstantUtils.getByValue(attribute.substring(pos + 1), {values: $scope.pageNames});
    	} else if ($scope.action.action.attribute.onFailure.action.value === 'navigateToPage') {
    		$scope.action.action.attribute.onFailure.attribute2 = attribute;
    	} else {
    		$scope.action.action.attribute.onFailure.attribute1 = attribute;
    	}
    }
    
    function join2Attributes(attribute1, attribute2) {
    	if (angular.isDefined(attribute1) && angular.isDefined(attribute2)) {
    		return attribute1 + ':' + attribute2;
    	} else if (angular.isDefined(attribute1)) {
    		return attribute1;
    	} else {
    		return attribute2;
    	}
    }
    
    function joinServiceAttributes() {
    	$scope.action.action.attribute.onSuccess.attribute = join2Attributes(ConstantUtils.flatten($scope.action.action.attribute.onSuccess.attribute1), 
    																		 ConstantUtils.flatten($scope.action.action.attribute.onSuccess.attribute2));
    	$scope.action.action.attribute.onFailure.attribute = join2Attributes(ConstantUtils.flatten($scope.action.action.attribute.onFailure.attribute1),
    																		 ConstantUtils.flatten($scope.action.action.attribute.onFailure.attribute2));
    	
    	$scope.action.action.attribute.onSuccess.attribute1 = undefined;
    	$scope.action.action.attribute.onSuccess.attribute2 = undefined;
    	$scope.action.action.attribute.onFailure.attribute1 = undefined;
    	$scope.action.action.attribute.onFailure.attribute2 = undefined;
    }
    
    $scope.onConfirm = function () {
    	if ($scope.action.action.type.value === 'executeService') {
    		joinServiceAttributes();
    	}
        $mdDialog.hide($scope.action);
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .controller('AppImageDialogCtrl', appImageDialogCtrl);

function appImageDialogCtrl($scope, $mdDialog, param, ObjectUtils) {
    
    function activate() {
    	$scope.image = {
			id: param.id.name,
			url: param.paramValue,
			width: param.dataTypeInfo.format,
			ui_isNew: param.ui_isNew
    	};
    }    
    
    $scope.onConfirm = function () {
        $mdDialog.hide($scope.image);
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .controller('AppVisualizerStep6Ctrl', appVisualizerStep6Ctrl);

function appVisualizerStep6Ctrl($scope, AppOfflineAction, DialogManager, ObjectUtils) {
	
	function activate() {
		activateCommonJavascript();
		activateOffline();
	}
	
	/**************************
     *   Common JavaScript 	  *
     **************************/
	
	function activateCommonJavascript() {
		$scope.app.javascript = ObjectUtils.defaultValue($scope.app.javascript, $scope.getDefaultJavascript());
		updateJavascriptProperty('app.loginPage', $scope.app.loginPage.value);
	}
	
	function updateJavascriptProperty(key, value) {
		value = angular.isUndefined(value) ? '' : 
				angular.isString(value) ? '\''+ value + '\'' :
				value;
		
		var newProperty = key + ' = ' + value + ';\r\n';
		$scope.app.javascript = $scope.app.javascript.replace(new RegExp(key + '\\s*=[^\r\n]*\r\n'), newProperty);
		
		if ($scope.app.javascript.indexOf(newProperty) === -1) {	// no replacement was made
			$scope.app.javascript += '\r\n' + newProperty;
		}
	}	
	
	$scope.getDefaultJavascript = function() {
		return 	'var app = {};\r\n' +
				'app.serviceManagerHost = \'\';		// to execute API calls on other server\r\n' +
				'app.serviceCallTimeout = 60000;		// milliseconds to wait for service calls to finish\r\n' +
				'app.mock = false;					// true to request mock response from all services';
	};
	
	$scope.resetToDefault = function() {
		DialogManager.openConfirmationDialog({
            title: 'Reset Javascript',
            description: 'Changes will be lost. Continue?',
            onConfirmCallback: function() {
            	$scope.app.javascript = undefined;
            	activateCommonJavascript();
            }
        });
	};
	
	/**************************
     *   Offline          	  *
     **************************/
	var OFFLINE_SYNC_FILENAME = "sync.html";
	
	function activateOffline() {
		$scope.app._enableOffline = ObjectUtils.defaultValue($scope.app._enableOffline, angular.isDefined($scope.app.offlineSupport));
		$scope.syncPageVacant = validateSyncPageVacant();
		$scope.offlineActions = AppOfflineAction.values;
		updateOfflineSupportServices();
	}
	
	function validateSyncPageVacant() {
		for (var i = 0; i < $scope.app.pages.length; i++) {
			if ($scope.app.pages[i].name.toLowerCase() === OFFLINE_SYNC_FILENAME.toLowerCase()) {
				return false;
			}
		}
		return true;
	}
	
	function findExisting(allServices, serviceName) {
		if (angular.isUndefined(allServices)) {
			return undefined;
		}
		for (var i = 0; i < allServices.length; i++) {
			var current = allServices[i];
			if (current.service === serviceName) {
				return current;
			}
		}
		return undefined;
	}
	
	function updateOfflineSupportServices() {
		if (angular.isUndefined($scope.app.offlineSupport)) {
			$scope.app.offlineSupport = {};
		}
		
		var $ = angular.isDefined($scope.app.offlineSupport.services) ? [].concat($scope.app.offlineSupport.services) : [];
		$.forEach(function(service) {
			service.usage = '';
		});
		
		var serviceName, newServiceConfig, newServiceUsage;
		$scope.app.pages.forEach(function(page) {
			
			page.actions.forEach(function(action) {
				if (action.action.type.value === 'executeService') {
					serviceName = action.action.attribute.main.value;
					newServiceConfig = findExisting($, serviceName);
					newServiceUsage = page.name + ': ' + action.event.type.text + (angular.isDefined(action.event.element) ? ' - ' + action.event.element : '');
					
					if (newServiceConfig === undefined) {
						$.push({
							service: 	serviceName,
							action:		AppOfflineAction.default,
							usage:		newServiceUsage
						});
					} else {
						newServiceConfig.usage += '<br/>' + newServiceUsage;
					}
				}
			});
						
			page.params.forEach(function(param) {
				if (param.dataTypeInfo.dataType.value === 'LOV') {
					serviceName = param.dataTypeInfo.service.properties.name;
					newServiceConfig = findExisting($, serviceName);
					newServiceUsage = page.name + ': lov - ' + param.id.name;
					
					if (newServiceConfig === undefined) {
						$.push({
							service:	serviceName,
							action:		AppOfflineAction.default,
							usage:		newServiceUsage
						});
					} else {
						newServiceConfig.usage += '<br/>' + newServiceUsage;
					}
				}
			});
		});
		
		$scope.app.offlineSupport.services = $;
	}
	
	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .controller('AppVisualizerStep5Ctrl', appVisualizerStep5Ctrl);

function appVisualizerStep5Ctrl($scope, ToastManager, WizardHandler, DocumentNavigator, CollectionUtils) {
	activate();
	
	function activate() {
		WizardHandler.wizard('appVisualizerWizard').setCompleted(4);	//indices starting from 0
		refreshPageNames();
	}
	
    $scope.backToStep2 = function () {
    	WizardHandler.wizard('appVisualizerWizard').goTo(1);
    	DocumentNavigator.goTop('slow');
    	return true;
    };
    
    $scope.editPage = function (name) {
    	var pageIndex = CollectionUtils.indexOf($scope.app.pages, name, 'name');
    	$scope.app.ui_currentPageIndex = pageIndex;
    	WizardHandler.wizard('appVisualizerWizard').goTo(2);
    	DocumentNavigator.goTop('slow');
    };
    
    function extractNameAndIndex(originalFileName) {
    	var originalName = originalFileName.replace('.html', '');
    	var seperatorIndex = originalName.lastIndexOf('_');
    	if (seperatorIndex === -1 || seperatorIndex === (originalName.length - 1)) {
    		return [originalName, 1];
    	}
    	var indexSuffix = originalName.substring(seperatorIndex + 1);
    	if (isNaN(indexSuffix)) {
    		return [originalName, 1];
    	}
    	return [originalName.substring(0, seperatorIndex), indexSuffix];
    }
    
    function isPageExists (name) {
    	var $ = false;
    	$scope.app.pages.every(function(page){
    		if (page.name === name) {
    			$ = true;
    			return false;
    		}
    		return true;
    	});
    	return $;
    }
    
    function toPageNames(pages) {
        return angular.isUndefined(pages) ? [] :
            pages.map(function (page) {
        		return page.name;
            });
    }
    
    function refreshPageNames() {
    	if (angular.isDefined($scope.app.loginPage) && angular.isString($scope.app.loginPage)) {
    		$scope.app.loginPage = {value: $scope.app.loginPage, text: $scope.app.loginPage};
    	}
    	var currentValid = false;
    	$scope.pageNames = [{value: '', text: '(none)'}];
    	$scope.app.pages.forEach(function(page) {
	    	$scope.pageNames.push({value: page.name, text: page.name});
	    	if (angular.isDefined($scope.app.loginPage) && page.name === $scope.app.loginPage.value) {
	    		currentValid = true;
	    	}
    	});
    	
    	if (!currentValid) {
    		$scope.app.loginPage = $scope.pageNames[0];
    	}
    }
    
    function generateNameForCopy (originalFileName) {
    	var namePrefix = extractNameAndIndex(originalFileName);
    	var index = namePrefix[1];
    	var $;
    	do {
    		index++;
        	$ = namePrefix[0] + '_' + index + '.html';
    	} while (isPageExists($));
    	return $;
     }
    
    $scope.duplicatePage = function (name) {
    	var pageIndex = CollectionUtils.indexOf($scope.app.pages, name, 'name');
    	var copy = angular.copy($scope.app.pages[pageIndex]);
    	var copyName = generateNameForCopy(name);
    	copy.name = copyName;
    	$scope.app.pages.push(copy);
    };
    
    $scope.renamePage = function (name) {
    	WizardHandler.wizard('appVisualizerWizard').goTo(1);
    	DocumentNavigator.goTop('slow');
    };
    
    $scope.removePages = function (pages) {
    	pages.forEach(function(page) {
    		var pageIndex = CollectionUtils.indexOf($scope.app.pages, page.name, 'name');
    		$scope.app.pages.splice(pageIndex, 1);
    	});
    	$scope.app.ui_currentPageIndex = $scope.app.pages.length === 0 ? 0 :$scope.app.pages.length - 1;
    	$scope.appVisualizerStep5Form.appPages.$validate();
    	refreshPageNames();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .controller('AppVisualizerStep4Ctrl', appVisualizerStep4Ctrl);

function appVisualizerStep4Ctrl($scope, $mdDialog, AppPageAction, PagePropertiesConverter, JsParser, HttpHandler, AppVisualizerSuggestions,
								WizardHandler, DialogManager, ToastManager, DocumentNavigator, CollectionUtils, StringUtils, ObjectUtils) {
	var jsFunctionTemplateTitle = 'function {0}({1})';
    var jsFunctionTemplateBody = 	' {\n' +
    								'{2}\n'	+
    								'}\n\n';
    var jsExampleBody = '	//Fields.set(fieldName, value);\n' +
						'	//Services.call(serviceName, successFunction, failureFunction);\n' +
						'	//var popupMsg = Storage.get(\'PopupMessages\');';
    var jsFunctionTemplate = jsFunctionTemplateTitle + jsFunctionTemplateBody;
	
    
    function generateJsFunction(functionName, params, contents, overwriteExisting) {
    	if (angular.isUndefined(functionName)) {
    		return;
    	}
    	if (angular.isUndefined($scope.currentPage.javascript)) {
    		$scope.currentPage.javascript = '';
    	}
    	var titleStartIndex = $scope.currentPage.javascript.indexOf(jsFunctionTemplateTitle.format(functionName, params));
    	if (titleStartIndex !== -1) {
    		if (!overwriteExisting) {
    			return;
    		}
    		var existingFunction = JsParser.extractFunction($scope.currentPage.javascript, titleStartIndex);
    		if (existingFunction !== '') {
        		$scope.currentPage.javascript = $scope.currentPage.javascript.replace(existingFunction, existingFunction.replace(/^/gm, "//")).trimLeft();
    		}
    	}
    	
    	$scope.currentPage.javascript += jsFunctionTemplate.format(functionName, params, contents);
    }
    
    function generateJsFunctionByAction(action) {
    	if (action.action.type.value === 'executeService') {
    		if (action.action.attribute.onSuccess.action.value === 'callFunction') {
    			generateJsFunction(action.action.attribute.main.value + '_onSuccess', '', jsExampleBody, false);
    		}
			if (action.action.attribute.onFailure.action.value === 'callFunction') {
				generateJsFunction(action.action.attribute.main.value + '_onFailure', '', jsExampleBody, false);
			}
		} else if (action.action.type.value === 'callFunction') {
			generateJsFunction(action.action.attribute.main,
							   action.event.type.value === 'tableClick' ? 'row, col, rowCells' : '',
							   action.event.type.value === 'tableClick' ? generateJsTableClickFunctionBody() : jsExampleBody, 
							   false);
		}
    }
    
    function generateActionsJs() {
    	$scope.currentPage.actions.forEach(function(action) {
    		generateJsFunctionByAction(action);
    		generateTablePreFunction(action);
    	});
    }
    
    function toPageNames(pages) {
        return angular.isUndefined(pages) ? [] :
            pages.map(function (page) {
        		return page.name;
            });
    }
    
    $scope.deleteAction = function (index) {
    	$scope.currentPage.actions.splice(index, 1);
    };

    
    /*************************************
     ** onTableClick() special handling **
     *************************************/
    
    function generateJsTableClickFunctionBody() {
    	var $ = '';
    	$scope.currentPage.multiRecord.ui_paramNamesIncludingHidden.forEach(function(paramName) {
    		$ += '	Storage.copyFromIndex("{0}", row);\n'.format(paramName);
    	});
    	return $;
    }
    
    function generatePreFunction(action) {
    	var functionName =  'on' + action.event.type.value.capitalize() +
    						'_pre' + action.action.type.value.capitalize();
    	
    	generateJsFunction(	functionName,
    						'row, col, rowCells',
    						generateJsTableClickFunctionBody(),
    						false);
    	
    	return functionName;
    }
    
    function generateTablePreFunction(action) {
    	if (action.event.type.value !== 'tableClick') {
    		return;
    	}
    	
    	switch (action.action.type.value) {
    	case 'executeService':
    	case 'navigateToPage':
    		return generatePreFunction(action);
    		
    	default:
    		return;
    	}
    }
    
    /*********************************
     ** Page & Dialogs ***************
     *********************************/
    
    $scope.openActionDialog = function (editedActionIndex) {
    	$mdDialog.show({
            controller: 'AppPageActionDialogCtrl',
            templateUrl: 'app/modules/app/views/visualizer/page/appPageActionDialog.html',
            locals: {
            	serviceNames: $scope.app.serviceNames,
            	pageNames: toPageNames($scope.app.pages),
            	editedAction: angular.isDefined(editedActionIndex)? angular.copy($scope.currentPage.actions[editedActionIndex]): undefined
            },
            bindToController: true
        }).then(function (action) {
        	generateJsFunctionByAction(action);
        	action.action.attribute.preFunction = generateTablePreFunction(action);
        	if (angular.isDefined(editedActionIndex)) {
        		$scope.currentPage.actions[editedActionIndex] = action;
        	} else {
        		$scope.currentPage.actions.push(action);
        	}
        });
    };
    
    /*********************************
     ** Activate *********************
     *********************************/
    
    function onJavascriptDownload(code) {
    	if (StringUtils.isNonWhitespaces($scope.currentPage.javascript)) {
			$scope.currentPage.javascript = JsParser.merge($scope.currentPage.javascript, code, $scope.app.ui_functionsNoOverride);
		} else {
			$scope.currentPage.javascript = code;
		}
    }
    
    function generateConvertersAndLovJs() {
    	if ($scope.currentPage.params.length === 0) {
    		return;
    	}
    	
    	$scope.loadingIndicator.isLoading = true;
    	
        HttpHandler.patch('/Macro/JsGenerator', $scope.currentPage.params.map(PagePropertiesConverter.toServerParam))
            .success(function (response, status) {
            	$scope.loadingIndicator.isLoading = false;
            	if (status === 200) {
            		onJavascriptDownload(response.data);
            	} else {
            		ToastManager.showWarning('Return to previous step and click "Next" again to retry', 'Javascript return code: ' + status);
            	}
            })
            .error(function (response, status) {
            	$scope.loadingIndicator.isLoading = false;
            	ToastManager.showWarning('Return to previous step and click "Next" again to retry', 'Javascript download failure');
            });
    }
    
    function activate() {
    	$scope.currentPage = $scope.app.pages[$scope.app.ui_currentPageIndex];
    	$scope.currentPage.actions = ObjectUtils.defaultValue($scope.currentPage.actions, []);
    	$scope.loadingIndicator = {isLoading: false, loadingText: "Downloading JavaScript..."};
    	$scope.jsEditorHolder = {};
    	$scope.appVisualizerAutoCompleteArray = AppVisualizerSuggestions.asAutoCompleteArray();
    	generateActionsJs();
    	generateConvertersAndLovJs();
    }
    
    activate();
    
    
    /*********************************
     ** Wizard ***********************
     *********************************/
    
    $scope.onPageSelect = function (name) {
    	$scope.app.pages[$scope.app.ui_currentPageIndex].ui_ready = true;
    	
    	var previousPageIndex = $scope.app.ui_currentPageIndex;
    	$scope.app.ui_currentPageIndex = CollectionUtils.indexOf($scope.app.pages, name, 'name');
    	if ($scope.app.ui_currentPageIndex === previousPageIndex) {
    		return;
    	}
    	
    	WizardHandler.wizard('appVisualizerWizard').setCompleted(3);
    	activate();
    };
    
    $scope.onNext = function () {
    	$scope.app.pages[$scope.app.ui_currentPageIndex].ui_ready = true;
    	$scope.app.ui_currentPageIndex = undefined;
    	WizardHandler.wizard('appVisualizerWizard').setCompleted(3);
    	WizardHandler.wizard('appVisualizerWizard').goTo(2);
    	DocumentNavigator.goTop('slow');
    	return true;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .controller('AppVisualizerStep3Ctrl', appVisualizerStep3Ctrl);

function appVisualizerStep3Ctrl($scope, $mdDialog, DataTypes, DataTypeHandler, ToastManager, WizardHandler, DocumentNavigator, CollectionUtils, StringUtils, ObjectUtils) {
	var initialDatatypes = {};
	
    function activate() {
    	if (!selectCurrentPage()) {
    		return;
    	}
    	ToastManager.showInfo('Editing ' + $scope.currentPage.name);
    	
    	$scope.multiRecord = {};
    	$scope.multiRecord.types = [
			{value: 'table', text: 'Table'},
			{value: 'list', text: 'List'}
        ];
    	
    	initDefaults();
    	storeInitialDatatypes();
    	
    	$scope.currentPage.paramNames = initNames($scope.currentPage.params);
    	$scope.currentPage.multiRecord.paramNames = initNames($scope.currentPage.multiRecord.params);
    	$scope.currentPage.multiRecord.ui_paramNamesIncludingHidden = initParamNamesIncludingHidden($scope.currentPage.multiRecord.paramNames);
    }
    
    function initDefaults() {
    	$scope.currentPage.title = ObjectUtils.defaultValue($scope.currentPage.title, $scope.currentPage.name.replace('.html', ''));
    	$scope.currentPage.params = ObjectUtils.defaultValue($scope.currentPage.params, []);
    	$scope.currentPage.multiRecord = ObjectUtils.defaultValue($scope.currentPage.multiRecord, {});
    	$scope.currentPage.multiRecord.params = ObjectUtils.defaultValue($scope.currentPage.multiRecord.params, []);
    	$scope.currentPage.multiRecord.type = ObjectUtils.defaultValue($scope.currentPage.multiRecord.type, $scope.multiRecord.types[0].value);
    	$scope.currentPage.multiRecord.isSearchable = ObjectUtils.defaultValue($scope.currentPage.multiRecord.isSearchable, true);
    	$scope.currentPage.multiRecord.startIndex = ObjectUtils.defaultValue($scope.currentPage.multiRecord.startIndex, 0);
    }
    
    function storeInitialDatatypes() {
    	$scope.currentPage.params.forEach(function(param) {
    		initialDatatypes[param.id.name] = param.dataTypeInfo.dataType.value;
    	});
    }
    
    function initNames(params) {
    	var $ = [];
    	params.forEach(function(param){
    		$.push(param.id.name);
    	});
    	return $;
    }
    
    function fixParamDataTypeInfo(param) {
    	param.dataTypeInfo = {
            dataType: DataTypes.getByValue(DataTypeHandler.getDataTypeValue(param.id.name, param.dataTypeInfo, $scope.systemProperties))
        };
    }
    
    function initParamNamesIncludingHidden(paramNames) {
    	var services = [];
    	paramNames.forEach(function(paramName) {
    		services = services.concat(findServicesHavingMultiRecordField(paramName));
    	});
    	services = CollectionUtils.unique(services);
    	
    	return getMultiRecordFields(services);
    }
    
    function findServicesHavingMultiRecordField (paramName) {
    	var $ = [];
    	for (var key in $scope.app.ui_servicesMultiRecordMap) {
    		if (angular.isDefined(CollectionUtils.findByProperty($scope.app.ui_servicesMultiRecordMap[key], paramName, 'id.name'))) {
    			$.push(key);
    		}
    	}
    	return CollectionUtils.unique($);
    }
    
    /*********************************
     ** Service Fields *************** 
     *********************************/
    
    function findInAnyService (paramName) {
    	var param;
    	$scope.app.services.every(function(service){
    		param = CollectionUtils.findByProperty(service.inputParams, paramName, 'id.name');
    		if (angular.isDefined(param)) {
    			return false;
    		}
    		param = CollectionUtils.findByProperty(service.outputParams, paramName, 'id.name');
    		if (angular.isDefined(param)) {
    			return false;
    		}
    		return true;
    	});
    	fixParamDataTypeInfo(param);
    	param = angular.copy(param);
    	return param;
    }
    
    function createFieldRecords () {
    	$scope.currentPage.paramNames.forEach(function(paramName) {
    		if (!CollectionUtils.containsByProperty($scope.currentPage.params, paramName, 'id.name')) {
    			var param = findInAnyService(paramName);
    			param.newLine = true;
    			$scope.currentPage.params.push(param);
    		}
    	});
    }
    
    function deleteFieldRecords () {
    	var $ = [];
    	$scope.currentPage.params.forEach(function(param) {
    		if ($scope.currentPage.paramNames.indexOf(param.id.name) !== -1 ||
				param.custom ||
    			CollectionUtils.containsByProperty(DataTypes.advanced, param.dataTypeInfo.dataType.value, 'value')) {
    			
    			$.push(param);
    		}
    	});
    	$scope.currentPage.params = $;
    }
    
    function updateFieldRecords () {
    	createFieldRecords();
    	deleteFieldRecords();
    }
    
    
    $scope.deleteField = function (fieldName) {
    	var param = CollectionUtils.findByProperty($scope.currentPage.params, fieldName, 'id.name');
    	if (param.custom) {
    		$scope.currentPage.params = CollectionUtils.removeByProperty($scope.currentPage.params, 'id.name', fieldName);
    	} else {
    		$scope.currentPage.paramNames.splice($scope.currentPage.paramNames.indexOf(fieldName), 1);
        	deleteFieldRecords();
    	}
    };
    
    /*********************************
     ** Custom Fields **************** 
     *********************************/
    
    $scope.addCustomField = function() {
    	$mdDialog.show({
            controller: 'InputFieldDialogCtrl',
            templateUrl: 'app/modules/core/views/ui/dialog/inputFieldDialog.html',
            locals: {
            	title: 'Custom Field',
            	label: 'Name'
            },
            bindToController: true
        }).then(function (fieldName) {
        	var isUnique = $scope.currentPage.params.every(function(param) {
        		return param.id.name !== fieldName;
        	});
        	if (!isUnique) {
        		ToastManager.showWarning('Field ' + fieldName + ' already exists!');
        		return;
        	}
        	
    		var param = {
    			id: {
    				name: fieldName
    			},
    			paramLabel: fieldName,
    			visible: true,
    			newLine: true,
    			custom: true,
    			dataTypeInfo: {
    				dataType: DataTypes.getByValue('text')
    			}
    		};
    		param.ui_touched = true;
			$scope.currentPage.params.push(param);
        });
    };
    
    /*********************************
     ** Image ************************ 
     *********************************/
    
    function generateImageId() {
    	var index = 0;
    	while (CollectionUtils.containsByProperty($scope.currentPage.params, 'Image_' + index, 'id.name')) {
    		index++;
    	}
    	return 'Image_' + index;
    }
    
    $scope.addImage = function() {
    	$mdDialog.show({
            controller: 'AppImageDialogCtrl',
            templateUrl: 'app/modules/app/views/visualizer/page/appImageDialog.html',
            locals: {
            	param: {
            		id: {name: generateImageId()},
            		paramValue: '',
        			dataTypeInfo: {format: '100%'},
        			ui_isNew : true
            	}
            },
            bindToController: true
        }).then(function (image) {
    		var param = {
    			id: {
    				name: image.id
    			},
    			paramLabel: image.id,
    			visible: true,
    			newLine: true,
    			custom: true,
    			dataTypeInfo: {
    				dataType: DataTypes.getByValue('image')
    			}
    		};
    		param.paramValue = image.url;
    		param.dataTypeInfo.format = image.width;
			$scope.currentPage.params.push(param);
        });
    };
    
    /*********************************
     ** Map ************************** 
     *********************************/
    
    function selectMapFields(mapField) {
    	$mdDialog.show({
            controller: 'ParametersSelectorDialogCtrl',
            templateUrl: 'app/modules/serviceManager/views/dialogs/parametersSelectorDialog.html',
            locals: {
            	title: 'Map Address Fields',
            	isSelectingTable: false,
            	tableConfig: null,
            	selectMultiple: true,
            	required: true,
            	services: $scope.app.services,
            	initialSelection: angular.isDefined(mapField) ? mapField.dataTypeInfo.format.split(',') : []
            },
            bindToController: true
        }).then(function (selection) {
    		var param = angular.isDefined(mapField) ? mapField : {
    			id: {
    				name: 'Map'
    			},
    			paramLabel: 'My Map',
    			visible: true,
    			newLine: true,
    			custom: true,
    			dataTypeInfo: {
    				dataType: DataTypes.getByValue('map')
    			}
    		};
    		param.dataTypeInfo.format = selection.leafs.join(',');
    		param.ui_touched = true;
    		if (angular.isUndefined(mapField)) {
    			$scope.currentPage.params.push(param);
    		}
        });
    }
    
    $scope.addMap = function() {
    	if (CollectionUtils.containsByProperty($scope.currentPage.params, 'map', 'dataTypeInfo.dataType.value')) {
    		ToastManager.showError('Only one map may be added per page!', 'Add Map');
    		return;
    	}
    	selectMapFields();
    };
    
    $scope.editMap = function(mapField) {
    	selectMapFields(mapField);
    };
    
    /*********************************
     ** MultiRecord fields ***********
     *********************************/
    
    $scope.onMultiRecordTypeChange = function() {
    	if ($scope.currentPage.multiRecord.type === 'list') {
    		$scope.currentPage.multiRecord.params.forEach(function(param) {
    			param.dataTypeInfo.dataType = DataTypes.values[0];
        	});
    	}
    };
    
    function getMultiRecordFields(serviceNames) {
    	var $ = [];
    	serviceNames.forEach(function(serviceName) {
    		$ = $.concat($scope.app.ui_servicesMultiRecordMap[serviceName].map(function (multiRecordField) {
        		return multiRecordField.id.name;
            }));
    	});
    	return CollectionUtils.unique($);
    }
    
    function createMultiRecordFieldRecords () {
    	$scope.currentPage.multiRecord.paramNames.forEach(function(paramName) {
    		if (!CollectionUtils.containsByProperty($scope.currentPage.multiRecord.params, paramName, 'id.name')) {
    			var field = findInAnyService(paramName);
    			field.dataTypeInfo.dataType = DataTypes.values[0];
    			if (StringUtils.isEmpty(field.dataTypeInfo.dataType.format)) {
    				field.dataTypeInfo.format = '%s';
    			}
    			$scope.currentPage.multiRecord.params.push(field);
    		}
    	});
    }
    
    function deleteMultiRecordFieldRecords () {
    	var $ = [];
    	$scope.currentPage.multiRecord.params.forEach(function(param) {
    		if ($scope.currentPage.multiRecord.paramNames.indexOf(param.id.name) !== -1) {
    			$.push(param);
    		}
    	});
    	$scope.currentPage.multiRecord.params = $;
    }
    
    function updateMultiRecordFieldRecords () {
    	if (CollectionUtils.isEmpty($scope.currentPage.multiRecord.paramNames)) {
    		$scope.currentPage.multiRecord.params = [];
    		return;
    	}
    	
    	createMultiRecordFieldRecords();
    	deleteMultiRecordFieldRecords();
    }
    
    $scope.deleteMultiRecordField = function (fieldName) {
    	$scope.currentPage.multiRecord.paramNames.splice($scope.currentPage.multiRecord.paramNames.indexOf(fieldName), 1);
    	deleteMultiRecordFieldRecords();
    };
    
    /*********************************
     ** Dialogs **********************
     *********************************/
    
    $scope.openFieldsDialog = function (isSelectingTable) {
    	$mdDialog.show({
            controller: 'ParametersSelectorDialogCtrl',
            templateUrl: 'app/modules/serviceManager/views/dialogs/parametersSelectorDialog.html',
            locals: {
            	title: isSelectingTable? 'Table / List fields': 'Fields',
            	isSelectingTable: isSelectingTable,
            	tableConfig: $scope.currentPage.multiRecord,
            	selectMultiple: true,
            	required: false,
            	services: isSelectingTable? $scope.app.ui_servicesMultiRecord: $scope.app.services,
            	initialSelection: isSelectingTable? $scope.currentPage.multiRecord.paramNames : $scope.currentPage.paramNames
            },
            bindToController: true
        }).then(function (selection) {
        	if (isSelectingTable) {
        		$scope.currentPage.multiRecord.paramNames = selection.leafs;
        		$scope.currentPage.multiRecord.ui_paramNamesIncludingHidden = getMultiRecordFields(selection.roots);
        		updateMultiRecordFieldRecords();
        	} else {
        		$scope.currentPage.paramNames = selection.leafs;
        		updateFieldRecords();
        	}
        });
    };
    
    /*********************************
     ** Buttons ********************** 
     *********************************/
    
    $scope.clearAllFields = function() {
    	$scope.currentPage.params.forEach(function(param) {
    		param.paramValue = undefined;
    	});
    	$scope.currentPage.multiRecord.params.forEach(function(param) {
    		param.paramValue = undefined;
    	});
    };
    
    $scope.removeAllFields = function() {
    	// regular fields
    	$scope.currentPage.paramNames = [];
		updateFieldRecords();
    	
		// multi-record fields
    	$scope.currentPage.multiRecord.paramNames = [];
		$scope.currentPage.multiRecord.ui_paramNamesIncludingHidden = [];
		updateMultiRecordFieldRecords();
    };
    
    /*********************************
     ** Wizard ***********************
     *********************************/
    
    function nextPageToEdit() {
    	var i, l = $scope.app.pages.length;
    	for (i = 0; i < $scope.app.pages.length; i++) {
    		if (!$scope.app.pages[i].ui_ready) {
    			return i;
    		}
    	}
    	return -1;
    }
    
    function selectCurrentPage() {
    	if (angular.isUndefined($scope.app.ui_currentPageIndex)) {
    		var currentPage = nextPageToEdit();
        	if (currentPage === -1) {
            	WizardHandler.wizard('appVisualizerWizard').goTo(4);
            	DocumentNavigator.goTop('slow');
        		return false;
        	}
        	$scope.app.ui_currentPageIndex = currentPage;
    	}
    	$scope.currentPage = $scope.app.pages[$scope.app.ui_currentPageIndex];
    	return true;
    }
    
    $scope.onPageSelect = function (name) {
    	var previousPageIndex = $scope.app.ui_currentPageIndex;
    	$scope.app.ui_currentPageIndex = CollectionUtils.indexOf($scope.app.pages, name, 'name');
    	if ($scope.app.ui_currentPageIndex === previousPageIndex) {
    		return;
    	}
    	
    	activate();
    };
    
    function setNoOverride($, paramId, dataTypeValue, dataTypeInfo) {
    	if (dataTypeValue === 'LOV') {
    		$.push('prepare_' + dataTypeInfo.service.properties.name + '_lov_request');
			$.push(paramId + '_lov_item_presenter');
			$.push(paramId + '_lov_item_handler');
    	} else if (dataTypeValue === 'static_lov') {
    		$.push(paramId + '_lov_item_handler');
    	} else {
    		$.push('convert_' + (paramId === 'Map' ? 'map' : paramId));
    	}
    }
    
    function calculateFunctionsNoOverride() {
    	var $ = [];
    	Object.keys(initialDatatypes).forEach(function(paramId) {
    		var param = CollectionUtils.findByProperty($scope.currentPage.params, paramId, 'id.name');
    		if (angular.isDefined(param)) {
    			if (param.dataTypeInfo.dataType.value === initialDatatypes[paramId] && !param.ui_touched) {
    				setNoOverride($, paramId, param.dataTypeInfo.dataType.value, param.dataTypeInfo);
        		}
    			param.ui_touched = false;
    		}
    	});
    	return $;
    }
    
    $scope.onNext = function () {
    	$scope.app.ui_functionsNoOverride = calculateFunctionsNoOverride();
    	return false;
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .controller('AppVisualizerStep2Ctrl', appVisualizerStep2Ctrl);

function appVisualizerStep2Ctrl($scope, AppConverter, ThemeColors, BackgroundStyles, ThemeUtils, WizardHandler, DocumentNavigator, ObjectUtils) {
    activate();

    function activate() {
    	$scope.app.direction = ObjectUtils.defaultValue($scope.app.direction, 'LTR');
    	$scope.themes = angular.copy(ThemeColors.values);
    	$scope.app.theme = ObjectUtils.defaultValue($scope.app.theme, angular.copy($scope.themes[0]));
    	$scope.backgroundStyles = BackgroundStyles.values;
    	$scope.app.backgroundStyle = ObjectUtils.defaultValue($scope.app.backgroundStyle, $scope.backgroundStyles[0]);
    	$scope.app.logoWidth = ObjectUtils.defaultValue($scope.app.logoWidth, AppConverter.DEFAULT_IMAGE_WIDTH);
    	$scope.app.pages = ObjectUtils.defaultValue($scope.app.pages, []);
    }
    
    $scope.editPage = function (index){
    	$scope.app.ui_currentPageIndex = index;
    	WizardHandler.wizard('appVisualizerWizard').setCompleted(1);	//indices starting from 0
    	WizardHandler.wizard('appVisualizerWizard').goTo(2);
    	DocumentNavigator.goTop('slow');
    };
    
    $scope.validate = function () {
    	$scope.appVisualizerStep2Form.appPages.$validate();
    };
    
    /*********************************
     ** Wizard ***********************
     *********************************/
    
    $scope.onNext = function () {
    	$scope.app.ui_currentPageIndex = undefined;
    	WizardHandler.wizard('appVisualizerWizard').setCompleted(1);	//indices starting from 0
    	WizardHandler.wizard('appVisualizerWizard').goTo(2);
    	DocumentNavigator.goTop('slow');
    	return true;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .controller('AppVisualizerStep1Ctrl', appVisualizerStep1Ctrl);

function appVisualizerStep1Ctrl($scope, $mdDialog, ServiceManager, WizardHandler, PromiseUtils, SelectionUtils, CollectionUtils, ObjectUtils) {

    function activate() {
    	$scope.allowPartial = ($scope.systemProperties.ALLOW_PARTIAL_RECORDINGS === "true");
    	filterAppServices();
    	
    	if (!$scope.mode.new) {
    		setAllWizardStepsCompleted();
    	}
    }
    
    function fromServerKeepAlive() {
		if (angular.isUndefined($scope.app.keepAlive)) {
			return;
		}
		$scope.app.services.forEach(function(appService) {
			appService.keepAlive = $scope.app.keepAlive.indexOf(appService.name) !== -1;
		});
	}
    
    function filterAppServices() {
    	$scope.app.services = SelectionUtils.filter($scope.services, $scope.app.serviceNames);
    	$scope.app.serviceNames = [];	// to indicate that full details of these services are not loaded yet
    	fromServerKeepAlive();
    }
    
    function setAllWizardStepsCompleted() {
    	for (var i = 0; i < 6; i++) {
    		WizardHandler.wizard('appVisualizerWizard').setCompleted(i);
    	}
    }
    
    $scope.addServices = function() {
    	$mdDialog.show({
                templateUrl: 'app/modules/serviceManager/views/dialogs/servicesSelectorDialog.html',
                controller: 'ServicesSelectorDialogCtrl',
                locals: {
                	services: $scope.services,
                	initialSelection: toServiceNames($scope.app.services),
		            systemProperties: $scope.systemProperties,
                },
                bindToController: true
                
            }).then(function (services) {
            	$scope.app.services = SelectionUtils.filterSelected(services);
            	SelectionUtils.clearSelection($scope.services);
            	
            }, function () {
                SelectionUtils.clearSelection($scope.services);
            });
    };
    
    /****************************************
     *    Services selector functionality   *
     ****************************************/
    
    $scope.removeServices = function(services) {
    	var namesToRemove = toServiceNames(services);
    	$scope.app.services = CollectionUtils.removeManyByProperty($scope.app.services, 'name', namesToRemove);
    };
    
    function toServiceNames(services) {
        return angular.isUndefined(services) ? [] :
            services.map(function (service) {
            	if (angular.isDefined(service.name)) {
            		return service.name;
            	}
            	return service;
            });
    }
    
    /************************************************
     ** Prepare for next steps: MultiRecord fields **
     ************************************************/
    
    function filterMultiRecordOutputParams(outputParams) {
    	if (angular.isUndefined(outputParams)) {
    		return undefined;
    	}
    	return CollectionUtils.filterByProperty(outputParams, 'inTable', true);
    }
    
    function filterMultiRecordFields(services) {
    	var $ = [];
    	var allMultiRecordFieldsNames = [];
    	var i, l, service, multiRecordFields;
    	
    	//filter output parameters having inTable===true
    	for (i = 0, l = services.length; i < l; i++) {
            service = services[i];
            multiRecordFields = filterMultiRecordOutputParams(service.outputParams);
            if (multiRecordFields.length !== 0) {
	            $.push({
	    			name: service.name,
	    			outputParams: multiRecordFields
	    		});
            }
    	}
    	
    	return $;
    }
    
    /**
     * Prepare listing of multi-record fields by services, which would be required by later steps.
     */
    function prepareMultiRecordListing() {
    	$scope.app.ui_servicesMultiRecord = filterMultiRecordFields($scope.app.services);
    	
    	$scope.app.ui_servicesMultiRecordMap = {};
    	$scope.app.ui_servicesMultiRecord.forEach(function(serviceMultiRecord) {
    		$scope.app.ui_servicesMultiRecordMap[serviceMultiRecord.name] = serviceMultiRecord.outputParams;
    	});
    }
    
    
    /************************************************
     ** Prepare for next steps **********************
     ************************************************/
    
    function overwriteUseLabelsAsKeysNames() {
    	$scope.app.services.forEach(function(service){
    		if (service.useLabelsAsKeys) {
    			service.inputParams.forEach(function(inputParam) {
    				inputParam.id.name = inputParam.paramLabel;
    			});
    			service.outputParams.forEach(function(outputParam) {
    				outputParam.id.name = outputParam.paramLabel;
    			});
            }
    	});
    }
    
    function loadServices() {
    	var selectedServiceNames = toServiceNames($scope.app.services);
    	return 	CollectionUtils.equalsIgnoreOrder(selectedServiceNames, $scope.app.serviceNames) ?
    			PromiseUtils.emptyPromise() :
				ServiceManager.getAll(ServiceManager.filters.SPECIFIED, selectedServiceNames);
    }
    
    
    /*********************************
     ** Wizard ***********************
     *********************************/
    
    function preserveKeepAlive(loadedServices) {
    	loadedServices.forEach(function(loadedService) {
    		var oldService = CollectionUtils.findByName($scope.app.services, loadedService.name);
    		if (angular.isDefined(oldService)) {
    			loadedService.keepAlive = oldService.keepAlive;
    		}
    	});
    }
    
    $scope.onNext = function () {
    	loadServices().then(function (loadedServices) {
    		if (angular.isDefined(loadedServices)) {
    			preserveKeepAlive(loadedServices);
    			$scope.app.services = loadedServices;
    		}
    		
    		$scope.app.serviceNames = toServiceNames($scope.app.services);
    		overwriteUseLabelsAsKeysNames();
        	prepareMultiRecordListing();
        	
    		WizardHandler.wizard('appVisualizerWizard').setCompleted(0);
        	WizardHandler.wizard('appVisualizerWizard').goTo(1);
    	});
    	return true;
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .controller('AppVisualizerCtrl', appVisualizerCtrl);

function appVisualizerCtrl(	$scope, $routeParams, services, app, systemProperties, licenseDetails, AppManager, ImageFileManager, HtmlServiceUtils, DbServiceUtils,
							NavigationManager, UserManager, ModeParser, ToastManager, PromiseUtils, CollectionUtils, StringUtils) {

    function activate() {
    	$scope.services = DbServiceUtils.filterNoSingleOutput(HtmlServiceUtils.filterNoLoop(services));
    	$scope.systemProperties = systemProperties;
    	$scope.loadingIndicator = {isLoading: false, loadingText: "Generating app..."};
    	
    	initByMode();
    	buildCrumbs();
    }
    
    function initByMode() {
        $scope.mode = {};
        ModeParser.parse($scope.mode, $routeParams.mode);
        
        if ($scope.mode.new) {
        	$scope.app = {};
        }
        else {
        	$scope.app = app;
        	setAllPagesReady();
        }
    }
    
    function setAllPagesReady() {
    	$scope.app.pages.forEach(function(page){
    		page.ui_ready = true;
    	});
    }
    
    function buildCrumbs() {
        $scope.appVisualizerCrumbs = [
            {title: "Application Manager", url: "#/appManager"},
            {title: ($scope.mode.new ? "New" : $scope.app.name), active: true}
        ];
    }
    
    $scope.$on('wizard:stepChanged', function(event, step) { 
    	$scope.step = step.index; 
    });
    
    /*********************************
     ** Visualize ********************
     *********************************/
    
    function uploadImage(blob) {
    	if (angular.isUndefined(blob)) {
    		return PromiseUtils.emptyPromise();
    	}
    	return ImageFileManager.upload(blob, $scope.loadingIndicator);
    }
    
    function uploadBackground() {
    	return uploadImage($scope.app.backgroundBlob);
    }
    
    function uploadLogo() {
    	return uploadImage($scope.app.logoBlob);
    }
    
    function saveApp() {
    	AppManager.update($scope.app, $scope.loadingIndicator).then(function() {
    		if (/mock:\s+true/.test($scope.app.javascript)) {
    			ToastManager.showWarning('App is configured to use mock services.', 'Mock Data');
    		}
    		$scope.app.pages.forEach(function(appPage) {
    			if (appPage.shouldSkip) {
    				ToastManager.showWarning('Skipped, will not be generated.', appPage.name);
    			}
    		});
    		NavigationManager.goTo('pageManager');
    	});
    }
    
    function validateMap() {
    	var hasMap = false;
    	$scope.app.pages.every(function(appPage) {
    		hasMap = CollectionUtils.containsByProperty(appPage.params, 'map', 'dataTypeInfo.dataType.value');
    		return !hasMap;
    	});
    	if (hasMap && !StringUtils.isNonWhitespaces($scope.systemProperties.GOOGLE_API_KEY) && licenseDetails.companyName !== 'AuraPlayer') {
    		ToastManager.showWarning('Missing GOOGLE_API_KEY in system properties', 'Map in AppVisualizer');
    	}
    }
    
    function preSaveValidations() {
    	validateMap();
    	return true;
    }
    
    $scope.submit = function() {
    	if (!preSaveValidations()) {
    		return;
    	}
    	
    	$scope.app.createdBy = UserManager.getUser().username;
    	uploadBackground().then(uploadLogo).then(saveApp);
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .controller('AppManagerCtrl', appManagerCtrl);

function appManagerCtrl($scope, $location, apps, licenseDetails, SystemPropertyManager, CollectionUtils,
						ToastManager, DataManager, AppManager, Permissions, PromiseUtils, HotkeyManager) {
    activate();

    function activate() {
        DataManager.setIsLoading(false);
        $scope.loadingIndicator = {isLoading: false};
        $scope.systemProperties = SystemPropertyManager.systemConfig.properties;
        $scope.apps = apps;
        $scope.licenseDetails = licenseDetails;

        initGroupActions();
        initHotkeys();
    }

    function initGroupActions() {
        $scope.appGroupActions = [
            {
            	name: "Backup", 
            	callback: backupApps, 
            	map: getAppName
            },
            {
            	name: "Export", 
            	callback: exportApps, 
            	map: getAppName
            },
            {
                name: "Delete",
                loadingIndicator: $scope.loadingIndicator,
                groupLoadingText: "Deleting applications...",
                callback: deleteApp,
                onFinishCallback: afterDeleteApp
            }
        ];
    }
    
    function initHotkeys() {
    	var hotkeys = [];
        
        hotkeys.push(HotkeyManager.buildHotkey('alt+n', 'Create new app', function() {
        	$scope.createNewApp();
	    }));
        
        HotkeyManager.bindHotkeys($scope, hotkeys);
    }
    
    $scope.goToAppVisualizer = function () {
    	$location.path('appVisualizer/new');
    };

    function backupApps(appNames) {
        AppManager.download(appNames, false);
    }
    function exportApps(appNames) {
        AppManager.download(appNames, true);
    }
    
    function getAppName(app) {
        return app.name;
    }

    function deleteApp(app, totalActionedApps) {
    	if (!Permissions.checkEntityAndToast(app)) {
    		return PromiseUtils.emptyPromise([]);
    	}
    	
        return AppManager.delete(app.name, $scope.loadingIndicator, getOverrideConfig(totalActionedApps))
            .then(function () {
                $scope.apps = CollectionUtils.removeObjectByReference($scope.apps, app);
            });
    }

    function getOverrideConfig(totalActionedApps) {
        return totalActionedApps >= 3 ? {showSuccessLog: false} : {};
    }

    function afterDeleteApp(totalActionedApps) {
        if (totalActionedApps >= 3) {
            ToastManager.showSuccess("Deleted " + totalActionedApps + " applications");
        }
    }
    
    $scope.isServiceManagementPrivileged = function () {
        return angular.isDefined($scope.licenseDetails) &&
            $scope.licenseDetails.serviceManagement;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .controller('AppGridCtrl', appGridCtrl);

function appGridCtrl($scope, $route, $location, uiGridConstants, ActionBuilder, PageNavigator, AppManager, Permissions) {
	activate();
	
    function activate() {
        initApps();
        initAppsActions();
        initAppsFunctions();
        initColumnVisibleConfig();
        initColumnDefs();
        initColumnFilter();
    }

    function initApps() {
        $scope.apps.forEach(function (app) {
            app.editingName = false;
        });
    }

    function initAppsActions() {
        $scope.apps.forEach(function (app) {
            initAppActions(app);
        });
    }

    function initAppActions(app) {
        if (angular.isUndefined(app)) {
            return;
        }
        var actions = [];
        actions.push(ActionBuilder.buildLink("Edit", "btn-blue", '#/appVisualizer/edit/' + app.name, false, "fa fa-pencil", true, true));
        actions.push(ActionBuilder.buildLink("Duplicate", "btn-green", '#/appVisualizer/duplicate/' + app.name, false, "fa fa-copy", true, true));
        actions.push(ActionBuilder.build("Rename", "btn-yellow", prepareAppNameEdit, false, "fa fa-edit", true, true));

        app.actionsData = {actions: actions};
    }

    function initAppsFunctions() {
        $scope.apps.forEach(function (app) {
            app.renameApp = renameApp;
            app.reproduceAppName = reproduceAppName;
            app.navigateTo = navigateToApp;
        });
    }

    function initColumnVisibleConfig() {
        $scope.columnVisibleConfig = {};
    	
    	var columns = $scope.systemProperties.APP_TABLE_COLUMNS;
        if (angular.isDefined(columns)) {
        	if (!angular.isArray(columns)) {
        		columns = [columns];
        	}
            columns.forEach(function (column) {
                $scope.columnVisibleConfig[column] = true;
            });
        } else {
            $scope.columnVisibleConfig = {
                name: true,
                description: true,
                numOfServices: true,
                numOfPages: true,
                lastModified: true
            };
        }
    }
    
    function initColumnDefs() {
        $scope.columnDefs = [
            {
                name: 'name',
                displayName: 'Application name',
                visible: isColumnVisible('name'),
                width: "*",
                cellTemplate: '<ap-edited-input control-buttons="row.entity.editingName" model="row.entity.name"' +
                ' is-required="true" required-err-msg="Application name is required!"' +
                ' edited-name="appNameInput" save-callback="row.entity.renameApp(row.entity)"' +
                ' cancel-callback="row.entity.reproduceAppName(row.entity)"' +
                ' detail-type="link" detail-callback="row.entity.navigateTo(row.entity)">' +
                '</ap-edited-input>'
            },
            {
                name: 'description',
                displayName: 'Description',
                visible: isColumnVisible('description'),
                width: "*"
            },
            {
                name: 'numOfServices',
                displayName: '#Services',
                visible: isColumnVisible('numOfServices'),
                width: "90",
                cellTemplate: '<span>{{::row.entity.serviceNames[0].substring(0,row.entity.serviceNames[0].indexOf(","))}}</span>'
            },
            {
                name: 'numOfPages',
                displayName: '#Pages',
                visible: isColumnVisible('numOfPages'),
                width: "90",
                cellTemplate: '<span>{{::row.entity.serviceNames[0].substring(row.entity.serviceNames[0].indexOf(",")+1)}}</span>'
            },
            {
                name: 'lastModified',
                displayName: 'Modified',
                visible: isColumnVisible('lastModified'),
                cellFilter: 'date:"dd/MM/yy HH:mm:ss"',
                width: "160",
                sort: {
                    direction: uiGridConstants.DESC,
                    priority: 1
                }
            },
            {
                name: 'createdBy',
                displayName: 'Created By',
                width: '115',
                visible: isColumnVisible('createdBy')
            },
            {
                name: 'actionData',
                displayName: 'Actions',
                enableSorting: false,
                enableColumnMenu: false,
                width: "220",
                cellTemplate: '<ap-action-panel action-data="row.entity.actionsData" action-context="row.entity"></ap-action-panel>'
            }
        ];
    }
    
    function isColumnVisible(column) {
        return angular.isDefined($scope.columnVisibleConfig[column]) &&
            $scope.columnVisibleConfig[column];
    }
    
    function initColumnFilter() {
        $scope.filteredColumns = ['name', 'description'];
    }

    function navigateToApp(app) {
        $location.path('appVisualizer/edit/' + app.name);
    }
    
    function prepareAppNameEdit(app) {
    	if (!Permissions.checkAndToast(app.createdBy) || Permissions.blockOperator()) {
    		return;
    	}
    	
        app.originalName = app.name;
        app.editingName = true;
    }
    
    function reproduceAppName(app) {
        app.name = app.originalName;
        app.editingName = false;
    }
    
    function renameApp(app) {
    	if (app.name === app.originalName) {
    		app.editingName = false;
    		return;
    	}
    	
        AppManager.rename(app.originalName, app.name, $scope.loadingIndicator)
            .then(function () {
                app.editingName = false;
                $route.reload();
            });
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .service('AppPageServiceResponseAction', appPageServiceResponseActionConstants);

function appPageServiceResponseActionConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
    	self.values = [
    	    {value: "nothing", text: "(Do nothing)"},
    	    {value: "popupErrors", text: "Popup Errors"},
    	    {value: "popupPopupMessages", text: "Popup PopupMessages"},
			{value: "popup", text: "Popup Text"},
			{value: "navigateToPage", text: "Navigate to Page"},
			{value: "popupAndNavigate", text: "Popup & Navigate"},
			{value: "callFunction", text: "Call custom function"}
        ];
    	
    	self.successValues = self.values.slice();
    	self.successValues.splice(1,2);
    	self.failureValues = self.values;
    	
        self.successDefault = self.successValues[0];
        self.failureDefault = self.failureValues[1];
    }

    self.getByValue = function (value) {
        return ConstantUtils.getByValue(value, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .service('AppPageEvent', appPageEventConstants);

function appPageEventConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {value: "buttonClick", text: "onButtonClick()"},
 			{value: "tableClick", text: "onTableClick()"},
 			{value: "keyPress", text: "onKeyPress()"},
 			{value: "onLoad", text: "onLoad()"}
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (value) {
        return ConstantUtils.getByValue(value, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .service('AppPageButtonWidth', appPageButtonWidthConstants);

function appPageButtonWidthConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {value: "100", text: "100%"},
   			{value: "50", text: "50%"},
   			{value: "33", text: "33%"},
   			{value: "25", text: "25%"}
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (value) {
        return ConstantUtils.getByValue(value, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .service('AppPageButtonPosition', appPageButtonPositionConstants);

function appPageButtonPositionConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
   			{value: "bottom", text: "Bottom"},
   			{value: "top", text: "Top"}
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (value) {
        return ConstantUtils.getByValue(value, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .service('AppPageAction', appPageActionConstants);

function appPageActionConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {value: "executeService", text: "Execute service"},
   			{value: "navigateToPage", text: "Navigate to Page"},
   			{value: "callFunction", text: "Call custom function"}
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (value) {
        return ConstantUtils.getByValue(value, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .service('AppOfflineAction', appOfflineActionConstants);

function appOfflineActionConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
   			{value: "error", text: "No Cache"},
   			/*{value: "syncLater", text: "Sync later"},*/
   			{value: "storageThenLive", text: "Enabled"},
   			/*{value: "liveThenStorage", text: "Live, then Cache"}*/
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (value) {
        return ConstantUtils.getByValue(value, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive("pageHandlerTable", pageHandlerEditorDirective);

function pageHandlerEditorDirective() {
    return {
        restrict: 'AE',
        scope: {
            page: '=',
            showHandlerTable: '=',
            handlerHolder: '=',
            handlerEditMode: '='
        },
        templateUrl: 'app/modules/page/views/editors/page/handler/pageHandlerTable.html',
        controller: 'PageHandlerTableCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .directive('pageHandlerEditor', pageHandlerEditorDirective);

function pageHandlerEditorDirective() {
    return {
        restrict: 'AE',
        scope: {
            handlerHolder: '=',
            page: '=',
            handlerEditMode: '=',
            serviceNames: '=',
            pageNames: '=',
            inputElements: '=',
            form: '=',
            saveHandlerCallback: '&'
        },
        templateUrl: 'app/modules/page/views/editors/page/handler/pageHandlerEditor.html',
        controller: 'PageHandlerEditorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .directive('pageGrid', pageGridDirective);

function pageGridDirective() {
    return {
        restrict: 'AE',
        scope: {
            pages: '=',
            tableActions: '=?',
            visibleColumns: '=',
            readOnly: '=?',
            useSelection: '=?',
            clearSelection: '=?',
            enableSelectAll: '=?'
        },
        templateUrl: 'app/modules/page/views/managers/page/pageGrid.html',
        controller: 'PageGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .directive('pageNameValidator', pageNameValidator);

function pageNameValidator() {
    return {
        require: 'ngModel',
        scope: {
        	pages: '=',
        	currentPageIndex: '='
        },
        link: function ($scope, elm, attrs, ctrl) {
        	ctrl.$validators.name = function (modelValue) {
        		if (angular.isUndefined(modelValue) || modelValue.length === 0) {
        			return false;
        		}
        		if (isPageExists(modelValue)) {
        			return false;
        		}
        		return true;
            };
        	
            function omitCurrentPage() {
            	if (angular.isUndefined($scope.currentPageIndex)) {
            		return $scope.pages;
            	}
            	var $ = $scope.pages.slice();
            	$.splice($scope.currentPageIndex, 1);
            	return $;
            }
            
        	function isPageExists (name) {
            	var $ = false;
            	var otherPages = omitCurrentPage();
            	otherPages.every(function(page){
            		if (page.name.toLowerCase() === name.toLowerCase() || page.name.toLowerCase() === name.toLowerCase() + '.html')  {
            			$ = true;
            			return false;
            		}
            		return true;
            	});
            	return $;
            }
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
	.directive('pageEditorHeader', pageEditorHeaderDirective);

function pageEditorHeaderDirective() {
	return {
		restrict: 'E',
		scope: {
			mode: '=',
			page: '=',
			pageEditorForm: '=',
			showHandlerTable: '=',
			jsonHandlerParser: '&'
		},
		templateUrl: 'app/modules/page/views/editors/page/pageEditorHeader.html',
		controller: 'PageEditorHeaderCtrl'
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
	.service('PagePropertiesConverter', pagePropertiesConverterService);

function pagePropertiesConverterService(ObjectUtils, StringUtils, ConstantUtils, DataTypes, ServiceConverter, ValidationFunctions, ThemeColors) {
	var self = this;

	this.toServerParam = function (param) {
		param._backup = undefined;
		
		var $ = angular.copy(param);
		toServerDataType($);

		$.paramLabel = $.paramLabel !== '' ? $.paramLabel : undefined;
		$.validationFunction = ConstantUtils.defaultValue($.validationFunction, ValidationFunctions);

		return $;
	};

	function removeNestedDataTypes(param) {
    	try {
    		param.dataTypeInfo.service.outputParams.forEach(function(nestedOutputParam) {
    			nestedOutputParam.dataTypeInfo = undefined;
        	});
    	} catch (e) {}
    }
	
	function toServerDataType(param) {
		if (ObjectUtils.isEmpty(param.dataTypeInfo)) {
			param.dataTypeInfo = {};
		}

		param.dataTypeInfo.type = StringUtils.connect(ConstantUtils.defaultValue(param.dataTypeInfo.dataType, DataTypes).toUpperCase());
		param.dataTypeInfo.dataType = undefined;

		if (angular.isDefined(param.dataTypeInfo.service)) {
			param.dataTypeInfo.service = ServiceConverter.toServer(param.dataTypeInfo.service.properties);
			removeNestedDataTypes(param);

			if (angular.isDefined(param.dataTypeInfo.service.authenticationMethod.value)) {
				param.dataTypeInfo.service.authenticationMethod = param.dataTypeInfo.service.authenticationMethod.value;
			}
		}

		if (angular.isDefined(param.dataTypeInfo.format)) {
			param.dataTypeInfo.format = ConstantUtils.flatten(param.dataTypeInfo.format);
			param.dataTypeInfo.value = new Date(param.dataTypeInfo.value).getTime();
		}
	}

	this.toServerTheme = function (theme) {
		var $ = {};
		$.themeBase = theme.value;
		$.themeColor = theme.hex;
		$.captionColor = angular.isDefined(theme.captionColor) ? theme.captionColor.hex : undefined;
		$.labelColor = angular.isDefined(theme.labelColor) ? theme.labelColor.hex : undefined;
		$.backgroundColor = angular.isDefined(theme.backgroundColor) ? theme.backgroundColor.hex : undefined;
		return $;
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .service('PageNavigator', pageNavigatorService);

function pageNavigatorService($window, System) {
    var self = this;
    var pageLocation = 'www';

    this.navigateTo = function (pageId) {
    	if (angular.isDefined(pageId.app)) {
    		$window.open(System.baseUrl + '/apps/' + pageId.app + "/" + pageId.filename, '_blank');
    	} else {
    		$window.open(System.baseUrl + '/www/' + pageId.filename, '_blank');
    	}
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .service('PageManager', pageManagerService);

function pageManagerService(NavigationManager, PageConverter, ObjectUtils, HttpHandler, EntityManager, UserManager, FileUploader,
							DataManager, PromiseUtils, SystemPropertyManager, Permissions) {
    var self = this;

    activate();

    function activate() {
        self.pageManagerConfig = {
            type: 'page',
            getAllUrl: '/Macro/Pages',
            getUrl: '/Macro/Page/',
            updateUrl: '/Macro/Page/',
            deleteUrl: '/Macro/Page/',
            renameUrl: '/Macro/Page/Rename/',
            cloneUrl: '/Macro/Page/Clone/',
            uploadUrl: '/Macro/HTMLFileUpload',
            backupUrl: '/Macro/Backup',
            fromServerConverter: PageConverter.fromServer,
            toServerConverter: PageConverter.toServer
        };
    }
    
    function toString(pageId) {
    	return pageId.app + "/" + pageId.filename;
    }

    this.get = function (filename, app) {
        return EntityManager.get(self.pageManagerConfig, app + "/" + filename);
    };

    this.getAll = function (optionalAppFilter) {
    	return angular.isDefined(optionalAppFilter) && optionalAppFilter.length === 0 ? 
        		PromiseUtils.emptyPromise([]) :
                EntityManager.getAll(self.pageManagerConfig, undefined, prepareGetAllHttpConfig(optionalAppFilter)).then(afterGetAll);
    };
    
    function afterGetAll(pages) {
        DataManager.setIsLoading(false);
        return SystemPropertyManager.get(true).then(function(systemProperties) {
            return Permissions.filterIfNecessary(pages, systemProperties);
        });
    }

    function prepareGetAllHttpConfig(appFilter) {
        return angular.isDefined(appFilter) ? {
            headers: {
            	'AP-Filter': 'BY_APP',
            	'AP-FilterParameter': appFilter
            }
        } : {};
    }

    this.update = function (page, loadingIndicator) {
        return EntityManager.handleHttpRequest({
            executionLog: 'Updating page ' + toString(page.id),
            httpHandlerFunction: HttpHandler.post,
            httpHandlerUrl: self.pageManagerConfig.updateUrl + toString(page.id),
            httpHandlerData: self.pageManagerConfig.toServerConverter(page),
            loadingIndicator: loadingIndicator,
            entityConfig: self.pageManagerConfig,
            entityId: page.id,
            logTitle: 'Page Update',
            expectedErrorLog: 'Could not update page',
            unexpectedErrorLog: 'Something went wrong while updating page :(',
            successLog: page.id.filename + ' updated!'
        });
    };

    this.delete = function (pageId, loadingIndicator, overrideConfig) {
        return EntityManager.delete(ObjectUtils.override(self.pageManagerConfig, overrideConfig),
        		toString(pageId), loadingIndicator);
    };

    this.rename = function (currentFileName, app, newFileName, loadingIndicator) {
        return EntityManager.rename(self.pageManagerConfig, app + '/' + currentFileName, newFileName, loadingIndicator);
    };

    this.upload = function (htmlFile, loadingIndicator) {
        return FileUploader.upload({
            type: 'Html',
            uploadUrl: self.pageManagerConfig.uploadUrl,
            file: htmlFile,
            loadingIndicator: loadingIndicator
        });
    };

    this.backup = function (pageIds, standalone) {
        var encodedPages = encodeURIComponent(JSON.stringify({pages: pageIds, isStandalone: standalone}));
        NavigationManager.goToServer("{0}?data={1}".format(self.pageManagerConfig.backupUrl, encodedPages));
    };

    this.clone = function (pageId, loadingIndicator) {
        return EntityManager.handleHttpRequest({
            executionLog: 'Duplicating page..',
            httpHandlerFunction: HttpHandler.get,
            httpHandlerUrl: self.pageManagerConfig.cloneUrl + pageId.app + '/' + pageId.filename,
            httpHandlerData: {headers: {username: UserManager.getUser().username}},
            loadingIndicator: loadingIndicator,
            entityConfig: self.pageManagerConfig,
            entityId: pageId,
            logTitle: 'Duplicate page',
            expectedErrorLog: 'Could not duplicate page',
            unexpectedErrorLog: 'Something went wrong while duplicating page :(',
            successLog: pageId.filename + ' duplicated.'
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .service('PageHandlerManager', pageHandlerManagerService);

function pageHandlerManagerService(StringUtils, JavascriptUtils) {
    this.removeOldHandlers = function (javascript, handlerGenerateInfo) {
        if (StringUtils.isNotEmpty(handlerGenerateInfo.initHandler)) {
            javascript = JavascriptUtils.removeFunction(javascript, handlerGenerateInfo.initHandler);
            handlerGenerateInfo.initHandler = '';
        }

        if (StringUtils.isNotEmpty(handlerGenerateInfo.responseHandler)) {
            javascript = JavascriptUtils.removeFunction(javascript, handlerGenerateInfo.responseHandler);
            handlerGenerateInfo.responseHandler = '';
        }

        return javascript;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .service('PageHandlerConverter', pageHandlerConverterService);

function pageHandlerConverterService(HandlerActions, ConstantUtils) {
	
	function getEventPart(action) {
		var colonPos = action.indexOf(':');
		return colonPos !== -1 ? action.substr(0, colonPos) : undefined;
	}
	
	function getActionPart(action) {
		var colonPos = action.indexOf(':');
		return colonPos !== -1 ? action.substr(colonPos + 1) : action;
	}
	
	/*********************************
     ** fromServer *******************
     *********************************/
	
    this.fromServer = function (handler) {
    	handler.event = getEventPart(handler.action);
        handler.action = HandlerActions.getByValue(getActionPart(handler.action));
        handler.attr = {name: handler.attr, value: handler.attr};
        return handler;
    };
    
    /*********************************
     ** toServer *********************
     *********************************/

    this.toServer = function (handler) {
    	var action = ConstantUtils.defaultValue(handler.action, HandlerActions);
        handler.action = angular.isDefined(handler.event) ? handler.event + ':' + action : action;
        handler.attr = handler.attr.value;
        return handler;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .service('PageConverter', pageConverterService);

function pageConverterService(PageHandlerConverter) {
    this.toServer = function (page) {
        var localPage = angular.copy(page);
        localPage.handlerData = _.map(angular.copy(localPage.handlerData), PageHandlerConverter.toServer);
        return localPage;
    };

    this.fromServer = function (page) {
        page.handlerData = _.map(page.handlerData, PageHandlerConverter.fromServer);

        if (!(angular.isDefined(page.lastModified) && page.lastModified > 0)) {
            page.lastModified = page.creationTimestamp;
        }
        if (angular.isDefined(page.linkedApps)) {
            page.linkedApps.sort();
        }

        return page;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .controller('ShowMapCtrl', showMapCtrl);

function showMapCtrl($scope, mapData, DataManager) {
    activate();

    function activate() {
        DataManager.setIsLoading(false);

        buildCrumbs();
        initMap();
    }

    function buildCrumbs() {
        $scope.showMapCrumbs = [
            {title: 'HTML Page Manager', url: "#/pageManager"},
            {title: 'Show Map', active: true}
        ];
    }

    function fromServer(mapData) {
    	mapData.nodes.forEach(function(node){
    		node.data.id = node.data.name;
    	});
    	mapData.edges.forEach(function(edge){
    		edge.data.source = edge.data.source.filename.replace('.html', '');
    		edge.data.target = edge.data.target.filename.replace('.html', '');
    	});
    	return mapData;
    }
    
    function initMap() {
        drawMap(fromServer(mapData));
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .controller('PageHandlerTableCtrl', pageHandlerTableCtrl);

function pageHandlerTableCtrl($scope, PageHandlerManager) {
    activate();

    function activate() {}

    $scope.edit = function (idx, handler) {
        $scope.handlerHolder.editedHandler = handler;
        toggleEditMode();
    };

    function toggleEditMode() {
        $scope.handlerEditMode.edit = !$scope.handlerEditMode.edit;
    }

    $scope.delete = function (index) {
        $scope.page.javascript = PageHandlerManager.removeOldHandlers($scope.page.javascript,
            $scope.page.handlerData[index]);

        $scope.page.handlerData.splice(index, 1);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .controller('PageHandlerEditorCtrl', pageHandlerEditorCtrl);

function pageHandlerEditorCtrl($scope, HandlerActions, HotkeyManager, StringUtils, ObjectUtils,
                               CollectionUtils, PageHandlerManager) {
    function activate() {
        $scope.handlerActions = HandlerActions.values;
        $scope.handlerBackup = angular.copy($scope.handlerHolder.editedHandler);

        initActionHandlers();
        initActionOptions();
        initHotkeys();
    }

    function initHotkeys() {
        HotkeyManager.bindEditorHotkeys($scope, $scope.applyChanges, $scope.cancelChanges);
    }

    function initActionHandlers() {
        $scope.actionHandlers = {
            function: {
                action: functionHandler,
                handlerGenerator: false
            },
            webservice: {
                action: webserviceHandler,
                handlerGenerator: true
            },
            navigate: {
                action: navigateHandler,
                handlerGenerator: false
            },
            onload: {
                action: onloadHandler,
                handlerGenerator: true
            }
        };
    }

    function functionHandler() {
        $scope.handlerActionOptions.attributeOptions = parseFunctionNames();
        fixAttribute();

        showHandlerActionOptions(true, true, false, true);
        $scope.handlerActionOptions.attributeLabel = "Function Name";
    }

    function webserviceHandler() {
        $scope.handlerActionOptions.attributeOptions = $scope.serviceNames;
        fixAttribute();

        showHandlerActionOptions(true, true, true, true);
        $scope.handlerActionOptions.attributeLabel = "WebService Name";
    }

    function navigateHandler() {
        $scope.handlerActionOptions.attributeOptions = $scope.pageNames;
        fixAttribute();

        showHandlerActionOptions(true, true, false, true);
        $scope.handlerActionOptions.attributeLabel = "Target Page";
    }

    function onloadHandler() {
        $scope.handlerActionOptions.attributeOptions = $scope.serviceNames;
        fixAttribute();

        showHandlerActionOptions(false, false, true, true);
        $scope.handlerActionOptions.attributeLabel = "WebService Name";
    }

    function initActionOptions() {
        $scope.handlerActionOptions = {
            showKey: false,
            showElement: false,
            showResponseHandler: false,
            showAttribute: false
        };
    }

    function showHandlerActionOptions(showKey, showElement, showResponseHandler, showAttribute) {
        $scope.handlerActionOptions.showKey = showKey;
        $scope.handlerActionOptions.showElement = showElement;
        $scope.handlerActionOptions.showResponseHandler = showResponseHandler;
        $scope.handlerActionOptions.showAttribute = showAttribute;
    }

    $scope.createInitHandler = function () {
        var initHandlerPrefix = $scope.handlerHolder.editedHandler.attr.value === 'custom' ?
            $scope.handlerHolder.editedHandler.customAttribute : $scope.handlerHolder.editedHandler.attr.value;

        $scope.handlerHolder.editedHandler.initHandler = (StringUtils.isNotEmpty(initHandlerPrefix) ?
            initHandlerPrefix + "_" : "") + "InitHandler";

        var functionBody = "function " + $scope.handlerHolder.editedHandler.initHandler + "(serviceName)" + "\n" +
            "{" + "\n" +
            "\n" +
            "}" + "\n\n";

        $scope.page.javascript += functionBody;
    };

    $scope.createResponseHandler = function () {
        var responseHandlerPrefix = $scope.handlerHolder.editedHandler.attr.value === 'custom' ?
            $scope.handlerHolder.editedHandler.customAttribute : $scope.handlerHolder.editedHandler.attr.value;

        $scope.handlerHolder.editedHandler.responseHandler = (StringUtils.isNotEmpty(responseHandlerPrefix) ?
            responseHandlerPrefix + "_" : "") + "ResponseHandler";

        var functionBody = "function " + $scope.handlerHolder.editedHandler.responseHandler + "(response, serviceName)" + "\n" +
            "{" + "\n" +
            "\t//var popupMsg = Storage.get('PopupMessages');" + "\n" +
            "\t//var statusBarMsg = Storage.get('StatusBarMessages');" + "\n" +
            "\n" +
            "}" + "\n\n";

        $scope.page.javascript += functionBody;
    };

    function completeHandlers() {
        completeWebserviceHandler();
    }

    function completeWebserviceHandler() {
        if ($scope.handlerHolder.editedHandler.action.value === 'webservice' &&
            angular.isUndefined($scope.handlerHolder.editedHandler.failureHandler)) {
            $scope.handlerHolder.editedHandler.failureHandler = 'popupErrors:';
        }
    }

    $scope.applyChanges = function () {
        flatAttribute();
        completeHandlers();
        toggleHandlerEditor();
        $scope.form.$setDirty();
        $scope.saveHandlerCallback({});
    };

    function fixAttribute() {
        if (angular.isDefined($scope.handlerHolder.editedHandler.attr) &&
            isCustomAttribute($scope.handlerHolder.editedHandler.attr.value)) {
            $scope.handlerHolder.editedHandler.customAttribute = $scope.handlerHolder.editedHandler.attr.value;
            $scope.handlerHolder.editedHandler.attr = {value: "custom"};
        }
    }

    function flatAttribute() {
        if (angular.isDefined($scope.handlerHolder.editedHandler.attr) &&
            $scope.handlerHolder.editedHandler.attr.value === "custom") {
            $scope.handlerHolder.editedHandler.attr = {value: $scope.handlerHolder.editedHandler.customAttribute};
        }
    }

    function isCustomAttribute(attribute) {
        return !CollectionUtils.containsByProperty($scope.handlerActionOptions.attributeOptions,
                attribute, "name") && attribute !== "custom";
    }

    $scope.cancelChanges = function () {
        if ($scope.handlerHolder.editedHandler.isNew) {
            $scope.page.handlerData = CollectionUtils.removeObjectByReference(
                $scope.page.handlerData, $scope.handlerHolder.editedHandler);
        } else {
            angular.extend($scope.handlerHolder.editedHandler, $scope.handlerBackup);
        }

        toggleHandlerEditor();

        $scope.page.javascript = PageHandlerManager.removeOldHandlers($scope.page.javascript,
            $scope.handlerHolder.editedHandler);
    };

    function toggleHandlerEditor() {
        $scope.handlerEditMode.edit = !$scope.handlerEditMode.edit;
    }

    $scope.keyCodeParser = function (keyEvent) {
        keyEvent.stopPropagation();
        keyEvent.preventDefault();
        $scope.handlerHolder.editedHandler.key = keyEvent.keyCode;
        $scope.showClearKey = true;

        return false;
    };

    $scope.preventDefault = function (keyEvent) {
        keyEvent.stopPropagation();
        keyEvent.preventDefault();

        return false;
    };

    $scope.clearHandlerKey = function () {
        $scope.handlerHolder.editedHandler.key = undefined;
    };

    $scope.handleHandlerAction = function (action) {
        if (angular.isDefined(action)) {
            var isHandlerAlreadyOpen = angular.isDefined($scope.handlerActionOptions.attributeLabel);
            $scope.actionHandlers[action.value].action();

            if (isHandlerAlreadyOpen) {
                $scope.handlerHolder.editedHandler.customAttribute = '';
            }
        }
    };

    function handleEditorMode(updatedMode) {
        if (angular.isDefined(updatedMode)) {
            if ($scope.handlerEditMode.edit &&
                angular.isDefined($scope.handlerHolder.editedHandler)) {
                $scope.handleHandlerAction($scope.handlerHolder.editedHandler.action);
            }
        }
    }

    function parseFunctionNames() {
        var text = $scope.page.javascript;
        text += $scope.page.htmlData;

        var funcNames = [];

        funcNames.push("clearTextFields");
        funcNames.push("clearUserData");

        var matches = text.match(/function\s\w*\([\W]*\)/igm);

        ObjectUtils.forEachProperty(matches, function (i) {
            if ((typeof matches[i] === 'string' && !(matches[i] instanceof String)) &&
                matches[i].indexOf("function") === 0) {
                matches[i] = matches[i].replace("function", "");
                matches[i] = matches[i].split("(")[0].trim();
                funcNames.push(matches[i]);
            }
        });

        return funcNames.map(function (funcName) {
            return {name: funcName, value: funcName};
        });
    }

    activate();

    $scope.$watch('handlerEditMode', handleEditorMode, true);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .controller('PageManagerCtrl', pageManagerCtrl);

function pageManagerCtrl($scope, $route, $location, $window, pages, SystemPropertyManager, CollectionUtils, ToastManager,
                         DataManager, PageManager, AppManager, AppCacheManager, Permissions, PromiseUtils, FunctionUtils, EntityUtils) {
    activate();

    function activate() {
        DataManager.setIsLoading(false);
        $scope.loadingIndicator = {isLoading: false};
        $scope.systemProperties = SystemPropertyManager.systemConfig.properties;
        $scope.pages = pages;

        initGroupActions();
    }

    function initGroupActions() {
        $scope.pageManagementGroupActions = [{
            	name: "Backup",
            	map: getPageName,
            	callback: function (pageNames) {
            		PageManager.backup(pageNames);
            	}
            },{
            	name: "Export",
            	map: getPageName,
            	callback: function (pageNames) {
            		PageManager.backup(pageNames, true);
            	}
            },{	
            	name: "Print",
            	isGlobalAction: true, 
            	callback: function () {
            		$window.print();
            	}
            },{
                name: "Delete",
                loadingIndicator: $scope.loadingIndicator,
                groupLoadingText: "Deleting pages...",
                callback: deletePage,
                onFinishCallback: afterDeletePage
            }];
    }

    function getPageName(page) {
        return page.id;
    }

    function deletePage(page, totalActionedPages) {
    	if (!Permissions.checkEntityAndToast(page)) {
    		return PromiseUtils.emptyPromise([]);
    	}
    	
        return PageManager.delete(page.id, $scope.loadingIndicator, getOverrideConfig(totalActionedPages))
            .then(function () {
                $scope.pages = CollectionUtils.removeObjectByReference($scope.pages, page);
            });
    }

    function getOverrideConfig(totalActionedPages) {
        return totalActionedPages > 3 ? {showSuccessLog: false} : {};
    }

    function afterDeletePage(totalActionedPages) {
        if (totalActionedPages > 3) {
            ToastManager.showSuccess("Deleted " + totalActionedPages + " pages!");
        }
    }

    function afterAppCreateNew(pages, appName) {
    	AppCacheManager.cacheContextApp({
    		pages: pages
    	});
    	$location.path("appEditor/new/");
    }
    
    function afterAppSelection(pages, appName) {
        AppManager.addPages(appName, pages, $scope.loadingIndicator).then(function (success) {
            ToastManager.showSuccess(pages.length + ' services added to ' + appName);
        });
    }

    $scope.handleHtmlFileUpload = function (htmlFile) {
        PageManager.upload(htmlFile, $scope.loadingIndicator)
            .then(function () {
                $route.reload();
            });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
    .controller('PageGridCtrl', pageGridCtrl);

function pageGridCtrl($scope, $route, Permissions, uiGridConstants, ActionBuilder, PageNavigator, PageManager, ObjectUtils) {
    activate();

    function activate() {
        initDefaults();
        initColumnVisibleConfig();
        initColumnDefs();
        initColumnFilter();
        
        if (angular.isDefined($scope.pages)) {
        	initPages();
        	initPagesActions();
        	initPagesFunctions();
        }
    }

    function initDefaults() {
        $scope.readOnly = ObjectUtils.defaultValue($scope.readOnly, false);
        $scope.useSelection = ObjectUtils.defaultValue($scope.useSelection, true);
        $scope.enableSelectAll = ObjectUtils.defaultValue($scope.enableSelectAll, true);
    }

    function initPages() {
        $scope.pages.forEach(function (page) {
            page.editingName = false;
        });
    }

    function initPagesActions() {
        if (!$scope.readOnly) {
            $scope.pages.forEach(function (page) {
                initPageActions(page);
            });
        }
    }

    function initPageActions(page) {
        if (angular.isUndefined(page)) {
            return;
        }

        var actions = [];
        actions.push(ActionBuilder.build("Download", "btn-purple", downloadSinglePage, false, "clip-download", true, true));
        actions.push(ActionBuilder.buildLink("Edit", "btn-blue", '#/pageEditor/edit/{0}/{1}'.format(page.id.app, page.id.filename),
            false, "fa fa-pencil", true, true));
        actions.push(ActionBuilder.build("Duplicate", "btn-green", duplicateHtml, false, "fa fa-copy", true, true));
        actions.push(ActionBuilder.build("Rename", "btn-yellow", preparePageRename, false, "fa fa-edit", true, true));
        actions.push(ActionBuilder.buildLink("Show map", "btn-orange", '#/showMap/{0}/{1}'.format(page.id.app, page.id.filename),
            false, "fa fa-map-marker"));

        page.actionsData = {actions: actions};
    }

    function initPagesFunctions() {
        $scope.pages.forEach(function (page) {
            page.renamePage = renamePage;
            page.reproduceFileName = reproduceFileName;
            page.navigateTo = navigateToPage;
        });
    }

    function initColumnVisibleConfig() {
        $scope.columnVisibleConfig = {};

        var columns = $scope.visibleColumns;
        if (angular.isDefined(columns)) {
            if (!angular.isArray(columns)) {
                columns = [columns];
            }
            columns.forEach(function (_column) {
            	var column = _column === 'fileName'? 'filename' : _column;
                $scope.columnVisibleConfig[column] = true;
            });
        } else {
            $scope.columnVisibleConfig = {
                filename: true,
                ownerApp: true,
                linkedApps: false,
                usedServices: true,
                lastModified: true
            };
        }
    }

    function initColumnDefs() {
    	var nameCellTemplate;
		if ($scope.readOnly) {
			nameCellTemplate = "<a class='aura-grid-column' ng-href='#/pageEditor/edit/{{row.entity.id.app}}/{{COL_FIELD}}'>{{COL_FIELD}}</a>";
		} else {
			nameCellTemplate =
    			'<ap-edited-input control-buttons="row.entity.editingName" model="row.entity.id.filename"' +
                ' is-required="true" required-err-msg="page file name is required"' +
                ' edited-name="pageFileNameInput" save-callback="row.entity.renamePage(row.entity)"' +
                ' cancel-callback="row.entity.reproduceFileName(row.entity)"' +
                ' detail-type="link" detail-callback="row.entity.navigateTo(row.entity)">' +
                '</ap-edited-input>';
		}
    	
        $scope.columnDefs = [
            {
                name: 'id.filename',
                displayName: 'Page Name',
                visible: isColumnVisible('filename'),
                width: "*",
                cellTemplate: nameCellTemplate
            },
            {
                name: 'id.app',
                displayName: 'Owner app',
                visible: isColumnVisible('ownerApp'),
                width: '*'
            },
            {
                name: 'usedServices',
                displayName: 'Service',
                visible: isColumnVisible('usedServices'),
                width: "*"
            },
            {
                name: 'lastModified',
                displayName: 'Modified',
                visible: isColumnVisible('lastModified'),
                cellFilter: 'simpleDate',
                width: "140",
                sort: {
                    direction: uiGridConstants.DESC,
                    priority: 1
                }
            },
            {
                name: 'createdBy',
                displayName: 'Created By',
                width: '120',
                visible: isColumnVisible('createdBy')
            }
        ];

        if (!$scope.readOnly) {
            $scope.columnDefs.push({
                name: 'actionData',
                displayName: 'Actions',
                enableSorting: false,
                enableColumnMenu: false,
                width: "220",
                cellTemplate: '<ap-action-panel action-data="row.entity.actionsData" action-context="row.entity"></ap-action-panel>'
            });
        }
    }

    function isColumnVisible(column) {
        return angular.isDefined($scope.columnVisibleConfig[column]) &&
            $scope.columnVisibleConfig[column];
    }

    function initColumnFilter() {
        $scope.filteredColumns = ['id.filename', 'usedServices'];
    }

    function renamePage(page) {
        if (page.id.filename === page.originalFileName) {
            page.editingName = false;
            return;
        }

        fixPageName(page);
        PageManager.rename(page.originalFileName, page.id.app, page.id.filename, $scope.loadingIndicator)
            .then(function (response) {
                page.editingName = false;
                $route.reload();
            });
    }

    function fixPageName(page) {
        if (!page.id.filename.endsWith(".html")) {
            page.id.filename = page.id.filename + ".html";
        }
    }

    function reproduceFileName(page) {
    	page.id.filename = page.originalFileName;
        page.editingName = false;
    }

    function navigateToPage(page) {
        PageNavigator.navigateTo(page.id);
    }

    function downloadSinglePage(page) {
        PageManager.backup([page.id]);
    }

    function duplicateHtml(page) {
    	if (Permissions.blockOperator()) {
    		return;
    	}
        PageManager.clone(page.id, $scope.loadingIndicator).then($route.reload);
    }

    function preparePageRename(page) {
    	if (!Permissions.checkAndToast(page.createdBy) || Permissions.blockOperator()) {
    		return;
    	}
    	
        page.originalFileName = page.id.filename;
        page.editingName = true;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
	.controller('PageEditorHeaderCtrl', pageEditorHeaderCtrl);

function pageEditorHeaderCtrl($scope, $route, localStorageService, HotkeyManager, DialogManager,
                              PageManager, PageNavigator, ToastManager) {
	function activate() {
		initHotkeys();
	}

	function initHotkeys() {
		HotkeyManager.bindEditorHotkeys($scope, $scope.savePage);
	}

	$scope.savePage = function () {
		if ($scope.showHandlerTable) {
			invokeSave();
		} else {
			$scope.jsonHandlerParser({}).then(invokeSave);
		}
	};

	function invokeSave() {
		notifyOfAppOverwrite();
		PageManager.update($scope.page, $scope.loadingIndicator)
			.then($scope.pageEditorForm.$setPristine);
	}

	function notifyOfAppOverwrite() {
		if (angular.isUndefined($scope.page.linkedApps) || $scope.page.linkedApps.length === 0 ||
			localStorageService.get('NOTIFIED_ON_PAGE_OVERWRITING') !== null) {
			return;
		}

		ToastManager.showInfo('Notice: your changes will be overwritten if you choose to regenerate app ' +
			$scope.page.linkedApps.toString() + '!');

		localStorageService.set('NOTIFIED_ON_PAGE_OVERWRITING', true);
	}

	$scope.restorePage = function () {
		DialogManager.openConfirmationDialog({
			title: 'Page reset',
			description: 'You are about to discard any unsaved changes. Do you wish to continue?',
			saveLabel: 'Discard',
			onConfirmCallback: $route.reload
		});
	};

	$scope.downloadSinglePage = function (pageId) {
		PageManager.backup([pageId]);
	};

	$scope.navigateToPage = function (pageId) {
		PageNavigator.navigateTo(pageId);
	};

	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.page')
	.controller('PageEditorCtrl', pageEditorCtrl);

function pageEditorCtrl($q, $scope, $routeParams, page, pages, services, AppVisualizerSuggestions,
						ToastManager, CollectionUtils, DataManager, DialogManager, PageManager, ModeParser) {
	
	function activate() {
		DataManager.setIsLoading(false);
		$scope.pageId = $routeParams.pageId;
		$scope.jsEditorHolder = {};
		$scope.appVisualizerAutoCompleteArray = AppVisualizerSuggestions.asAutoCompleteArray();
		$scope.loadingIndicator = {isLoading: false};
		$scope.handlerHolder = {};

		initMode();
		handlePage(page);
		preparePageNames(pages);
		handleServices(services);
		initHandlerEditMode();
		buildCrumbs();
	}

	function initMode() {
		$scope.mode = {};
		ModeParser.parse($scope.mode, $routeParams.mode);
	}

	function handlePage(page) {
		$scope.page = page;
		$scope.creationTimestamp = page.creationTimestamp;

		$scope.inputElements = $(page.htmlData).find('input,button')
			.map(function (index, elem) {
				return $(elem).attr('id');
			});
	}

	function preparePageNames(pages) {
		try {
			$scope.pageNames = pages.map(function (e, i) {
				return {name: e.id.filename, value: e.id.filename};
			});
		} catch (e) {
			ToastManager.showError(e, 'Error while parsing pages');
			$scope.pageNames = [];
		}
	}

	function handleServices(services) {
		if (angular.isUndefined(services) || services === "") {
			$scope.serviceNames = [];
		}

		try {
			$scope.serviceNames = services.map(function (e, i) {
				return {name: e.name, value: e.name};
			});
		} catch (e) {
			ToastManager.showError(e, 'Error while parsing services');
			$scope.serviceNames = [];
		}
	}

	function initHandlerEditMode() {
		$scope.handlerEditMode = {};
		ModeParser.parse($scope.handlerEditMode, "details");
	}

	function buildCrumbs() {
		$scope.editPageCrumbs = [
			{title: "HTML Page Manager", url: "#/pageManager"},
			{title: "Edit Page"},
			{
				title: (angular.isDefined($scope.page.id.app) ? $scope.page.id.app + '/' : '') + $scope.page.id.filename,
				active: true
			}
		];
	}

	$scope.showHandlerTable = true;
	$scope.toggleHandlerTableButtonTitle = "Show JSON";

	function switchToHandlersTable() {
		$scope.toggleHandlerTableButtonTitle = "Show JSON";
		$scope.showHandlerTable = true;
	}

	$scope.toggleHandlerTable = function () {
		if (!$scope.showHandlerTable) {
			$scope.parseHandlersJson();
		} else {
			switchToHandlersJson();
		}
	};

	$scope.savePage = function () {
		PageManager.update($scope.page, $scope.loadingIndicator)
			.then($scope.pageEditorForm.$setPristine);
	};

	$scope.handleEditToggler = function () {
		if (!$scope.handlerEditMode.edit) {
			addHandler();
		} else if (angular.isDefined($scope.handlerHolder.editedHandler) &&
			$scope.handlerHolder.editedHandler.isNew) {
			$scope.page.handlerData = CollectionUtils.removeObjectByReference(
				$scope.page.handlerData, $scope.handlerHolder.editedHandler);
		}

		toggleHandlerEditMode();
	};

	$scope.handleSavedHandler = function () {
		if (!$scope.showHandlerTable) {
			$scope.jsonHolder.jsonEditor = angular.toJson($scope.page.handlerData, true);
		}
	};

	$scope.parseHandlersJson = function() {
		var deferredJsonParse = $q.defer();

		try {
			$scope.page.handlerData = angular.fromJson($scope.jsonHolder.jsonEditor);
			switchToHandlersTable();
			deferredJsonParse.resolve();
		} catch (e) {
			DialogManager.openConfirmationDialog({
				title: 'Invalid json in handlers editor',
				description: 'Do you wish to restore the last valid handlers configuration?',
				saveLabel: 'Restore',
				onConfirmCallback: function () {
					switchToHandlersTable();
					deferredJsonParse.reject();
				}
			}).then(deferredJsonParse.reject);
		}

		return deferredJsonParse.promise;
	};

	function switchToHandlersJson() {
		$scope.jsonHolder = {
			jsonEditor: angular.toJson($scope.page.handlerData, true)
		};

		$scope.toggleHandlerTableButtonTitle = "Show Table";
		$scope.showHandlerTable = false;
	}

	function addHandler() {
		initHandler();
		$scope.page.handlerData.push($scope.handlerHolder.editedHandler);
	}

	function initHandler() {
		$scope.handlerHolder.editedHandler = {
			isNew: true,
			element: '',
			attr: '',
			initHandler: '',
			responseHandler: '',
			customAttribute: ''
		};
	}

	function toggleHandlerEditMode() {
		$scope.handlerEditMode.edit = !$scope.handlerEditMode.edit;
	}

	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester', [
    'ap.serviceManager.core'
]);
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testAgentTable', testAgentTableDirective);

function testAgentTableDirective() {
    return {
        restrict: 'AE',
        scope: {
            testAgents: '=',
            selectedTestAgent: '=',
            createdTestCase: '=?'
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/monitor/agent/testAgentTable.html',
        controller: 'TestAgentTableCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testAgentManager', testAgentManagerDirective);

function testAgentManagerDirective() {
    return {
        scope: {
            testAgentHolder: '=',
            testCases: '=',
            testGroups: '=',
            selectedTestAgent: '=',
            loadingIndicator: '=?'
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/monitor/agent/testAgentManager.html',
        controller: 'TestAgentManagerCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseValidationOptions', testCaseValidationOptionsDirective);

function testCaseValidationOptionsDirective() {
    return {
        restrict: 'AE',
        scope: {
            mode: '=',
            testCase: '=',
            testCaseOutputParam: '=',
            closeCallback: '&'
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/validation/testCaseValidationOptionsDialog.html',
        controller: 'TestCaseValidationOptionsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseNameValidator', testCaseNameValidator);

function testCaseNameValidator($q, TestCaseManager, TestGroupManager) {
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$asyncValidators.testCaseName = function (modelValue) {
                return TestCaseManager.exist(modelValue).then(function (testCaseExists) {
                    return testCaseExists ? $q.reject("test case found") : true;
                }, function () {
                    return true;
                });
            };

            ctrl.$asyncValidators.testGroupName = function (modelValue) {
                return TestGroupManager.exist(modelValue).then(function (testGroupExists) {
                    return testGroupExists ? $q.reject('test group found') : true;
                }, function () {
                    return true;
                });
            };
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseAdvancedValidations', testCaseAdvancedValidationsDirective);

function testCaseAdvancedValidationsDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            mode: '=',
            collapseManager: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseAdvancedValidations.html',
        controller: 'TestCaseAdvancedValidationsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseLogGrid', testCaseLogGridDirective);

function testCaseLogGridDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCaseAgent: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/monitor/testCaseLogGrid.html',
        controller: 'TestCaseLogGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testAgentAdvancedDetails', testAgentAdvancedDetailsDirective);

function testAgentAdvancedDetailsDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCaseLogs: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/monitor/testAgentAdvancedDetails.html',
        controller: 'TestAgentAdvancedDetailsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testGroupManager', testGroupManagerDirective);

function testGroupManagerDirective() {
    return {
        scope: {
            testGroups: '=',
            testCases: '=',
            editedTestGroup: '=',
            previousEditedGroup: '=',
            createdTestCase: '=',
            runTestGroupCallback: '&',
            saveAllowed: '=?'
        },
        templateUrl: 'app/modules/auraTester/views/managers/testGroup/testGroupManager.html',
        controller: 'TestGroupManagerCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testGroupGrid', testGroupGridDirective);

function testGroupGridDirective() {
    return {
        scope: {
            testGroups: '=',
            testCases: '=',
            editedTestGroup: '=',
            previousEditedGroup: '=',
            createdTestCase: '=',
            runTestGroupCallback: '&',
            saveAllowed: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testGroup/testGroupGrid.html',
        controller: 'TestGroupGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testGroupDetails', testGroupDetailsDirective);

function testGroupDetailsDirective() {
    return {
        restrict: 'AE',
        scope: {
            testGroup: '=',
            mode: '=',
            collapseManager: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testGroup/testGroupDetails.html',
        controller: 'TestGroupDetailsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseTable', testCaseTableDirective);

function testCaseTableDirective() {
    return {
        restrict: 'AE',
        scope: {
            service: '=',
            collapseManager: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseTable.html',
        controller: 'TestCaseTableCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseServiceDetails', testCaseServiceDetailsDirective);

function testCaseServiceDetailsDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            mode: '=',
            collapseManager: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseServiceDetails.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseSelector', testCaseSelectorDirective);

function testCaseSelectorDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            testCases: '=',
            testGroups: '=?',
            singularityContext: '=?',
            testCaseSelectCallback: '&',
            context: '@'
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseSelector.html',
        controller: 'TestCaseSelectorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseReport', testCaseReportDirective);

function testCaseReportDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            context: '@',
            reportCallback: '&',
            shouldRunTestCase: '=',
            collapseManager: '=?',
            shouldUnCollapseAll: '=?'
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseReport.html',
        controller: 'TestCaseReportCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseParameterizedValue', testCaseParameterizedValueDirective);

function testCaseParameterizedValueDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            mode: '=',
            param: '=',
            shouldDisable: '=?'
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseParameterizedValue.html',
        controller: 'TestCaseParameterizedValueCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseOutputParameterTable', testCaseOutputParameterTableDirective);

function testCaseOutputParameterTableDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            mode: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseOutputParameterTable.html',
        controller: 'TestCaseOutputParameterTableCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseManager', testCaseManagerDirective);

function testCaseManagerDirective() {
    return {
        scope: {
            mode: '=',
            testCases: '=',
            testGroup: '=?',
            context: '@',
            collapseManager: '=',
            licenseDetails: '=?'
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseManager.html',
        controller: 'TestCaseManagerCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseManagementHeader', testCaseManagementHeaderDirective);

function testCaseManagementHeaderDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            mode: '=',
            shouldRunTestCase: '=',
            collapseManager: '=',
            saveAllowed: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseManagementHeader.html',
        controller: 'TestCaseManagementHeaderCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseInputParameterTable', testCaseInputParameterTableDirective);

function testCaseInputParameterTableDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            mode: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseInputParameterTable.html',
        controller: 'TestCaseInputParameterTableCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseGroupSelector', testCaseGroupSelectorDirective);

function testCaseGroupSelectorDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            mode: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseGroupSelector.html',
        controller: 'TestCaseGroupSelectorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseGrid', testCaseGridDirective);

function testCaseGridDirective() {
    return {
        scope: {
            testCases: '=',
            collapseManager: '=',
            context: '@',
            readOnly: '=?',
            useSelection: '=?',
            enableSelectAll: '=?',
            enableDraggable: '=?',
            enableSorting: '=?'
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseGrid.html',
        controller: 'TestCaseGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseDetails', testCaseDetailsDirective);

function testCaseDetailsDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            mode: '=',
            collapseManager: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseDetails.html',
        controller: 'TestCaseDetailsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseBatchConfig', testCaseBatchConfigDirective);

function testCaseBatchConfigDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            mode: '=',
            collapseManager: '='
        },
        templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseBatchConfig.html',
        controller: 'TestCaseBatchConfigCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testGroupNameEditor', testGroupNameEditorDirective);

function testGroupNameEditorDirective() {
    return {
        restrict: 'AE',
        scope: {
            testGroup: '=',
            mode: '='
        },
        templateUrl: 'app/modules/auraTester/views/editors/testGroup/testGroupNameEditor.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testGroupEditorHeader', testGroupEditorHeaderDirective);

function testGroupEditorHeaderDirective() {
    return {
        restrict: 'AE',
        scope: {
            testGroup: '=',
            mode: '=',
            testGroupRunner: '=',
            testCases: '=',
            collapseManager: '=',
            licenseDetails: '=',
            saveAllowed: '=',
            saveCallback: '&'
        },
        templateUrl: 'app/modules/auraTester/views/editors/testGroup/testGroupEditorHeader.html',
        controller: 'TestGroupEditorHeaderCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseNameEditor', testCaseNameEditorDirective);

function testCaseNameEditorDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            mode: '='
        },
        templateUrl: 'app/modules/auraTester/views/editors/testCase/testCaseNameEditor.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .directive('testCaseEditorHeader', testCaseEditorHeaderDirective);

function testCaseEditorHeaderDirective() {
    return {
        restrict: 'AE',
        scope: {
            testCase: '=',
            mode: '=',
            shouldRunTestCase: '=',
            collapseManager: '=',
            saveAllowed: '=',
            createdTestCaseContext: '@',
            testCaseForm: '='
        },
        templateUrl: 'app/modules/auraTester/views/editors/testCase/testCaseEditorHeader.html',
        controller: 'TestCaseEditorHeaderCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestGroupCacheManager', testGroupCacheManagerService);

function testGroupCacheManagerService(EntityCacheManager) {
    var CACHE_KEY = 'testGroups';

    this.cacheTestGroup = function (testGroup) {
        EntityCacheManager.cacheEntity(CACHE_KEY, testGroup);
    };

    this.getTestGroup = function (testGroupName) {
        return EntityCacheManager.getEntity(CACHE_KEY, testGroupName);
    };

    this.removeTestGroup = function (testGroupName) {
        EntityCacheManager.removeEntity(CACHE_KEY, testGroupName);
    };

    this.cacheTestGroups = function (testGroups) {
        EntityCacheManager.cacheEntities(CACHE_KEY, testGroups);
    };

    this.getTestGroups = function (requestedTestGroups) {
        return EntityCacheManager.getEntities(CACHE_KEY, requestedTestGroups);
    };

    this.removeTestGroups = function (testGroups) {
        EntityCacheManager.removeEntities(CACHE_KEY, testGroups);
    };

    this.cacheContextTestGroup = function (testGroup) {
        EntityCacheManager.cacheContextEntity(CACHE_KEY, testGroup);
    };

    this.getContextTestGroup = function () {
        return EntityCacheManager.getContextEntity(CACHE_KEY);
    };

    this.removeContextTestGroup = function () {
        EntityCacheManager.removeContextEntity(CACHE_KEY);
    };

    this.hasContextTestGroup = function () {
        return EntityCacheManager.hasContextEntity(CACHE_KEY);
    };

    this.clear = function () {
        EntityCacheManager.clear(CACHE_KEY);
    };

    this.getLastModification = function () {
        return EntityCacheManager.getLastModification(CACHE_KEY);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseValidationPresenter', testCaseValidationPresenterService);

function testCaseValidationPresenterService(StringUtils, TestCaseBatchParameterUtils, ParameterValidationUtils) {
    this.present = function (testCase, outputParam) {
        return ParameterValidationUtils.getPresentedValue(testCase, outputParam, getPresentedTestedValue);
    };

    function getPresentedTestedValue(testCase, outputParam) {
        if (StringUtils.isEmpty(outputParam.testedValue) &&
            angular.isUndefined(outputParam.columnNumber < 0)) {
            return "";
        }

        return StringUtils.isNotEmpty(outputParam.testedValue) ?
            " '{0}'".format(outputParam.testedValue) :
        " of the column '" + TestCaseBatchParameterUtils.getHeaderColumn(
            testCase, outputParam.columnNumber).name + "'";
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseBatchParameterUtils', testCaseBatchParameterUtilsService);

function testCaseBatchParameterUtilsService() {
    this.getHeaderColumn = function (testCase, index) {
        if (angular.isDefined(testCase.parameters) &&
            angular.isDefined(testCase.parameters.headers)) {
            return testCase.parameters.headers[index - 1];
        } else {
            return 'column' + index;
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseCacheManager', testCaseCacheManagerService);

function testCaseCacheManagerService(EntityCacheManager, TestGroupCacheManager) {
    var CACHE_KEY = 'testCases';

    this.cacheTestCase = function (testCase) {
        EntityCacheManager.cacheEntity(CACHE_KEY, testCase);
    };

    this.getTestCase = function (testCaseName) {
        return EntityCacheManager.getEntity(CACHE_KEY, testCaseName);
    };

    this.removeTestCase = function (testCaseName) {
        EntityCacheManager.removeEntity(CACHE_KEY, testCaseName);
        removeLinkedTestCasesFromTestGroups(testCaseName);
    };

    function removeLinkedTestCasesFromTestGroups(testCaseName) {
        TestGroupCacheManager.getTestGroups().forEach(function (testGroup) {
            testGroup.testCases = _.filter(testGroup.testCases, function (testCase) {
                return testCase.name !== testCaseName;
            });

            TestGroupCacheManager.cacheTestGroup(testGroup);
        });
    }

    this.cacheTestCases = function (testCases) {
        EntityCacheManager.cacheEntities(CACHE_KEY, testCases);
    };

    this.getTestCases = function (requestedTestCases) {
        return EntityCacheManager.getEntities(CACHE_KEY, requestedTestCases);
    };

    this.removeTestCases = function () {
        EntityCacheManager.removeEntities(CACHE_KEY);
    };

    this.cacheContextTestCase = function (testCase) {
        EntityCacheManager.cacheContextEntity(CACHE_KEY, testCase);
    };

    this.getContextTestCase = function () {
        return EntityCacheManager.getContextEntity(CACHE_KEY);
    };

    this.removeContextTestCase = function () {
        EntityCacheManager.removeContextEntity(CACHE_KEY);
    };

    this.hasContextTestCase = function () {
        return EntityCacheManager.hasContextEntity(CACHE_KEY);
    };

    this.clear = function () {
        EntityCacheManager.clear(CACHE_KEY);
    };

    this.getLastModification = function () {
        return EntityCacheManager.getLastModification(CACHE_KEY);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseLogManager', testCaseLogManagerService);

function testCaseLogManagerService(EntityManager, StringUtils, PromiseUtils) {
    var self = this;

    activate();

    function activate() {
        self.testCaseLogsConfig = {
            type: 'Test Case Log',
            getAllUrl: '/Macro/TestCaseLogs',
            silentLoad: true
        };
    }

    this.getAll = function (testCaseName) {
        return StringUtils.isNotEmpty(testCaseName) ?
            EntityManager.getAll(self.testCaseLogsConfig, testCaseName) :
            PromiseUtils.emptyPromise([]);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestAgentManager', testAgentManagerService);

function testAgentManagerService(EntityManager, NavigationManager, TestAgentConverter, HttpHandler, ObjectUtils, SystemPropertyManager, Permissions) {
    var self = this;

    activate();

    function activate() {
        self.testAgentConfig = {
            type: 'test case agent',
            getUrl: '/Macro/TestAgent/',
            getAllUrl: '/Macro/TestAgents',
            createUrl: '/Macro/TestAgent',
            updateUrl: '/Macro/TestAgent',
            deleteUrl: '/Macro/TestAgent/',
            resetUrl: '/Macro/TestAgent/',
            backupUrl: '/Macro/Backup',
            fromServerConverter: TestAgentConverter.fromServer,
            toServerConverter: TestAgentConverter.toServer
        };
    }

    this.get = function (testAgentName) {
        return EntityManager.get(self.testAgentConfig, testAgentName);
    };

    this.getAll = function () {
        return EntityManager.getAll(self.testAgentConfig).then(afterGetAll);
    };
    
    function afterGetAll(testAgents) {
    	return SystemPropertyManager.get(true).then(function(systemProperties) {
            return Permissions.filterIfNecessary(testAgents, systemProperties);
        }); 
    }

    this.create = function (testAgent, loadingIndicator) {
        return EntityManager.create(self.testAgentConfig, testAgent, loadingIndicator);
    };

    this.update = function (testAgent, loadingIndicator) {
        return EntityManager.update(self.testAgentConfig, angular.copy(testAgent), loadingIndicator);
    };

    this.delete = function (testAgent, loadingIndicator, overrideConfig) {
        var overridenConfig = ObjectUtils.override(self.testAgentConfig, overrideConfig);
        return EntityManager.delete(overridenConfig, testAgent.name, loadingIndicator);
    };

    this.backup = function (testAgents) {
        if (!angular.isArray(testAgents)) {
            testAgents = [testAgents];
        }
        
        var encodedTestAgents = encodeURIComponent(JSON.stringify({testAgents: testAgents}));
        NavigationManager.goToServer("{0}?data={1}".format(self.testAgentConfig.backupUrl, encodedTestAgents));
    };

    this.reset = function (testCaseAgent, loadingIndicator, overrideConfig) {
        var config = ObjectUtils.override(self.testAgentConfig, overrideConfig);

        return handleMonitorAction(testCaseAgent, loadingIndicator, config, 'reset', 'resetting', 'reset');
    };

    this.activate = function (testCaseAgent, loadingIndicator, overrideConfig) {
        var config = ObjectUtils.override(self.testAgentConfig, overrideConfig);

        return handleMonitorAction(testCaseAgent, loadingIndicator, config, 'activate', 'activation', 'activated');
    };

    this.pause = function (testCaseAgent, loadingIndicator, overrideConfig) {
        var config = ObjectUtils.override(self.testAgentConfig, overrideConfig);

        return handleMonitorAction(testCaseAgent, loadingIndicator, config, 'pause', 'pausing', 'paused');
    };

    function handleMonitorAction(testCaseAgent, loadingIndicator, config, action, actionProgressLog, actionTerminationLog) {
        return EntityManager.handleHttpRequest({
            executionLog: actionProgressLog + config.type + ' : ' + testCaseAgent.name,
            httpHandlerFunction: HttpHandler.patch,
            httpHandlerUrl: config.resetUrl + testCaseAgent.name,
            httpHandlerConfig: {headers: {action: action}},
            loadingIndicator: loadingIndicator,
            entityId: testCaseAgent.name,
            entityConfig: config,
            logTitle: 'Agent ' + actionProgressLog,
            expectedErrorLog: testCaseAgent.name + ' could not be ' + actionTerminationLog + '!',
            unexpectedErrorLog: 'Something went wrong during ' + testCaseAgent.name + ' ' + actionProgressLog + ' :(',
            successLog: testCaseAgent.name + ' ' + actionTerminationLog + ' successfully!'
        });
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestAgentFactory', testAgentFactoryService);

function testAgentFactoryService(AgentIntervals, UserManager) {
    var self = this;

    this.buildDefaultAgent = function (agentId) {
        return {
            name: agentId,
            active: false,
            timestamp: new Date().getTime(),
            executionInterval: AgentIntervals.getByValue(600000)
        };
    };

    this.buildAgentFromTestCase = function (testCase) {
        var agent = self.buildDefaultAgent(testCase.name);
        agent.testCase = testCase;
        agent.createdBy = UserManager.getUser().username;
        return agent;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestAgentConverter', testAgentConverterService);

function testAgentConverterService(AgentIntervals) {
    this.toServer = function (testAgent) {
        testAgent.executionInterval = angular.isDefined(testAgent.executionInterval) ?
            testAgent.executionInterval.value : AgentIntervals.default.value;
        testAgent.timestamp = new Date().getTime();
        return testAgent;
    };

    this.fromServer = function (testAgent) {
        testAgent.executionInterval = AgentIntervals.getByValue(testAgent.executionInterval);
        return testAgent;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestGroupManager', testGroupManagerService);

function testGroupManagerService(TestCaseManager, EntityManager, NavigationManager, TestGroupConverter, TestGroupCacheManager,
                                 PromiseUtils, CollectionUtils, SystemPropertyManager, Permissions, ObjectUtils) {
    var self = this;

    activate();

    function activate() {
        self.testGroupManagerConfig = {
            type: 'test group',
            getUrl: '/Macro/TestGroup/',
            getAllUrl: '/Macro/TestGroups',
            createUrl: '/Macro/TestGroup',
            updateUrl: '/Macro/TestGroup',
            deleteUrl: '/Macro/TestGroup/',
            existUrl: '/Macro/TestGroup/',
            backupUrl: '/Macro/Backup',
            fromServerConverter: TestGroupConverter.fromServer,
            toServerConverter: TestGroupConverter.toServer
        };
    }

    this.get = function (testGroupName) {
        return EntityManager.get(self.testGroupManagerConfig, testGroupName).then(function (testGroup) {
            return (CollectionUtils.isEmpty(testGroup.testCases)) ? PromiseUtils.emptyPromise(testGroup) :
                TestCaseManager.getAll(testGroup.testCases).then(function (testCases) {
                    testGroup.testCases = CollectionUtils.fixIndices(testCases);
                    return testGroup;
                });
        });
    };

    this.getAll = function (optionalRequestedTestGroups) {
        return angular.isDefined(optionalRequestedTestGroups) && optionalRequestedTestGroups.length === 0 ?
            PromiseUtils.emptyPromise([]) :
            EntityManager.getAll(self.testGroupManagerConfig, undefined,
                prepareGetAllHttpConfig(optionalRequestedTestGroups)).then(function (fetchedTestGroups) {
                return afterGetAll(optionalRequestedTestGroups, fetchedTestGroups);
            });
    };

    function prepareGetAllHttpConfig(requestedTestGroups) {
        return {
            headers: {
                requestedTestGroups: requestedTestGroups,
                lastModification: TestGroupCacheManager.getLastModification().getTime()
            }
        };
    }

    function afterGetAll(requestTestGroups, fetchedTestGroups) {
        return SystemPropertyManager.get(true).then(function (systemProperties) {
            fetchedTestGroups = Permissions.filterIfNecessary(fetchedTestGroups, systemProperties);
            TestGroupCacheManager.cacheTestGroups(fetchedTestGroups);
            return CollectionUtils.isNotEmpty(fetchedTestGroups) ? fetchedTestGroups :
                Permissions.filterIfNecessary(TestGroupCacheManager.getTestGroups(requestTestGroups), systemProperties);
        });
    }

    this.create = function (testGroup) {
        return EntityManager.create(self.testGroupManagerConfig, testGroup)
            .then(handlePostTestGroupUpdate);
    };

    this.update = function (testGroup, config) {
        overrideConfig(config);

        return EntityManager.update(self.testGroupManagerConfig, testGroup)
            .then(handlePostTestGroupUpdate);
    };

    function overrideConfig(config) {
        if (!ObjectUtils.isEmpty(config)) {
            self.testGroupManagerConfig.showSuccessLog = config.showSuccessLog;
        }
    }

    this.exist = function (testCaseName, loadingIndicator) {
        return EntityManager.exist(self.testGroupManagerConfig, testCaseName, loadingIndicator);
    };

    function handlePostTestGroupUpdate(updateTestGroup) {
        TestGroupCacheManager.cacheTestGroup(updateTestGroup);
        return updateTestGroup;
    }

    this.delete = function (testGroup) {
        return EntityManager.delete(self.testGroupManagerConfig, testGroup.name)
            .then(function (deleteTestCaseResponse) {
                TestGroupCacheManager.removeTestGroup(testGroup.name);
                return deleteTestCaseResponse;
            });
    };

    this.backup = function (testGroups) {
        var encodedTestGroups = encodeURIComponent(JSON.stringify({testGroups: testGroups}));
        NavigationManager.goToServer("{0}?data={1}".format(self.testGroupManagerConfig.backupUrl, encodedTestGroups));
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestGroupFactory', testGroupFactoryService);

function testGroupFactoryService() {
    this.buildDefault = function (testCases) {
        return {
            name: '',
            description: '',
            stopOnFail: false,
            sleepBetweenTests: 100,
            testCases: testCases,
            timestamp: new Date().getTime(),
            context: 'Test Groups'
        };
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestGroupConverter', testGroupConverterService);

function testGroupConverterService(ObjectUtils, CollectionUtils) {
    this.toServer = function (testGroup) {
        var fixedTestGroup = ObjectUtils.isNotEmpty(testGroup) ? {
            name: testGroup.name,
            description: testGroup.description,
            stopOnFail: testGroup.stopOnFail,
            sleepBetweenTests: testGroup.sleepBetweenTests,
            createdBy: testGroup.createdBy
        } : {};

        fixedTestGroup.testCases = convertTestCases(testGroup);
        return fixedTestGroup;
    };

    function convertTestCases(testGroup) {
        return CollectionUtils.isEmpty(testGroup.testCases) ? [] :
            testGroup.testCases.map(function (testCase) {
                return angular.isDefined(testCase.name) ? testCase.name : testCase;
            });
    }

    this.fromServer = function (testGroup) {
        return ObjectUtils.isNotEmpty(testGroup) ? {
            name: testGroup.name,
            description: testGroup.description,
            stopOnFail: ObjectUtils.defaultValue(testGroup.stopOnFail, false),
            sleepBetweenTests: ObjectUtils.defaultValue(testGroup.sleepBetweenTests, 100),
            createdBy: testGroup.createdBy,
            testCases: unpackTestCases(ObjectUtils.defaultValue(testGroup.testCases, '')),
            timestamp: testGroup.timestamp,
            context: 'Test Groups'
        } : undefined;
    };

    function unpackTestCases(testCases) {
        if (angular.isUndefined(testCases) || testCases === null) {
            return '';
        }

        return _.filter(testCases, function (testCase) {
            return angular.isDefined(testCase) && testCase.length > 1;
        });
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseValidator', testCaseValidatorService);

function testCaseValidatorService(StringUtils, CollectionUtils) {

    this.validate = function (testCase) {
        if (!validateBatchParameters(testCase)) {
            return "Warning: Batch parameters file exists but no fields were parameterized. Save anyway?";
        }

        return true;
    };

    function validateBatchParameters(testCase) {
        return StringUtils.isEmpty(testCase.batchParameters) ||
            (StringUtils.isNotEmpty(testCase.batchParameters) &&
            hasParameterizedValue(testCase));
    }

    function hasParameterizedValue(testCase) {
        return CollectionUtils.isNotEmpty(testCase.inputParams) &&
            _.some(testCase.inputParams, function (inputParam) {
                return angular.isDefined(inputParam.parameterizedValue) &&
                    StringUtils.isNotEmpty(inputParam.parameterizedValue.name);
            });
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseSelectorDialogManager', testCaseSelectorDialogManagerService);

function testCaseSelectorDialogManagerService($mdDialog, ToastManager, TestCaseCacheManager) {
	
    this.open = function (options) {
        if (TestCaseCacheManager.getTestCases().length > 0) {
            $mdDialog.show({
                controller: 'TestCaseSelectorDialogCtrl',
                templateUrl: 'app/modules/auraTester/views/managers/testCase/testCaseSelectorDialog.html',
                clickOutsideToClose: true,
                bindToController: true,
                locals: {
                    context: options.context,
                    testCases: options.testCases,
                    testGroups: options.testGroups,
                    singularityContext: options.singularityContext
                }
                
            }).then(function (testCase) {
            	if (options.handleTestCaseSelection) {
                    options.handleTestCaseSelection(testCase);
                }
            }, function () {
            	if (options.handleTestCaseSelectionCancel) {
                    options.handleTestCaseSelectionCancel({});
                }
            });
        } else {
            ToastManager.showWarning('Can not select test case since no test cases were found, ' +
                'please create at least one test case', 'Test Case Selection');
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseReportConverter', testCaseReportConverterService);

function testCaseReportConverterService(ObjectUtils, PrimitiveUtils) {
    this.fromServer = function (testCaseReport) {
        if (ObjectUtils.isNotEmpty(testCaseReport)) {
            ObjectUtils.iterateProperties(testCaseReport, '', transformPrimitive);
        }

        return testCaseReport;
    };

    function transformPrimitive(object, property) {
        object[property] = PrimitiveUtils.stringToPrimitive(object[property]);
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseOutputParamConverter', testCaseOutputParamConverterService);

function testCaseOutputParamConverterService(ObjectUtils, ValidationFunctions) {
    this.toServer = function (outputParam, testCaseName) {
        outputParam.testCaseName = testCaseName;
        outputParam.validationFunction = outputParam.validationFunction.value;
        return outputParam;
    };

    this.fromServer = function (outputParam) {
        return ObjectUtils.isNotEmpty(outputParam) ? {
            name: outputParam.name,
            testCaseName: outputParam.testCaseName,
            index: outputParam.index,
            label: outputParam.label,
            columnNumber: outputParam.columnNumber,
            validationFunction: ObjectUtils.defaultValue(ValidationFunctions.getByValue(outputParam.validationFunction)),
            testedValue: outputParam.testedValue
        } : undefined;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseManager', testCaseManagerService);

function testCaseManagerService(EntityManager, NavigationManager, DataManager, TestCaseConverter,
                                TestCaseCacheManager, CollectionUtils, ObjectUtils,
                                PromiseUtils, SystemPropertyManager, Permissions) {
    var self = this;

    activate();

    function activate() {
        self.testCaseManagerConfig = {
            type: 'test case',
            getUrl: '/Macro/TestCase/',
            getAllUrl: '/Macro/TestCases',
            createUrl: '/Macro/TestCase',
            updateUrl: '/Macro/TestCase',
            deleteUrl: '/Macro/TestCase/',
            existUrl: '/Macro/TestCase/',
            backupUrl: '/Macro/Backup',
            fromServerConverter: TestCaseConverter.fromServer,
            toServerConverter: TestCaseConverter.toServer
        };
    }

    this.get = function (testCaseName) {
        return EntityManager.get(self.testCaseManagerConfig, testCaseName);
    };

    this.getAll = function (optionalRequestedTestCases, forceFetch) {
        return angular.isDefined(optionalRequestedTestCases) && optionalRequestedTestCases.length === 0 ?
            PromiseUtils.emptyPromise([]) :
            EntityManager.getAll(self.testCaseManagerConfig, undefined,
                prepareGetAllHttpConfig(optionalRequestedTestCases, forceFetch))
                .then(function (fetchedTestCases) {
                    return afterGetAll(optionalRequestedTestCases, fetchedTestCases);
                });
    };

    function prepareGetAllHttpConfig(requestedTestCases, forceFetch) {
        return {
            headers: {
                requestedTestCases: requestedTestCases,
                lastModification: forceFetch ? -1 : TestCaseCacheManager.getLastModification().getTime()
            }
        };
    }

    function afterGetAll(requestedTestCases, fetchedTestCases) {
        DataManager.setIsLoading(false);

        return SystemPropertyManager.get(true).then(function (systemProperties) {
            fetchedTestCases = Permissions.filterIfNecessary(fetchedTestCases, systemProperties);
            TestCaseCacheManager.cacheTestCases(fetchedTestCases);
            return CollectionUtils.isNotEmpty(fetchedTestCases) ? fetchedTestCases :
                Permissions.filterIfNecessary(TestCaseCacheManager.getTestCases(requestedTestCases), systemProperties);
        });
    }

    this.exist = function (testCaseName, loadingIndicator) {
        return EntityManager.exist(self.testCaseManagerConfig, testCaseName, loadingIndicator);
    };

    this.create = function (testCase, loadingIndicator) {
        return EntityManager.create(self.testCaseManagerConfig, testCase, loadingIndicator)
            .then(handlePostTestCaseUpdate);
    };

    this.update = function (testCase, loadingIndicator) {
        return EntityManager.update(self.testCaseManagerConfig, testCase, loadingIndicator)
            .then(handlePostTestCaseUpdate);
    };

    function handlePostTestCaseUpdate(updateTestCase) {
        TestCaseCacheManager.cacheTestCase(updateTestCase);
        return updateTestCase;
    }

    this.delete = function (testCase, loadingIndicator, overrideConfig) {
        var overridenConfig = ObjectUtils.override(self.testCaseManagerConfig, overrideConfig);
        return EntityManager.delete(overridenConfig, testCase.name, loadingIndicator)
            .then(function (deleteTestCaseResponse) {
                TestCaseCacheManager.removeTestCase(testCase.name);
                return deleteTestCaseResponse;
            });
    };

    this.backup = function (testCases) {
        var encodedTestCases = encodeURIComponent(JSON.stringify({testCases: testCases}));
        NavigationManager.goToServer("{0}?data={1}".format(self.testCaseManagerConfig.backupUrl, encodedTestCases));
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseInputParamConverter', testCaseInputParamConverterService);

function testCaseInputParamConverterService(ObjectUtils, StringUtils) {
    this.toServer = function (inputParam, testCaseName) {
        inputParam.testCaseName = testCaseName;
        inputParam.parameterizedValue = StringUtils.isEmpty(inputParam.parameterizedValue) ?
            "" : inputParam.parameterizedValue.name;
        return inputParam;
    };

    this.fromServer = function (inputParam) {
        return ObjectUtils.isNotEmpty(inputParam) ? {
            name: inputParam.name,
            testCaseName: inputParam.testCaseName,
            index: inputParam.index,
            label: inputParam.label,
            columnNumber: inputParam.columnNumber,
            defaultValue: inputParam.defaultValue
        } : undefined;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseFactory', testCaseFactoryService);

function testCaseFactoryService(Formats, DetailLevels) {
	
    this.buildDefaultTestCase = function (testCaseName, service, responseTimeout) {
        return {
            name: testCaseName,
            responseFormat: Formats.default,
            responseLevel: DetailLevels.default,
            runUntilEndOfFile: false,
            service: service,
            iterationNumber: 1,
            responseTimeoutValidation: responseTimeout
        };
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseExecutor', testCaseExecutorService);

function testCaseExecutorService($q, HttpHandler, TestCaseExecutionModes, TestCaseReportConverter, Logger, ToastManager, StringUtils) {
    var self = this;

    activate();

    function activate() {
        self.executionMode = {mode: TestCaseExecutionModes.Idle};
    }

    this.execute = function (testCase, loadingIndicator) {
        self.executionMode.mode = TestCaseExecutionModes.Running;
        var deferredRun = $q.defer();

        if (angular.isDefined(loadingIndicator)) {
            loadingIndicator.isLoading = true;
        }

        HttpHandler.post('/Macro/TestService/' + testCase.name)
            .success(function (testCaseResponse) {
                if (angular.isDefined(testCaseResponse) &&
                    angular.isDefined(testCaseResponse.status) && testCaseResponse.status === 'Success') {
                    handleTestExecutionSuccess(testCaseResponse, testCase, loadingIndicator);
                } else {
                    handleTestExecutionError(testCaseResponse, loadingIndicator);
                }

                deferredRun.resolve(TestCaseReportConverter.fromServer(testCaseResponse));
            })
            .error(function (status) {
                handleTestExecutionError(status, loadingIndicator);
                deferredRun.reject(status);
            });

        return deferredRun.promise;
    };

    function handleTestExecutionSuccess(testCaseResponse, testCase, loadingIndicator) {
        self.executionMode.mode = TestCaseExecutionModes.Finished;
        Logger.info(testCaseResponse);
        ToastManager.showSuccess(testCase.name + " was executed successfully");

        if (angular.isDefined(loadingIndicator)) {
            loadingIndicator.isLoading = false;
        }
    }

    function handleTestExecutionError(errorResponse, loadingIndicator) {
        self.executionMode.mode = TestCaseExecutionModes.Finished;

        Logger.error(errorResponse);

        if (angular.isString(errorResponse)) {
            ToastManager.showFatalError("Something went wrong during test case execution");
        } else {
            ToastManager.showWarning("Finished with errors", "Test Case Execution");
        }

        if (angular.isDefined(loadingIndicator)) {
            loadingIndicator.isLoading = false;
        }
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseCreatorDialogManager', testCaseCreatorDialogManagerService);

function testCaseCreatorDialogManagerService($mdDialog, ToastManager, NavigationManager, ServiceCacheManager) {
	
    this.open = function (options) {
    	$mdDialog.show({
    		controller: 'ServiceSelectorDialogCtrl',
    		templateUrl: 'app/modules/auraTester/views/managers/testCase/serviceSelectorDialog.html',
    		clickOutsideToClose: true,
    		bindToController: true,
    		locals: {
    			title: 'Create a New Test Case',
    			context: options.context
    		}
    	
		}).then(function (service) {
			if (angular.isDefined(service) && angular.isDefined(service.properties)) {
	            if (angular.isDefined(options.handleTestCaseCreation)) {
	                options.handleTestCaseCreation({});
	            }
	            NavigationManager.goTo("testCaseEditor/new/" + service.properties.name + "/" + service.properties.name + "/" + options.context);
	        }
			
		}, function () {
			if (angular.isDefined(options.handleTestCaseCreationCancel)) {
	            options.handleTestCaseCreationCancel({});
	        }
		});
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('TestCaseConverter', testCaseConverterService);

function testCaseConverterService(ObjectUtils, ConstantUtils, CollectionUtils, StringUtils, ServiceConverter, Formats, DetailLevels, TestCaseInputParamConverter, TestCaseOutputParamConverter) {
    this.toServer = function (testCase) {
        var convertedTestCase = ObjectUtils.isNotEmpty(testCase) ? {
            name: StringUtils.replaceBlanks(testCase.name, '_'),
            serviceName: testCase.service.name,
            service: ServiceConverter.toServer(testCase.service),
            description: testCase.description,
            createdBy: testCase.createdBy,
            batchParameters: fixBatchParameters(testCase.batchParameters),
            responseFormat: ConstantUtils.defaultValue(testCase.responseFormat, Formats),
            responseLevel: ConstantUtils.defaultValue(testCase.responseLevel, DetailLevels),
            useFirstLineAsHeader: ObjectUtils.defaultValue(testCase.useFirstLineAsHeader, true),
            numberOfIterations: ObjectUtils.defaultValue(testCase.numberOfIterations, 1),
            runUntilEndOfFile: ObjectUtils.defaultValue(testCase.runUntilEndOfFile, false),
            responseTimeoutValidation: testCase.responseTimeoutValidation * 1000,
            timestamp: ObjectUtils.defaultValue(testCase.timestamp, new Date().getTime())
        } : undefined;

        if (angular.isDefined(convertedTestCase)) {
            handleParametersToServer(convertedTestCase, testCase);
        }

        return convertedTestCase;
    };

    function handleParametersToServer(convertedTestCase, originalTestCase) {
        if (CollectionUtils.isNotEmpty(originalTestCase.inputParams)) {
            convertedTestCase.inputParams = originalTestCase.inputParams.map(function (inputParam) {
                return TestCaseInputParamConverter.toServer(inputParam, originalTestCase.name);
            });
        }

        if (CollectionUtils.isNotEmpty(originalTestCase.outputParams)) {
            convertedTestCase.outputParams = originalTestCase.outputParams.map(function (outputParam) {
                return TestCaseOutputParamConverter.toServer(outputParam, originalTestCase.name);
            });
        }
    }

    this.fromServer = function (testCase) {
        var convertedTestCase = ObjectUtils.isNotEmpty(testCase) ? {
            name: testCase.name,
            service: getServiceFromTestCase(testCase),
            description: testCase.description,
            createdBy: testCase.createdBy,
            batchParameters: StringUtils.isNotEmpty(testCase.batchParameters) ? testCase.batchParameters : undefined,
            responseFormat: Formats.getByValue(testCase.responseFormat),
            responseLevel: DetailLevels.getByValue(testCase.responseLevel),
            useFirstLineAsHeader: testCase.useFirstLineAsHeader,
            numberOfIterations: testCase.numberOfIterations,
            runUntilEndOfFile: testCase.runUntilEndOfFile,
            responseTimeoutValidation: testCase.responseTimeoutValidation / 1000,
            timestamp: testCase.timestamp,
            context: 'Test Cases'
        } : undefined;

        if (angular.isDefined(convertedTestCase)) {
            handleParametersFromServer(convertedTestCase, testCase);
        }

        return convertedTestCase;
    };

    function getServiceFromTestCase(testCase) {
        return angular.isDefined(testCase.service) ? testCase.service :
        {name: testCase.serviceName};
    }

    function handleParametersFromServer(convertedTestCase, originalTestCase) {
        if (CollectionUtils.isNotEmpty(originalTestCase.inputParams)) {
            convertedTestCase.inputParams = originalTestCase.inputParams.map(
                TestCaseInputParamConverter.fromServer);
        }

        if (CollectionUtils.isNotEmpty(originalTestCase.outputParams)) {
            convertedTestCase.outputParams = originalTestCase.outputParams.map(
                TestCaseOutputParamConverter.fromServer);
        }
    }

    function fixBatchParameters(batchParameters) {
        return StringUtils.isNotEmpty(batchParameters) && batchParameters.length > 1 ?
            batchParameters : undefined;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestAgentTableCtrl', testAgentTableCtrl);

function testAgentTableCtrl($scope, $interval, $route, ActionBuilder, TestAgentManager, AgentIntervals, TestCaseLogManager, NgTableParams, 
							ObjectUtils, CollectionUtils) {
    activate();

    var testCaseLogFetcherInterval;

    function activate() {
        $scope.testCases = [];
        $scope.intervals = AgentIntervals.values;
        $scope.isAllSelected = false;
        $scope.loadingIndicator = {isLoading: false};

        initAgents();
        initTableConfig();
    }

    function initAgents() {
        $scope.testAgents.forEach(function (testAgent) {
            testAgent.isEditing = false;
            testAgent.isNew = false;
            testAgent.testCase = {
                properties: {
                    name: testAgent.name
                }
            };

            return testAgent;
        });
    }

    function executeTestCaseLogFetcher() {
        killTestCaseLogFetcher();
        testCaseLogFetcherInterval = $interval(updateTestCaseLogs, getExecutionInterval());
    }

    function killTestCaseLogFetcher() {
        if (angular.isDefined(testCaseLogFetcherInterval)) {
            $interval.cancel(testCaseLogFetcherInterval);
        }
    }

    function getExecutionInterval() {
        var defaultInterval = 10000;
        return angular.isDefined($scope.selectedTestAgent) &&
        angular.isDefined($scope.selectedTestAgent.executionInterval) ?
            Math.max(defaultInterval, $scope.selectedTestAgent.executionInterval.value / 2) : defaultInterval;
    }

    function initTableConfig() {
        $scope.tableFilter = {value: ""};
        $scope.tableParams = new NgTableParams({}, {getData: getTestAgents});
    }

    function getTestAgents($defer) {
        $defer.resolve($scope.testAgents);
    }

    function updateTestCaseLogs() {
        if (angular.isDefined($scope.selectedTestAgent) &&
            angular.isDefined($scope.selectedTestAgent.testCase) &&
            angular.isDefined($scope.selectedTestAgent.testCase.properties)) {
            TestCaseLogManager.getAll($scope.selectedTestAgent.testCase.properties.name)
                .then(function (testCaseLogs) {
                    $scope.selectedTestAgent.logs = testCaseLogs;
                });
        }
    }

    $scope.handleTestCaseAgentSelection = function (testAgent) {
        unselectAllAgents();

        $scope.selectedTestAgent = testAgent;
        updateTestCaseLogs();
        executeTestCaseLogFetcher();

        if (angular.isDefined($scope.selectedTestAgent)) {
            $scope.selectedTestAgent.selected = true;
        }
    };

    function unselectAllAgents() {
        if (CollectionUtils.isNotEmpty($scope.testAgents)) {
            $scope.testAgents.forEach(function (testAgent) {
                testAgent.selected = false;
            });
        }
    }

    $scope.edit = function (testAgent) {
        $scope.selectedTestAgent = testAgent;
        $scope.selectedTestAgent.isEditing = true;
        $scope.handleTestCaseAgentSelection(testAgent);
    };

    $scope.save = function (testAgent) {
        $scope.selectedTestAgent.isEditing = false;
        return TestAgentManager.update(testAgent).then(handleTestAgentUpdate);
    };

    function handleTestAgentUpdate(testAgent) {
        executeTestCaseLogFetcher();
        return testAgent;
    }

    $scope.cancel = function (testAgent) {
        $scope.selectedTestAgent.isEditing = false;
    };

    $scope.activate = function (testAgent) {
        $scope.selectedTestAgent = testAgent;
        TestAgentManager.activate(testAgent, $scope.loadingIndicator).then(function () {
            testAgent.active = true;
        });
    };

    $scope.pause = function (testAgent) {
        $scope.selectedTestAgent = testAgent;
        TestAgentManager.pause(testAgent, $scope.loadingIndicator).then(function () {
            testAgent.active = false;
        });
    };
    
    $scope.reset = function (testAgent) {
        $scope.selectedTestAgent = testAgent;
        TestAgentManager.reset(testAgent).then(function () {
            updateTestCaseLogs();
        });
    };

    $scope.onSelectAllClick = function () {
    	$scope.isAllSelected = !$scope.isAllSelected;
    	$scope.testAgents.forEach(function(testAgent) {
    		testAgent.selected = $scope.isAllSelected;
    	});
    };

    $scope.$on('$destroy', function () {
        killTestCaseLogFetcher();
    });
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestAgentManagerCtrl', testAgentManagerCtrl);

function testAgentManagerCtrl($scope, $interval, NavigationManager, ToastManager, TestAgentManager, TestCaseSelectorDialogManager,
                              AgentIntervals, TestAgentFactory, TestCaseLogManager, Permissions, PromiseUtils, CollectionUtils,
                              EntityUtils, HotkeyManager) {
    activate();

    var testCaseLogFetcherInterval;

    function activate() {
        $scope.intervals = AgentIntervals.values;

        initGroupActions();
        initHotkeys();
        executeTestCaseLogFetcher();
    }

    function initGroupActions() {
        $scope.testAgentActions = [
            {name: "Backup", callback: handleBackup, map: EntityUtils.nameReducer},
            {
                name: "Delete",
                loadingIndicator: $scope.loadingIndicator,
                groupLoadingText: "Deleting test agents...",
                callback: handleTestAgentDelete,
                onFinishCallback: handleTestAgentDeletionFinish
            }
        ];
    }

    function initHotkeys() {
        var hotkeys = [];

        hotkeys.push(HotkeyManager.buildHotkey('alt+n', 'Create new agent', function () {
            $scope.createTestAgent();
        }));

        HotkeyManager.bindHotkeys($scope, hotkeys);
    }

    function handleBackup(testAgents) {
        TestAgentManager.backup(testAgents);
    }

    function handleTestAgentDelete(testAgent, totalActionedTestAgents) {
    	if (!Permissions.checkEntityAndToast(testAgent)) {
    		return PromiseUtils.emptyPromise([]);
    	}
    	
        return TestAgentManager.delete(testAgent, $scope.loadingIndicator,
            getOverrideConfig(totalActionedTestAgents)).then(function () {
            $scope.testAgentHolder.testAgents = CollectionUtils.removeObjectByReference($scope.testAgentHolder.testAgents, testAgent);
        });
    }

    function getOverrideConfig(totalActionedTestAgents) {
        return totalActionedTestAgents >= 3 ? {showSuccessLog: false} : {};
    }

    function handleTestAgentDeletionFinish(totalActionedTestAgents) {
        if (totalActionedTestAgents >= 3) {
            ToastManager.showSuccess("deleted {0} test agents successfully!".format(totalActionedTestAgents));
        }
    }

    function executeTestCaseLogFetcher() {
        killTestCaseLogFetcher();
        updateTestCaseLogs();
        testCaseLogFetcherInterval = $interval(updateTestCaseLogs, getExecutionInterval());
    }

    function killTestCaseLogFetcher() {
        if (angular.isDefined(testCaseLogFetcherInterval)) {
            $interval.cancel(testCaseLogFetcherInterval);
        }
    }

    function getExecutionInterval() {
        var defaultInterval = 10000;
        return angular.isDefined($scope.selectedTestAgent) ?
            Math.max(defaultInterval, $scope.selectedTestAgent.executionInterval.value / 2) :
            defaultInterval;
    }

    function updateTestCaseLogs() {
        if (angular.isDefined($scope.selectedTestAgent)) {

            TestCaseLogManager.getAll($scope.selectedTestAgent.name).then(function (testCaseLogs) {
                $scope.selectedTestAgent.logs = testCaseLogs;
            });
        }
    }

    $scope.createTestAgent = function () {
    	if (Permissions.blockOperator()) {
    		return;
    	}
        TestCaseSelectorDialogManager.open({
            context: "testAgents",
            testCases: $scope.testCases,
            testGroups: $scope.testGroups,
            singularityContext: $scope.testAgentHolder.testAgents,
            handleTestCaseSelection: handleTestCaseSelection
        });
    };

    function handleTestCaseSelection(testCase) {
        if (angular.isDefined(testCase)) {
            TestAgentManager.create(TestAgentFactory.buildAgentFromTestCase(testCase), $scope.loadingIndicator).then(function () {
                NavigationManager.goTo('monitoringManager/{0}'.format(testCase.name));
            });
        }
    }

    $scope.$on('$destroy', function () {
        killTestCaseLogFetcher();
    });
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseValidationOptionsCtrl', testCaseValidationOptionsCtrl);

function testCaseValidationOptionsCtrl($scope, $mdDialog, mode, testCase, currentOutputParam, ObjectUtils, ValidationFunctions, ParameterValidationUtils) {
    activate();

    function activate() {
        $scope.validationFunctions = ValidationFunctions.values;
        $scope.localOutputParam = {};
        $scope.currentOutputParam = currentOutputParam;
        $scope.mode = mode;
        $scope.testCase = testCase;
        $scope.validValidation = true;
        ObjectUtils.copyInto($scope.currentOutputParam, $scope.localOutputParam);
    }

    $scope.isTestedValueRequired = function () {
        return ParameterValidationUtils.isTestedValueRequired(
            $scope.localOutputParam.validationFunction);
    };

    $scope.handleValidationFunctionSelect = function (validation) {
        if (!ParameterValidationUtils.isTestedValueRequired(validation)) {
            $scope.localOutputParam.testedValue = undefined;
            $scope.localOutputParam.parameterizedValue = undefined;
        }
    };

    $scope.hasParameterizedValue = function () {
        return angular.isDefined($scope.localOutputParam.parameterizedValue);
    };

    $scope.saveChanges = function () {
        ObjectUtils.copyInto($scope.localOutputParam, $scope.currentOutputParam);
        $mdDialog.hide();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseAdvancedValidationsCtrl', testCaseAdvancedValidationsCtrl);

function testCaseAdvancedValidationsCtrl($scope, StringUtils) {
	
    $scope.hasBatchParameters = function () {
    	return StringUtils.isNotEmpty($scope.testCase.batchParameters);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseLogGridCtrl', testCaseLogGridCtrl);

function testCaseLogGridCtrl($scope, uiGridConstants, StringUtils) {
    function activate() {
        initColumnDefs();
        initColumnFilter();
        initFunctionAppender();
    }

    function initColumnDefs() {
        $scope.columnDefs = [
            {
                name: 'responseTime',
                displayName: 'Response Time',
                width: "*",
                cellTemplate: '<div class="aura-grid-column">{{COL_FIELD / 1000 | number:2}}</div>'
            },
            {
                name: 'success',
                displayName: 'Status',
                cellClass: function (grid, row) {
                    return row.entity.success ? 'success' : 'fail';
                },
                width: "*",
                cellTemplate: '<strong class="aura-grid-column">{{COL_FIELD ? "Success" : "Fail"}}</strong>'
            },
            {
                name: 'timestamp',
                displayName: 'Timestamp',
                cellFilter: 'simpleDate',
                width: "*",
                sort: {
                    direction: uiGridConstants.DESC,
                    priority: 1
                }
            },
            {
                name: 'failReason',
                displayName: 'Fail Reason',
                width: "40%",
                cellTemplate: '<ol><li ng-repeat="reason in row.entity.splitReasons(row.entity.failReason) track by $index">{{reason}}</li></ol>'
            }
        ];
    }

    function initColumnFilter() {
        $scope.filteredColumns = ['responseTime', 'failReason'];
    }

    function initFunctionAppender() {
        $scope.functionAppender = {
            splitReasons: splitReasons
        };
    }

    function splitReasons(failReasons) {
        if (StringUtils.isNotEmpty(failReasons)) {
            return failReasons.split(",");
        }

        return [];
    }

    activate();

}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestAgentAdvancedDetailsCtrl', testAgentAdvancedDetailsCtrl);

function testAgentAdvancedDetailsCtrl($scope, CollectionUtils) {
    activate();

    function activate() {
        $scope.monitorDetails = {ready: false};
        computeMonitorDetails($scope.testCaseLogs);
    }

    function computeMonitorDetails(testCaseLogs) {
        CollectionUtils.isNotEmpty(testCaseLogs, function (logs) {
            var responseTimeSum = 0, maxResponseTime = 0, minResponseTime = Math.pow(2, 20);

            logs.forEach(function (log) {
                responseTimeSum += log.responseTime;

                if (log.responseTime > maxResponseTime) {
                    maxResponseTime = log.responseTime;
                }


                if (log.responseTime < minResponseTime) {
                    minResponseTime = log.responseTime;
                }
            });

            $scope.monitorDetails.ready = true;
            $scope.monitorDetails.average = responseTimeSum / logs.length;
            $scope.monitorDetails.max = maxResponseTime;
            $scope.monitorDetails.min = minResponseTime;
        });
    }

    $scope.$watchCollection("testCaseLogs", activate);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('MonitoringManagerCtrl', monitoringManagerCtrl);

function monitoringManagerCtrl($rootScope, $scope, $routeParams, testCases, testGroups, testAgents, systemProperties, licenseDetails, SystemPropertyManager,
                               DataManager, CollectionUtils, ObjectUtils) {
    activate();

    function activate() {
        $scope.createdTestCase = $routeParams.createdTestCase;
        $scope.systemProperties = SystemPropertyManager.systemConfig.properties;
        $scope.testCases = testCases;
        $scope.testGroups = testGroups;
        $scope.testAgentHolder = {testAgents: ObjectUtils.defaultValue(testAgents, [])};
        $scope.systemProperties = systemProperties;

        DataManager.setIsLoading(false);

        initSelectedTestAgent();
    }

    function initSelectedTestAgent() {
        if (CollectionUtils.isNotEmpty($scope.testAgentHolder.testAgents)) {
            $scope.selectedTestAgentHolder = {
                selectedTestAgent: angular.isDefined($routeParams.agentId) ?
                    CollectionUtils.findByName($scope.testAgentHolder.testAgents, $routeParams.agentId) :
                    $scope.testAgentHolder.testAgents[0]
            };
        }
    }

    $scope.isTestMonitorPrivileged = function () {
        return licenseDetails.testMonitorManagement;
    };

    $scope.getMonitorTitle = function (onLoadTitle) {
        if (!(angular.isDefined($scope.selectedTestAgentHolder) &&
            angular.isDefined($scope.selectedTestAgentHolder.selectedTestAgent))) {
            return onLoadTitle;
        }

        if (CollectionUtils.isNotEmpty($scope.selectedTestAgentHolder.selectedTestAgent.logs)) {
            return "{0} {1} ({2})".format($scope.selectedTestAgentHolder.selectedTestAgent.name, onLoadTitle,
                $scope.selectedTestAgentHolder.selectedTestAgent.active ? "Active" : "Paused");
        } else {
            return "Waiting for data on agent {0} ...".format($scope.selectedTestAgentHolder.selectedTestAgent.name);
        }
    };

    $scope.handleChartContainerOpen = function () {
        $rootScope.$emit('chartContainerUpdate', {});
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestGroupEditorHeaderCtrl', testGroupEditorHeaderCtrl);

function testGroupEditorHeaderCtrl($scope, HotkeyManager, NavigationManager, ObjectUtils) {

    activate();

    function activate() {
        $scope.loadingIndicator = {isLoading: false};
        initHotkeys();
    }

    function initHotkeys() {
        var hotkeys = [];

        if ($scope.mode.details) {
            hotkeys.push(HotkeyManager.buildHotkey('alt+e', 'Edit test group', function () {
                NavigationManager.goTo('testGroupEditor/edit/testGroups/{0}'.format($scope.testGroup.name));
            }));
            hotkeys.push(HotkeyManager.buildHotkey('alt+r', 'Run test group', function () {
                if (!$scope.shouldRunTestCase) {
                    $scope.runTestGroup();
                }
            }));
        }
        if ($scope.mode.edit) {
            hotkeys.push(HotkeyManager.buildHotkey('ctrl+s', 'Save test group', function () {
                if ($scope.saveAllowed && !$scope.shouldRunTestCase) {
                    $scope.saveCallback();
                }
            }));
        }

        HotkeyManager.bindHotkeys($scope, hotkeys);
    }

    $scope.runTestGroup = function () {
        setCollapseValue(false);
        $scope.testGroupRunner.shouldRunTestGroup = true;
        $scope.collapseManager.collapseTestReport = true;
        $scope.collapseManager.collapseTestCaseDetails = false;
        $scope.testGroup.executionTriggered = true;
    };

    function setCollapseValue(shouldCollapse) {
        ObjectUtils.setProperties($scope.collapseManager, shouldCollapse);
    }

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestGroupEditorCtrl', testGroupEditorCtrl);

function testGroupEditorCtrl($scope, $routeParams, testGroup, licenseDetails, DataManager, ModeParser, BreadcrumbsBuilder,
                             TestGroupCacheManager, TestGroupManager, TestAgentManager, TestAgentFactory, UserManager,
                             NavigationManager, ObjectUtils) {
    activate();

    function activate() {
        DataManager.setIsLoading(false);
        $scope.loadingIndicator = {isLoading: false};
        $scope.testGroupRunner = {shouldRunTestGroup: false};
        $scope.testGroup = testGroup;
        $scope.licenseDetails = licenseDetails;
        $scope.testGroupEditorContext = $routeParams.testGroupEditorContext;

        initMode();
        buildCrumbs();
        buildCollapseManager();
        handleContextTestGroup();
    }

    function initMode() {
        $scope.mode = {};
        ModeParser.parse($scope.mode, $routeParams.mode);
    }

    function buildCrumbs() {
        $scope.testGroupEditorCrumbs = BreadcrumbsBuilder.buildBasicBreadcrumbs(
            {title: "Test Group Manager", url: "#/auraTesterManager/testGroups"},
            "Test Group Editor", $scope.testGroup.name);
    }

    function buildCollapseManager() {
        $scope.collapseManager = {};
        $scope.collapseManager.collapseTestReport = false;
        $scope.collapseManager.collapseTestGroupDetails = true;
        $scope.collapseManager.collapseTestGroupCases = true;
    }

    function handleContextTestGroup() {
        if ($scope.mode.edit) {
            $scope.testGroup = ObjectUtils.defaultValue(
                TestGroupCacheManager.getContextTestGroup(), $scope.testGroup);

            TestGroupCacheManager.removeContextTestGroup();
        }
    }

    $scope.handleTestGroupReport = function () {
        $scope.testGroupRunner.shouldRunTestGroup = false;
        $scope.collapseManager.collapseTestReport = true;
        $scope.collapseManager.collapseTestGroupDetails = false;
        $scope.collapseManager.collapseTestGroupCases = true;
    };

    $scope.isTestCaseManagementPrivileged = function () {
        return licenseDetails.testManagement;
    };


    /**************************
     *      Functionality     *
     **************************/

    $scope.saveTestGroup = function () {

        if ($scope.mode.new) {
            $scope.testGroup.createdBy = UserManager.getUser().username;
            if ($scope.testGroupEditorContext !== "testAgents") {
                TestGroupManager.create($scope.testGroup, $scope.loadingIndicator).then(afterUpdate);
            } else {
                TestGroupManager.create($scope.testGroup, $scope.loadingIndicator).then(function () {
                    TestAgentManager.create(TestAgentFactory.buildAgentFromTestCase($scope.testGroup),
                        $scope.loadingIndicator).then(afterUpdate);
                });
            }
        } else if ($scope.mode.edit) {
            TestGroupManager.update($scope.testGroup, $scope.loadingIndicator).then(afterUpdate);
        }
    };

    function afterUpdate(testGroup) {
        if (angular.isDefined($scope.testGroupEditorForm)) {
            $scope.testGroupEditorForm.$setPristine();
        }

        NavigationManager.goTo($scope.testGroupEditorContext === "testAgents" ? "monitoringManager" :
            "testGroupEditor/details/testGroups/{0}".format(testGroup.name));
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseEditorHeaderCtrl', testCaseEditorHeaderCtrl);

function testCaseEditorHeaderCtrl($scope, HotkeyManager, TestCaseManager, EntityValidator, TestCaseValidator, TestGroupCacheManager,
                                  TestGroupManager, TestCaseCacheManager, TestAgentManager, UserManager, ObjectUtils, TestAgentFactory,
                                  NavigationManager, StringUtils) {
    activate();

    function activate() {
        $scope.loadingIndicator = {isLoading: false};
        initHotkeys();
    }

    function initHotkeys() {
        var hotkeys = [];

        if ($scope.mode.details) {
            hotkeys.push(HotkeyManager.buildHotkey('alt+e', 'Edit test case', function () {
                NavigationManager.goTo('testCaseEditor/edit/' + $scope.testCase.name + '/' + $scope.testCase.name);
            }));
            hotkeys.push(HotkeyManager.buildHotkey('alt+r', 'Run test case', function () {
                if (!$scope.shouldRunTestCase) {
                    $scope.runTestCase();
                }
            }));
        }
        if ($scope.mode.edit) {
            hotkeys.push(HotkeyManager.buildHotkey('ctrl+s', 'Save test case', function () {
                if ($scope.saveAllowed && !$scope.shouldRunTestCase) {
                    $scope.saveChanges();
                }
            }));
        }

        HotkeyManager.bindHotkeys($scope, hotkeys);
    }

    $scope.saveChanges = function () {
        EntityValidator.handleValidation('Save Test Case', TestCaseValidator.validate($scope.testCase))
            .then(function (validationPassedOrIgnored) {
                if (validationPassedOrIgnored) {
                	if ($scope.mode.new || $scope.mode.duplicate) {
                		$scope.testCase.createdBy = UserManager.getUser().username;
                	}
                    if ($scope.mode.new) {
                        TestCaseManager.create($scope.testCase, $scope.loadingIndicator).then(afterCreate);
                    } else if ($scope.mode.edit) {
                        TestCaseManager.update($scope.testCase, $scope.loadingIndicator).then(afterUpdate);
                    }
                }
            });
    };

    function afterCreate(createdTestCase) {
        TestCaseCacheManager.cacheTestCase(createdTestCase);
        $scope.testCaseForm.$setPristine();

        if (StringUtils.isNotEmpty($scope.createdTestCaseContext)) {
            navigateToCreatedTestCaseContext(createdTestCase);
        } else {
            NavigationManager.goTo("testCaseEditor/details/" + $scope.testCase.service.name + "/" + createdTestCase.name);
        }
    }

    function navigateToCreatedTestCaseContext(createdTestCase) {
        if (TestGroupCacheManager.hasContextTestGroup() && $scope.createdTestCaseContext === "testGroupCases") {
            NavigationManager.goTo("testGroupManagement/{0}/{1}".format(
                TestGroupCacheManager.getContextTestGroup().name, createdTestCase.name));
        } else if ($scope.createdTestCaseContext === "testAgents") {
            handleTestAgentAddition(createdTestCase);
        } else if (TestGroupCacheManager.hasContextTestGroup() && $scope.createdTestCaseContext === "testCases") {
            handleTestCaseToTestGroupAddition(createdTestCase);
        } else if ($scope.createdTestCaseContext === "testCases") {
            NavigationManager.goTo("auraTesterManager/testCases");
        }
    }

    function handleTestAgentAddition(createdTestCase) {
        TestAgentManager.create(TestAgentFactory.buildAgentFromTestCase(createdTestCase), $scope.loadingIndicator).then(function () {
            NavigationManager.goTo("monitoringManager/{0}".format(createdTestCase.name));
        });
    }

    function handleTestCaseToTestGroupAddition(createdTestCase) {
        var contextTestCaseGroup = TestGroupCacheManager.getContextTestGroup();
        contextTestCaseGroup.testCases.push(createdTestCase);
        TestGroupCacheManager.cacheContextTestGroup(contextTestCaseGroup);

        TestGroupManager.get(contextTestCaseGroup.name).then(function (fetchedTestGroup) {
            NavigationManager.goTo(ObjectUtils.isNotEmpty(fetchedTestGroup) ?
                "testGroupEditor/edit/testCases/{0}".format(contextTestCaseGroup.name) :
                "testGroupEditor/new/testCases/{0}".format(contextTestCaseGroup.name));
        });
    }

    function afterUpdate(updatedTestCase) {
        $scope.testCaseForm.$setPristine();
        NavigationManager.goTo("testCaseEditor/details/{0}/{1}".format($scope.testCase.service.name, updatedTestCase.name));
    }

    $scope.runTestCase = function () {
        setCollapseValue(false);
        $scope.shouldRunTestCase = true;
        $scope.collapseManager.collapseTestReport = true;
        $scope.collapseManager.collapseTestCaseDetails = false;
        $scope.testCase.executionTriggered = true;
    };

    function setCollapseValue(shouldCollapse) {
        ObjectUtils.setProperties($scope.collapseManager, shouldCollapse);
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseEditorCtrl', testCaseEditorCtrl);

function testCaseEditorCtrl($scope, $routeParams, DataManager, testCase, systemProperties, TestCaseFactory, ModeParser, ServiceCacheManager, ObjectUtils, StringUtils) {
    activate();

    function activate() {
        $scope.testCaseRunner = {shouldRunTestCase: false};
        $scope.createdTestCaseContext = $routeParams.createdTestCaseContext;

        initByMode();
        buildCrumbs();
        buildCollapseManager();

        DataManager.setIsLoading(false);
    }

    function initByMode() {
        $scope.mode = {};
        ModeParser.parse($scope.mode, $routeParams.mode);
        
        if ($scope.mode.new) {
            handleContextService(testCase);

            $scope.testCaseHolder = {
                testCase: TestCaseFactory.buildDefaultTestCase($routeParams.serviceId, testCase.service, selectDefaultTimeout())
            };
        } else if ($scope.mode.edit || $scope.mode.details) {
            $scope.testCaseHolder = {
                testCase: testCase
            };
        }
        if ($scope.mode.duplicate) {
            $scope.duplicatedTestCase = $scope.testCaseHolder.testCase.name;
            $scope.testCaseHolder.testCase.originalName = "";
        }
    }
    
    function selectDefaultTimeout() {
    	return  testCase.service.type === 'Forms' ? (+systemProperties.FORM_TIMEOUT) / 1000 :
    			testCase.service.type === 'HTML' ?  (+systemProperties.HTML_TIMEOUT) / 1000 :
    			10;
    }

    function handleContextService(testCase) {
        var contextService = ServiceCacheManager.getContextService();

        if (angular.isDefined(contextService) && ObjectUtils.isEmpty(testCase.service)) {
            testCase.service = contextService;
        }
    }

    function buildCrumbs() {
        $scope.testCaseCrumbs = [
            {title: "AuraTester Manager", url: "#/auraTesterManager/testCases"},
            {title: "Test Case Configuration"},
            {
                title: $scope.mode.new ? 'New' : $scope.mode.duplicate ? 'Duplicate ' + $scope.duplicatedTestCase : $scope.testCaseHolder.testCase.name,
                active: true
            }
        ];
    }

    function buildCollapseManager() {
        var isEditMode = $scope.mode.new || $scope.mode.edit;

        $scope.collapseManager = {};
        $scope.collapseManager.collapseBatchConfig = isEditMode || StringUtils.isNotEmpty($scope.testCaseHolder.testCase.batchParameters);
        $scope.collapseManager.collapseTestCaseDetails = true;
        $scope.collapseManager.collapseTestCaseServiceDetails = isEditMode;
        $scope.collapseManager.collapseTestCaseInputParameterConfig = true;
        $scope.collapseManager.collapseTestCaseOutputParameterConfig = true;
        $scope.collapseManager.collapseTestReport = isEditMode;
        $scope.collapseManager.collapseAdvancedValidations = false;
    }

    $scope.handleReportCallback = function (report) {
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestGroupManagerCtrl', testGroupManagerCtrl);

function testGroupManagerCtrl($scope, $timeout, CollectionUtils, EntityUtils, ToastManager, TestGroupManager, DataManager, SystemPropertyManager, Permissions, PromiseUtils, HotkeyManager, NavigationManager) {
    activate();

    function activate() {
        DataManager.setIsLoading(false);
        $scope.loadingIndicator = {isLoading: false};
        $scope.gridLoadingIndicator = {isLoading: true, block: false};
        $scope.systemProperties = SystemPropertyManager.systemConfig.properties;
        $scope.showGrid = false;

        initGroupActions();
        initHotkeys();
        initiateGridLoadDelay();
    }

    function initGroupActions() {
        $scope.testGroupGroupActions = [
            {name: "Backup", callback: handleBackup, map: EntityUtils.nameReducer},
            {
                name: "Delete",
                loadingIndicator: $scope.loadingIndicator,
                groupLoadingText: "deleting test groups...",
                callback: deleteTestGroup,
                onFinishCallback: afterDeleteTestGroup
            }];
    }

    function initHotkeys() {
        var hotkeys = [];

        hotkeys.push(HotkeyManager.buildHotkey('alt+n', 'Create new Test Group', function () {
            NavigationManager.goTo('testGroupEditor/new/testGroups');
        }));

        HotkeyManager.bindHotkeys($scope, hotkeys);
    }

    function initiateGridLoadDelay() {
        CollectionUtils.deferCollectionLoad($scope.testGroups, function () {
            $scope.gridLoadingIndicator.isLoading = false;
        }, 700);
    }

    function deleteTestGroup(testGroup, totalActionedTestGroups) {
        if (!Permissions.checkEntityAndToast(testGroup)) {
            return PromiseUtils.emptyPromise([]);
        }

        return TestGroupManager.delete(testGroup, $scope.loadingIndicator, getOverrideConfig(totalActionedTestGroups))
            .then(function () {
                $scope.testGroups = CollectionUtils.removeObjectByReference($scope.testGroups, testGroup);
            });
    }

    function getOverrideConfig(totalActionedTestGroups) {
        return totalActionedTestGroups >= 3 ? {showSuccessLog: false} : {};
    }

    function afterDeleteTestGroup(totalActionedServices) {
        if (totalActionedServices >= 3) {
            ToastManager.showSuccess("Deleted " + totalActionedServices + " test groups!");
        }
    }

    $scope.handleTestGroupExecution = function (testGroup) {
        $scope.runTestGroupCallback({testGroup: testGroup});
    };

    function handleBackup(testGroups) {
        TestGroupManager.backup(testGroups);
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestGroupGridCtrl', testGroupGridCtrl);

function testGroupGridCtrl($scope, DataManager, ActionBuilder, TestGroupCacheManager, CollectionUtils) {

    function activate() {
        $scope.testGroupHolder = {testGroups: []};
        $scope.tableFilter = {value: ""};

        initTestGroups();
    }

    function initTestGroups() {
        DataManager.setIsLoading(false);

        handleContextTestGroup();
        initTestGroupsActions();
        initColumnDefs();
        initColumnFilter();
        initTestCaseCount();
    }

    function initTestGroupsActions() {
        $scope.testGroups.forEach(function (testGroup) {
            initTestGroupActions(testGroup);
        });
    }

    function initTestGroupActions(testGroup) {
        if (angular.isUndefined(testGroup)) {
            return;
        }

        var actions = [];

        actions.push(ActionBuilder.buildLink("Details", "btn-purple", "#/testGroupEditor/details/testGroups/{0}".format(testGroup.name),
            false, "clip-list-3"));
        actions.push(ActionBuilder.buildLink("Edit", "btn-blue", "#/testGroupEditor/edit/testGroups/{0}".format(testGroup.name),
            false, "clip-pencil-3"));
        actions.push(ActionBuilder.build("Run", "btn-bricky", runTestGroup, CollectionUtils.isEmpty(testGroup.testCases), "fa fa-play", true, true));

        testGroup.actionsData = {actions: actions};
        initInlineActions(testGroup);
    }

    function initInlineActions(testGroup) {
        testGroup.inlineActions = ActionBuilder.buildInlineActions(
            testGroup.actionsData.actions, function ($itemScope) {
                return $itemScope.testGroup;
            });
    }

    function initColumnDefs() {
        $scope.columnDefs = [
            {
                name: 'name',
                displayName: 'Name',
                width: '*',
                cellTemplate: '<a ng-href="#/testGroupEditor/details/testGroups/{{COL_FIELD}}">{{COL_FIELD}}</a>'
            },
            {
                name: 'description',
                displayName: 'Description',
                width: '*'
            },
            {
                name: 'stopOnFail',
                displayName: 'Stop on failure',
                width: '130',
                enableSorting: false,
                enableColumnMenu: false,
                headerTooltip: 'Stop on Fail',
                cellTemplate: '<ap-checkbox model="row.entity.stopOnFail" should-disable="::true" in-table="::true"></ap-checkbox>'
            },
            {
                name: 'sleepBetweenTests',
                displayName: 'Sleep between tests',
                width: '155'
            },
            {
                name: 'createdBy',
                displayName: 'Created By',
                width: '110'
            },
            {
                name: 'testCaseCount',
                displayName: 'Test Case Count',
                width: '130'
            },
            {
                name: 'actionData',
                displayName: 'Actions',
                width: '130',
                enableSorting: false,
                enableColumnMenu: false,
                cellTemplate: '<ap-action-panel action-data="row.entity.actionsData" action-context="row.entity"></ap-action-panel>'
            }
        ];
    }

    function initColumnFilter() {
        $scope.filteredColumns = ['name', 'description'];
    }

    function initTestCaseCount() {
        $scope.testGroups.forEach(function (testGroup) {
            testGroup.testCaseCount = CollectionUtils.isNotEmpty(testGroup.testCases) ? testGroup.testCases.length : 0;
        });
    }

    function handleContextTestGroup() {
        if (TestGroupCacheManager.hasContextTestGroup() && !CollectionUtils.containsByProperty(
                $scope.testGroups, TestGroupCacheManager.getContextTestGroup().name, "name")) {
            $scope.testGroups.push(TestGroupCacheManager.getContextTestGroup());
        }
    }

    function runTestGroup(testGroup) {
        $scope.runTestGroupCallback({testGroup: testGroup});
    }

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestGroupDetailsCtrl', testGroupDetailsCtrl);

function testGroupDetailsCtrl($scope, $window) {
	$scope.restUrl = $window.location.host + '/ServiceManager/Macro/TestService/' + $scope.testGroup.name;
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseSelectorDialogCtrl', testCaseSelectorCtrl);

function testCaseSelectorCtrl($scope, $mdDialog, context, testCases, testGroups, singularityContext, TestCaseCacheManager, NavigationManager) {
    activate();

    function activate() {
        $scope.context = context;
        $scope.testCases = testCases;
        $scope.testGroups = testGroups;
        $scope.singularityContext = singularityContext;

        initTestCases();
    }

    function initTestCases() {
        $scope.testCases = TestCaseCacheManager.getTestCases();
        $scope.testCaseHolder = {testCase: {}};
    }

    $scope.handleSelect = function (testCase) {
        if (angular.isDefined(testCase) && testCase.isTestGroupCreateOption) {
            NavigationManager.goTo("testGroupEditor/new/testAgents");
            $mdDialog.hide();
        } else if (angular.isDefined(testCase.properties)) {
            $mdDialog.hide(testCase.properties);
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseSelectorCtrl', testCaseSelectorCtrl);

function testCaseSelectorCtrl($scope, ObjectUtils, TestCaseCreatorDialogManager, CollectionUtils, StringUtils) {
    activate();

    function activate() {
        initTestCase();
        addTestCaseCreationOption();
        addTestGroupCreationOption();
        appendGroupsIfNeeded();
    }

    function initTestCase() {
        if (ObjectUtils.isEmpty($scope.testCase)) {
            $scope.testCase = {properties: undefined};
        } else if (angular.isDefined($scope.testCase) && StringUtils.isNotEmpty($scope.testCase.name)) {
            $scope.testCase = {properties: $scope.testCase};
        }
    }

    function addTestCaseCreationOption() {
        var testCaseCreationOption = {
            isTestCaseCreateOption: true,
            isCreateOption: true,
            name: "Create a new test case.."
        };

        if (!CollectionUtils.containsByProperty($scope.testCases, true, "isTestCaseCreateOption")) {
            if (CollectionUtils.isEmpty($scope.testCases)) {
                $scope.testCases = [];
            }

            $scope.testCases.push(testCaseCreationOption);
        }
    }

    function addTestGroupCreationOption() {
        if ($scope.context === "testAgents") {
            var testGroupCreationOption = {
                isTestGroupCreateOption: true,
                isCreateOption: true,
                name: "Create a new test group.."
            };

            if (!CollectionUtils.containsByProperty($scope.testCases, true, "isTestGroupCreateOption")) {
                if (CollectionUtils.isEmpty($scope.testCases)) {
                    $scope.testCases = [];
                }

                $scope.testCases.push(testGroupCreationOption);
            }
        }
    }

    function appendGroupsIfNeeded() {
        if (CollectionUtils.isNotEmpty($scope.testGroups)) {
            $scope.testCases = $scope.testCases.concat($scope.testGroups);
        }
    }

    $scope.singularFilter = function (testCase) {
        return testCase.isTestCaseCreateOption || testCase.isTestGroupCreateOption || !isAlreadyInContext(testCase);
    };

    $scope.testGroupFilter = function (testCase) {
        return $scope.context === "testGroups" ?
        testCase.context === "Test Groups" : true;
    };

    function isAlreadyInContext(testCase) {
        if (angular.isDefined($scope.singularityContext)) {
            return CollectionUtils.containsByName(
                $scope.singularityContext, testCase.name);
        }

        return false;
    }

    $scope.handleTestCaseSelect = function (testCase) {
        if (angular.isDefined(testCase) && testCase.isTestCaseCreateOption) {
            handleTestCaseCreatorOption();
        }
        if ($scope.context === "testGroups") {
            fixTestGroup(testCase);
        }

        if (angular.isDefined($scope.testCaseSelectCallback)) {
            $scope.testCaseSelectCallback({testCase: testCase});
        }
    };

    function fixTestGroup(testGroup) {
        if (CollectionUtils.isNotEmpty(testGroup.testCases)) {
            testGroup.testCases = _.map(testGroup.testCases, function (testCaseName) {
                return CollectionUtils.findByName($scope.testCases, testCaseName);
            });
        }
    }

    function handleTestCaseCreatorOption() {
        TestCaseCreatorDialogManager.open({
            context: $scope.context,
            handleTestCaseCreationCancel: handleTestCaseCreationCancel
        });
    }

    function handleTestCaseCreationCancel() {
        $scope.testCase.properties = undefined;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseReportCtrl', testCaseReportCtrl);

function testCaseReportCtrl($scope, System, TestCaseExecutor, TestCaseExecutionModes, ObjectUtils, x2js) {
    activate();

    function activate() {
        $scope.testCaseReport = {};
        $scope.resultsHeaderText = '';
        $scope.testCaseXmlReport = '';
        $scope.testCaseJsonReport = '';
        $scope.shouldUnCollapseAll = ObjectUtils.defaultValue($scope.shouldUnCollapseAll, true);

        $scope.reportTitle = {};
        $scope.loadingIndicator = {
            isLoading: false,
            loadingText: "Getting {0} report..".format($scope.context === 'testCase' ? 'test case' : 'test group'),
            block: false
        };

        $scope.executionMode = TestCaseExecutor.executionMode;

        initViewerProperties();
    }

    function initViewerProperties() {
        if (angular.isDefined($scope.testCase)) {
            $scope.isXml = angular.isDefined($scope.testCase.responseFormat) &&
                $scope.testCase.responseFormat.value === "XML" &&
                $scope.context === "testCase";

            $scope.isJson = (angular.isDefined($scope.testCase.responseFormat) &&
                $scope.testCase.responseFormat.value === "JSON") ||
                $scope.context === "testGroup";
        }
    }

    $scope.isRunning = function () {
        return $scope.executionMode.mode === TestCaseExecutionModes.Running;
    };

    $scope.isFinished = function () {
        return $scope.executionMode.mode === TestCaseExecutionModes.Finished;
    };

    function runTestCase() {
        collapseAll();
        $scope.collapseManager.collapseTestReport = true;

        $scope.reportTitle.title = "Getting test report for " + $scope.testCase.name + " ...";
        TestCaseExecutor.execute($scope.testCase, $scope.loadingIndicator)
            .then(handleTestCaseReport, handleTestCaseReport);
    }

    function collapseAll() {
        if ($scope.shouldUnCollapseAll) {
            ObjectUtils.setProperties($scope.collapseManager, false);
        }
    }

    function handleTestCaseReport(report) {
        $scope.reportTitle.title = "Test report for " + $scope.testCase.name;
        $scope.shouldRunTestCase = false;

        if ($scope.isXml) {
            $scope.testCaseXmlReport = x2js.json2xml_str(report);
        } else {
            $scope.testCaseJsonReport = angular.toJson(report, true);
        }

        if (angular.isDefined($scope.reportCallback)) {
            $scope.reportCallback({report: report});
        }
    }

    $scope.getReportUrl = function () {
        return angular.isDefined($scope.testCase) ?
        System.baseUrl + "/Macro/TestService/" + $scope.testCase.name : '';
    };

    $scope.$watch("shouldRunTestCase", function (shouldRunTestCase) {
        if (angular.isDefined(shouldRunTestCase) && shouldRunTestCase) {
            initViewerProperties();
            runTestCase();
        }
    });
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseParameterizedValueCtrl', testCaseParameterizedValueCtrl);

function testCaseParameterizedValueCtrl($scope, TestCaseBatchParameterUtils) {
    $scope.handleParameterizedValueSelect = function (item) {
        if (angular.isDefined(item) && angular.isDefined(item.index)) {
            $scope.param.columnNumber = item.index;
            $scope.param.testedValue = undefined;
        } else {
            $scope.param.columnNumber = -1;
        }
    };

    function handleFirstLineAsHeaderFlag() {
        var columnNumber = $scope.param.columnNumber;

        if (columnNumber >= 1) {
            $scope.param.parameterizedValue = TestCaseBatchParameterUtils.getHeaderColumn($scope.testCase, columnNumber);
        }
    }

    $scope.$watch("testCase.useFirstLineAsHeader", handleFirstLineAsHeaderFlag, true);
    $scope.$watch("testCase.batchParameters", handleFirstLineAsHeaderFlag, true);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseOutputParameterTableCtrl', testCaseOutputParameterTableCtrl);

function testCaseOutputParameterTableCtrl($scope, $mdDialog, CollectionUtils, ValidationFunctions, TestCaseValidationPresenter,
                                          ActionBuilder, ObjectUtils) {
    var noneValidation = ValidationFunctions.getByValue("NONE");

    activate();

    function activate() {
        $scope.present = TestCaseValidationPresenter.present;

        initActions();
        handleNewTestCaseMode();
    }

    function initActions() {
        $scope.outParamActionData = {
            actions: [
                ActionBuilder.build("validation options", "btn-purple", openValidationConfiguration, false, "fa fa-cogs")
            ]
        };
    }

    function handleNewTestCaseMode() {
        if ($scope.mode.new) {
            $scope.testCase.outputParams = [];
            convertOutputParamsFromService();
            addOutputParamAddOns();
        }
    }

    function convertOutputParamsFromService() {
        CollectionUtils.isNotEmpty($scope.testCase.service.outputParams, function (outputParams) {
            $scope.testCase.outputParams = outputParams.map(convertOutputParamToTestCaseParamConfig);
        });
    }

    function addOutputParamAddOns() {
        addOutputParamAddOn("PopupMessages", "popup messages", noneValidation);
        addOutputParamAddOn("StatusBarMessages", "status bar messages", noneValidation);
        addOutputParamAddOn("Error", "error", ValidationFunctions.getByValue("EMPTY"));
    }

    function addOutputParamAddOn(name, label, validationFunction) {
        var outputParamAddOn = CollectionUtils.findByProperty($scope.testCase.outputParams, name, "name");

        if (angular.isDefined(outputParamAddOn)) {
            outputParamAddOn.columnNumber = -1;
            outputParamAddOn.label = label;
            outputParamAddOn.validationFunction = validationFunction;
        } else {
            $scope.testCase.outputParams.push({
                columnNumber: -1,
                name: name,
                label: label,
                validationFunction: validationFunction
            });
        }
    }

    function convertOutputParamToTestCaseParamConfig(serviceOutputParam) {
        return {
            name: serviceOutputParam.id.name,
            columnNumber: -1,
            label: serviceOutputParam.paramLabel,
            defaultValue: serviceOutputParam.paramValue,
            validationFunction: ObjectUtils.defaultValue(serviceOutputParam.validationFunction, noneValidation),
            testedValue: ObjectUtils.defaultValue(serviceOutputParam.testedValue,"")
        };
    }

    function openValidationConfiguration(outputParam) {
        $mdDialog.show({
            controller: 'TestCaseValidationOptionsCtrl',
            templateUrl: 'app/modules/auraTester/views/managers/testCase/validation/testCaseValidationOptionsDialog.html',
            clickOutsideToClose: true,
            locals: {
                mode: $scope.mode,
                testCase: $scope.testCase,
                currentOutputParam: outputParam
            },
            bindToController: true
        });
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseManagerCtrl', testCaseManagerCtrl);

function testCaseManagerCtrl($scope, $route, $timeout, AdminManager, CollectionUtils, EntityUtils, ToastManager, TestCaseManager, TestGroupManager,
                             TestGroupCacheManager, PromiseUtils, TestCaseCreatorDialogManager, TestCaseSelectorDialogManager, TestGroupFactory,
                             StringUtils, DataManager, ServiceRecordManager, ServiceManager, SystemPropertyManager, Permissions, ObjectUtils,
                             HotkeyManager, NavigationManager, SelectionUtils) {
    function activate() {
        DataManager.setIsLoading(false);
        $scope.loadingIndicator = {isLoading: false};
        $scope.gridLoadingIndicator = {isLoading: true, block: false};
        $scope.systemProperties = SystemPropertyManager.systemConfig.properties;
        $scope.testGroups = TestGroupCacheManager.getTestGroups();

        initTestCases();
        initGroupActions();
        initHotkeys();
        initiateGridLoadDelay();
    }

    function initTestCases() {
        cacheAllTestCasesAsynchronusly();

        CollectionUtils.filterEmptyEntities($scope.testCases).forEach(function (testCase) {
            testCase.linkedGroups = CollectionUtils.isNotEmpty($scope.testGroups) ?
                getAllLinkedGroups(testCase.name) : '';
        });
    }

    function cacheAllTestCasesAsynchronusly() {
        $timeout(function () {
            TestCaseManager.getAll(undefined, true);
        }, 1000);
    }

    function getAllLinkedGroups(testCaseName) {
        return StringUtils.join(_.map(_.filter($scope.testGroups,
            function (testGroup) {
                return CollectionUtils.contains(testGroup.testCases, testCaseName);
            }), function (testGroup) {
            return testGroup.name;
        }), ', ');
    }

    function initGroupActions() {
        $scope.testCaseGroupActions = [{
            name: "Delete",
            loadingIndicator: $scope.loadingIndicator,
            groupLoadingText: "Deleting test cases...",
            callback: deleteTestCase,
            onFinishCallback: afterDeleteTestCase
        }];

        if ($scope.context === "testCases") {
            $scope.testCaseGroupActions.unshift({
                name: "Backup",
                callback: handleBackup,
                map: EntityUtils.nameReducer
            });
        }

        if ($scope.context === "testCases") {
            addTestCasesGroupFunctions();
        }
    }

    function addTestCasesGroupFunctions() {
    	if (CollectionUtils.isNotEmpty(TestGroupCacheManager.getTestGroups())) {
    		$scope.addToTestGroupAction = {
	            name: "Add To Test Group",
	            loadingIndicator: $scope.loadingIndicator,
	            groupLoadingText: "Adding test cases to test group...",
	            isGlobalAction: true,
	            callback: handleTestCaseAdditionToTestGroup
	        };
    		$scope.testCaseGroupActions.push($scope.addToTestGroupAction);
    	}
    	
        $scope.newTestGroupAction = {
            name: "New Test Group",
            loadingIndicator: $scope.loadingIndicator,
            groupLoadingText: "Adding test cases to test a new test group...",
            isGlobalAction: true,
            callback: function (testCases) {
                var newTestGroup = TestGroupFactory.buildDefault(testCases);
                TestGroupCacheManager.cacheContextTestGroup(newTestGroup);
                NavigationManager.goTo("testGroupEditor/new/testCases");
            }
        };
        $scope.testCaseGroupActions.push($scope.newTestGroupAction);
    }
    

    function initHotkeys() {
        var hotkeys = [];

        hotkeys.push(HotkeyManager.buildHotkey('alt+n', 'Create new Test Case', function () {
            $scope.createTestCase();
        }));

        HotkeyManager.bindHotkeys($scope, hotkeys);
    }

    function initiateGridLoadDelay() {
        CollectionUtils.deferCollectionLoad($scope.testCases, function () {
            $scope.gridLoadingIndicator.isLoading = false;
        }, 700);
    }

    function deleteTestCaseFromSystem(testCase, totalActionedTestCases) {
        if (!Permissions.checkEntityAndToast(testCase)) {
            return PromiseUtils.emptyPromise([]);
        }

        return TestCaseManager.delete(testCase, $scope.loadingIndicator,
            getOverrideConfig(totalActionedTestCases)).then(function () {
            $scope.testCases = CollectionUtils.removeObjectByReference($scope.testCases, testCase);
        });
    }

    function deleteTestCaseFromTestGroup(testCase) {
        $scope.testGroup.testCases = CollectionUtils.removeObjectByReference($scope.testGroup.testCases, testCase);
        return PromiseUtils.emptyPromise($scope.testGroup);
    }

    function deleteTestCase(testCase, totalActionedTestCases) {
        if ($scope.context === 'testCases') {
            return deleteTestCaseFromSystem(testCase, totalActionedTestCases);
        } else if ($scope.context === 'testGroupCases') {
            return deleteTestCaseFromTestGroup(testCase);
        }
    }

    function getOverrideConfig(totalActionedTestCases) {
        return totalActionedTestCases >= 3 ? {showSuccessLog: false} : {};
    }

    function afterDeleteTestCase(totalActionedTestCases, actionedTestCaseResults) {
        var actionedTestGroup = actionedTestCaseResults[0];

        if (totalActionedTestCases >= 3) {
            ToastManager.showSuccess($scope.context !== 'testGroupCases' ?
                "deleted {0} test cases successfully!".format(totalActionedTestCases) :
                "deleted {0} test cases from {1} successfully!".format(totalActionedTestCases, actionedTestGroup.name));
        }

        if ($scope.context === 'testGroupCases') {
            TestGroupManager.update($scope.testGroup, {
                showSuccessLog: false
            });
        }
    }

    function handleTestCaseAdditionToTestGroup(selectedTestCases) {
        if (Permissions.blockOperator()) {
            return;
        }
        TestCaseSelectorDialogManager.open({
            context: "testGroups",
            testCases: $scope.testCases,
            testGroups: $scope.testGroups,
            handleTestCaseSelection: function (testGroup) {
            	testGroup.testCases = ObjectUtils.defaultValue(testGroup.testCases, []);
                testGroup.testCases = testGroup.testCases.concat(selectedTestCases);
                TestGroupCacheManager.cacheContextTestGroup(testGroup);
                NavigationManager.goTo("testGroupEditor/edit/testCases/{0}".format(testGroup.name));
            }
        });
    }

    $scope.createTestCase = function () {
        if (Permissions.blockOperator()) {
            return;
        }
        if (isServiceManagementPrivileged()) {
            TestCaseCreatorDialogManager.open({
                context: 'testCases',
                handleTestCaseCreation: createTestCase
            });
        } else {
            ServiceManager.showServiceRecorderDialog({}, ServiceRecordManager.toggleRecordPanel, "testCase");
        }
    };

    function isServiceManagementPrivileged() {
        return angular.isDefined($scope.licenseDetails) &&
            $scope.licenseDetails.serviceManagement;
    }

    function createTestCase() {
        NavigationManager.skipNextConfirmDiscardChangesDialog();
        TestGroupCacheManager.cacheContextTestGroup($scope.testGroup);
    }

    $scope.addTestCase = function () {
        TestCaseSelectorDialogManager.open({
            handleTestCaseSelection: handleTestCaseSelection
        });
    };

    $scope.upload = function (backupFile) {
        AdminManager.restoreSystem(backupFile, $scope.loadingIndicator).then($route.reload);
    };

    function handleTestCaseSelection(selectedTestCase) {
        var testCaseCopy = angular.copy(selectedTestCase);
        testCaseCopy.index = $scope.testGroup.testCases.length;
        $scope.testGroup.testCases.push(testCaseCopy);
    }

    function handleBackup(testCases) {
        TestCaseManager.backup(testCases);
    }

    function handleTestCaseUpdate(updatedTestCases) {
        if (angular.isDefined(updatedTestCases) && angular.isDefined($scope.addToTestGroupAction) &&
            angular.isDefined($scope.newTestGroupAction)) {
            var atLeastOneSelected = SelectionUtils.hasAtLeastOneSelected(updatedTestCases);
            $scope.addToTestGroupAction.visible = atLeastOneSelected;
            $scope.newTestGroupAction.visible = atLeastOneSelected;
        }
    }

    $scope.$watch("testCases", handleTestCaseUpdate, true);

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseInputParameterTableCtrl', testCaseInputParameterTableCtrl);

function testCaseInputParameterTableCtrl($scope, SystemPropertyManager, CollectionUtils, StringUtils, DataTypes, DataTypeHandler) {
    activate();

    function activate() {
        if ($scope.mode.new) {
            $scope.testCase.inputParams = [];
            initTestCaseParams();
        }
        
        if (angular.isUndefined($scope.testCase.inputParams)) {
            $scope.testCase.inputParams = [];
        }

        if (!$scope.mode.details && !CollectionUtils.containsByProperty($scope.testCase.inputParams, "FormsUrl", "name")) {
        	addFormUrlInputParam();
        }
        
        fixTestCaseInputParams();
        addAdditionalInputParams();
    }

    function initTestCaseParams() {
    	if (CollectionUtils.isEmpty($scope.testCase.service.inputParams)) {
    		return;
    	}
    	
        $scope.testCase.inputParams = $scope.testCase.service.inputParams.map(function (inputParam) {
	        return {
	            name: inputParam.id.name,
	            columnNumber: -1,
	            defaultValue: inputParam.paramValue,
	            label: inputParam.paramLabel,
	            parameterizedValue: ""
	        };
        });
    }
    
    function addFormUrlInputParam() {
    	$scope.testCase.inputParams.unshift({
            name: "FormsUrl",
            columnNumber: -1,
            defaultValue: "AP_SERVICE_DEFAULT",
            label: "FormsUrl",
            parameterizedValue: ""
        });
    }

    function fixTestCaseInputParams() {
        $scope.testCase.inputParams.forEach(function (inputParam) {
            inputParam.dataTypeInfo = {
                dataType: DataTypes.getByValue(
                    DataTypeHandler.getDataTypeValue(inputParam.name, inputParam.dataType, SystemPropertyManager.systemConfig.properties))
            };
        });
    }

    function addAdditionalInputParams() {
        if (angular.isUndefined($scope.testCase.inputParams)) {
            $scope.testCase.inputParams = [];
        }
    }
    
    $scope.hasParameterizedValue = function (inputParam) {
        return angular.isDefined(inputParam.parameterizedValue) &&
            StringUtils.isNotEmpty(inputParam.parameterizedValue.name);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseGroupSelectorCtrl', testCaseGroupSelectorCtrl);

function testCaseGroupSelectorCtrl($scope, ObjectUtils, TestGroupManager, CollectionUtils) {
    $scope.testGroupHolder = {testGroups: []};

    activate();

    function activate() {
        TestGroupManager.getAll().then(function (testGroups) {
            $scope.testGroupHolder.testGroups = testGroups;

            if (!$scope.mode.new) {
                if (ObjectUtils.isNotEmpty($scope.testCase.testGroup)) {
                    $scope.testCase.testGroup = CollectionUtils.findByProperty(
                        $scope.testGroupHolder.testGroups, $scope.testCase.testGroup.name, "name");
                }
            }
        });
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseGridCtrl', testCaseGridCtrl);

function testCaseGridCtrl($scope, $location, uiGridConstants, TestCaseCacheManager, ActionBuilder, DialogManager, TestCaseManager, ObjectUtils, CollectionUtils) {
    function activate() {
        $scope.runTestCaseTrigger = false;
        $scope.testCaseRunner = {shouldRunTestCase: false};
        $scope.tableFilter = {value: ""};

        initDefaults();
        initCollapseManager();
        initTestCasesActions();
        initColumnDefs();
        initColumnFilter();
    }

    function initDefaults() {
        $scope.readOnly = ObjectUtils.defaultValue($scope.readOnly, false);
        $scope.useSelection = ObjectUtils.defaultValue($scope.useSelection, true);
        $scope.enableSelectAll = ObjectUtils.defaultValue($scope.enableSelectAll, true);
    }

    function initTestCasesActions() {
        if (!$scope.readOnly) {
            $scope.testCases.forEach(function (testCase) {
                initTestCaseActions(testCase);
            });
        }
    }

    function initTestCaseActions(testCase) {
        if (angular.isUndefined(testCase)) {
            return;
        }

        var actions = [];

        actions.push(ActionBuilder.build("Details", "btn-purple", transitToTestCaseDetails, false, "clip-list-3"));
        actions.push(ActionBuilder.build("Edit", "btn-blue", transitToTestCaseEdit, false, "clip-pencil-3"));
        actions.push(ActionBuilder.buildLink("Duplicate", "btn-green", "#/testCaseEditor/duplicate/" +
            testCase.service.name + "/" + testCase.name, false, "fa fa-copy", true, true));
        actions.push(ActionBuilder.build("Run", "btn-bricky", runTestCase, false, "fa fa-play"));

        testCase.actionsData = {actions: actions};
        initInlineActions(testCase);
    }

    function initInlineActions(testCase) {
        testCase.inlineActions = ActionBuilder.buildInlineActions(
            testCase.actionsData.actions, function ($itemScope) {
                return $itemScope.testGroup;
            });
    }

    function initColumnDefs() {
        $scope.columnDefs = [
            {
                name: 'name',
                displayName: 'Name',
                width: '*',
                cellTemplate: '<a ng-href="#/testCaseEditor/details/{{row.entity.service.name}}/{{COL_FIELD}}" ng-click="handleExistingTestCaseTransition(testCase)">{{COL_FIELD}}</a>'
            },
            {
                name: 'linkedGroups',
                displayName: 'Test Groups',
                width: '*'
            },
            {
                name: 'service',
                displayName: 'Web Service',
                width: '*',
                cellTemplate: '<a ng-href="#/serviceEditor/details/{{COL_FIELD.name}}">{{COL_FIELD.name}}</a>'
            },
            {
                name: 'timestamp',
                displayName: 'Modified',
                width: '140',
                cellFilter: "date:'dd/MM/yy HH:mm:ss'",
                sort: {
                    ignoreSort: $scope.context !== 'testCases',
                    direction: uiGridConstants.DESC,
                    priority: 1
                }
            },
            {
                name: 'createdBy',
                displayName: 'Created By',
                width: '130'
            }
        ];

        if (!$scope.readOnly) {
            $scope.columnDefs.push({
                name: 'actionData',
                displayName: 'Actions',
                width: "*",
                enableSorting: false,
                enableColumnMenu: false,
                cellTemplate: '<ap-action-panel action-data="row.entity.actionsData" action-context="row.entity"></ap-action-panel>'
            });
        }
    }

    function initColumnFilter() {
        $scope.filteredColumns = ['name', 'description'];
    }

    function initCollapseManager() {
        $scope.collapseManager.collapseTestReport = false;
    }

    $scope.handleNewTestCaseTransition = function () {
    };

    $scope.handleExistingTestCaseTransition = function (testCase) {
        TestCaseCacheManager.cacheContextTestCase(testCase);
        transitToTestCaseDetails(testCase);
    };

    function transitToTestCaseDetails(testCase) {
        $location.path("/testCaseEditor/details/" + testCase.service.name + "/" + testCase.name);
    }

    function transitToTestCaseEdit(testCase) {
        $location.path("/testCaseEditor/edit/" + testCase.service.name + "/" + testCase.name);
    }

    $scope.handleExistingTestCaseDeletion = function (testCase) {
        DialogManager.openConfirmationDialog({
            title: 'Delete Test Case',
            description: 'Be aware: the test case will be deleted ' +
            'automatically from any test group',
            onConfirmCallback: function () {
                deleteTestCase(testCase);
            }
        });
    };

    function deleteTestCase(testCase) {
        TestCaseManager.delete(testCase).then(function () {
            $scope.service.testCases = CollectionUtils.removeObjectByReference(
                $scope.service.testCases, testCase);
        });
    }

    function runTestCase(testCase) {
        $scope.collapseManager.collapseTestReport = true;
        $scope.triggeredTestCase = testCase;
        $scope.runTestCaseTrigger = true;
        $scope.testCaseRunner.shouldRunTestCase = true;
        testCase.executing = true;
    }

    $scope.handleReportCallback = function () {
        $scope.triggeredTestCase.executing = false;
    };

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseDetailsCtrl', testCaseDetailsCtrl);

function testCaseDetailsCtrl($scope, System, Formats, DetailLevels) {
    $scope.restUrl = "{0}/Macro/TestService/{1}".format(System.baseUrl, $scope.testCase.name);
    $scope.formats = Formats.values;
    $scope.detailLevels = DetailLevels.values;
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('TestCaseBatchConfigCtrl', testCaseBatchConfigCtrl);

function testCaseBatchConfigCtrl($scope, CsvParser, FileDownloader, ObjectUtils, StringUtils, ToastManager) {
    $scope.chosenCsv = undefined;
    $scope.csvLoadingData = {isLoaded: false, hasBatchParameters: false};

    function activate() {
        if (StringUtils.isNotEmpty($scope.testCase.batchParameters) &&
            StringUtils.contains($scope.testCase.batchParameters, ",")) {
            $scope.csvLoadingData.hasBatchParameters = true;
            loadBatchParameters($scope.testCase.batchParameters);
        }

        $scope.testCase.iterationNumber = ObjectUtils.defaultValue($scope.testCase.iterationNumber, 1);
        $scope.testCase.runUntilEndOfFile = ObjectUtils.defaultValue($scope.testCase.runUntilEndOfFile, false);
        $scope.testCase.useFirstLineAsHeader = ObjectUtils.defaultValue($scope.testCase.useFirstLineAsHeader, false);
        $scope.testCase.hasNewCsv = false;
    }

    activate();

    $scope.handleFileLoad = function (e, files) {
        var reader = new FileReader();
        reader.readAsText(files[0]);

        reader.onload = function () {
            $scope.chosenCsv = reader.result;
            $scope.csvLoadingData.isLoaded = true;

            loadBatchParameters($scope.chosenCsv);

            $scope.$apply();
        };
    };

    $scope.handleFirstLineAsHeader = function () {
        $scope.testCase.useFirstLineAsHeader = !$scope.testCase.useFirstLineAsHeader;

        if (angular.isDefined($scope.chosenCsv)) {
            loadBatchParameters($scope.chosenCsv);
        }
    };

    function loadBatchParameters(csvString) {
        $scope.testCase.batchParameters = csvString;

        try {
            var csvData = CsvParser.parse(csvString, ",", !$scope.testCase.useFirstLineAsHeader);
            setTestCaseParameters(csvData);
        } catch (err) {
            ToastManager.showError("something went wrong while parsing the csv file");
        }
    }
    
    $scope.downloadBatchParameters = function() {
    	FileDownloader.saveContent($scope.testCase.batchParameters, 'text/csv', 'parameters.csv');
    };

    function setTestCaseParameters(csvData) {
        $scope.testCase.parameters = {};
        $scope.testCase.parameters.values = csvData.values;

        $scope.testCase.numberOfIterations =
            angular.isDefined($scope.testCase.numberOfIterations) && $scope.testCase.numberOfIterations > 1 ?
                Math.min($scope.testCase.numberOfIterations, csvData.values.length) :
                Math.max(1, csvData.values.length);

        $scope.testCase.batchSize = csvData.values.length;

        var index = 1;
        $scope.testCase.parameters.headers = csvData.headers.map(function (headerName) {
            return {
                name: headerName,
                index: index++
            };
        });
    }

    $scope.onRunUntilEndOfFileChange = function () {
        $scope.testCase.runUntilEndOfFile = !$scope.testCase.runUntilEndOfFile;

        if ($scope.testCase.runUntilEndOfFile) {
            $scope.testCase.numberOfIterations = $scope.testCase.computedBatchSize;
        }
    };

    function onBatchSizeChange(updatedBatchSize, previousBatchSize) {
    	if (updatedBatchSize === previousBatchSize) {
    		return;
    	}
        $scope.testCase.numberOfIterations = angular.isUndefined(previousBatchSize) ?
            $scope.testCase.batchSize : $scope.testCase.numberOfIterations;

        updateRunUntilEndOfFile(updatedBatchSize);
    }

    function onUseFirstLineAsHeaderChange(updatedFirstLineAsHeader, previousFirstLineAsHeader) {
    	if (updatedFirstLineAsHeader === previousFirstLineAsHeader) {
    		return;
    	}
        $scope.testCase.numberOfIterations = updatedFirstLineAsHeader !== previousFirstLineAsHeader ?
            Math.min($scope.testCase.numberOfIterations - (updatedFirstLineAsHeader ? 1 : -1), $scope.testCase.batchSize) :
            $scope.testCase.numberOfIterations;
        updateRunUntilEndOfFile($scope.testCase.batchSize);
    }

    function updateRunUntilEndOfFile(updatedBatchSize) {
        $scope.testCase.computedBatchSize = Math.min(updatedBatchSize -
            ($scope.testCase.useFirstLineAsHeader ? 1 : -1), $scope.testCase.batchSize);
        $scope.testCase.runUntilEndOfFile = $scope.testCase.computedBatchSize === $scope.testCase.numberOfIterations;
    }

    function onNumberOfIterationsChange(updatedNumberOfIterations, previousNumberOfIterations) {
    	if (updatedNumberOfIterations === previousNumberOfIterations) {
    		return;
    	}
        $scope.testCase.runUntilEndOfFile = $scope.testCase.computedBatchSize === updatedNumberOfIterations;
    }

    $scope.$watch("testCase.batchSize", onBatchSizeChange);
    $scope.$watch("testCase.useFirstLineAsHeader", onUseFirstLineAsHeaderChange);
    $scope.$watch("testCase.numberOfIterations", onNumberOfIterationsChange);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('ServiceSelectorDialogCtrl', serviceSelectorDialogCtrl);

function serviceSelectorDialogCtrl($scope, title, context, $mdDialog) {
    activate();

    function activate() {
    	$scope.title = title;
        $scope.context = context;
        $scope.serviceHolder = {service: {}};
    }

    $scope.onSave = function (service) {
        if (angular.isDefined(service)) {
            $mdDialog.hide(service);
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .controller('AuraTesterManagerCtrl', auraTesterManagerCtrl);

function auraTesterManagerCtrl($scope, $routeParams, testCases, testGroups, licenseDetails, DataManager, TabBuilder, HotkeyManager) {
    activate();

    function activate() {
        DataManager.setIsLoading(false);
        $scope.editedTestGroupHolder = {editedTestGroup: {}};
        $scope.testCaseRunner = {shouldRunTestCase: false};
        $scope.context = $routeParams.context;
        $scope.previousEditedGroup = $routeParams.previousEditedGroup;
        $scope.createdTestCase = $routeParams.createdTestCase;
        $scope.testCases = testCases;
        $scope.testGroupHolder = {testGroups: testGroups};
        $scope.licenseDetails = licenseDetails;

        initTabs();
        buildCollapseManager();
        initHotkeys();
    }

    function initTabs() {
        $scope.tabs = TabBuilder.buildTabs(["testCases", "testGroups"]);
        chooseTab($scope.context);
    }

    function chooseTab(tabName) {
        $scope.tabs.selectedIndex = TabBuilder.getTabIndex($scope.tabs, tabName);
    }

    function buildCollapseManager() {
        $scope.collapseManager = {};
        $scope.collapseManager.collapseTestCases = true;
        $scope.collapseManager.collapseTestGroups = true;
        $scope.collapseManager.collapseTestGroupCases = true;
        $scope.collapseManager.collapseTestReport = false;
    }

    function initHotkeys() {
        var hotkeys = [];

        hotkeys.push(HotkeyManager.buildHotkey('alt+c', 'Switch to Test Cases tab', function () {
        	chooseTab('testCases');
        }));

        hotkeys.push(HotkeyManager.buildHotkey('alt+g', 'Switch to Test Groups tab', function () {
            chooseTab('testGroups');
        }));

        HotkeyManager.bindHotkeys($scope, hotkeys);
    }

    $scope.isTestCaseManagementPrivileged = function () {
        return $scope.licenseDetails.testManagement;
    };

    $scope.getTestCasesSectionTitle = function (testGroup) {
        return angular.isDefined(testGroup) ? testGroup.name + " test cases" :
            "pick a test group";
    };

    $scope.handleTestGroupExecution = function (testGroup) {
        $scope.collapseManager.collapseTestReport = true;
        $scope.collapseManager.collapseTestGroups = false;
        $scope.collapseManager.collapseTestGroupCases = false;

        $scope.triggeredTestGroup = testGroup;
        $scope.runTestCaseTrigger = true;
        $scope.testCaseRunner.shouldRunTestCase = true;
        testGroup.executing = true;
    };

    $scope.handleTestGroupReport = function (report) {
        $scope.testCaseRunner.shouldRunTestCase = false;
        $scope.collapseManager.collapseTestGroups = true;
        $scope.collapseManager.collapseTestGroupCases = true;
        $scope.testCaseRunner.testGroupReport = report;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('AgentIntervals', agentIntervalConstants);

function agentIntervalConstants(ConstantUtils, System) {
    var self = this;

    activate();

    function activate() {
        self.values = [];

        if (!System.isProd) {
            self.values.push({value: 10 * 1000, text: '10 seconds'});
        }

        self.values.push({value: 2 * 60 * 1000, text: '2 minutes'});
        self.values.push({value: 5 * 60 * 1000, text: '5 minutes'});
        self.values.push({value: 10 * 60 * 1000, text: '10 minutes'});
        self.values.push({value: 20 * 60 * 1000, text: '20 minutes'});
        self.values.push({value: 30 * 60 * 1000, text: '30 minutes'});
        self.values.push({value: 60 * 60 * 1000, text: '60 minutes'});
        self.values.push({value: 90 * 60 * 1000, text: '90 minutes'});
        self.values.push({value: 2 * 60 * 60 * 1000, text: '2 hours'});
        self.values.push({value: 3 * 60 * 60 * 1000, text: '3 hours'});
        self.values.push({value: 6 * 60 * 60 * 1000, text: '6 hours'});
        self.values.push({value: 12 * 60 * 60 * 1000, text: '12 hours'});
        self.values.push({value: 24 * 60 * 60 * 1000, text: '24 hours'});

        self.default = System.isProd ? self.values[0] : self.values[1];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('ValidationFunctions', validationFunctionConstants);

function validationFunctionConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {
                value: 'NONE',
                text: 'Never'
            },
            {
                value: 'EMPTY',
                text: 'Response is NOT empty'
            },
            {
                value: 'NOT_EMPTY',
                text: 'Response is empty'
            },
            {
                value: 'CONTAINS_STRING',
                text: 'Response does NOT contain value'
            },
            {
                value: 'NOT_CONTAINS_STRING',
                text: 'Response contains value'
            }
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .constant('TestCaseExecutionModes', {
        Idle: 'idle',
        Running: 'running',
        Finished: 'finished'
    });
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('DetailLevels', detailLevelConstants);

function detailLevelConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {
                value: 'REGULAR',
                text: 'ERROR'
            },
            {
                value: 'DETAILED',
                text : 'DEBUG'
            }
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
	.directive('apThemePicker', themePickerDirective);

function themePickerDirective() {
	return {
		restrict: 'AE',
		scope: {
			theme: '=',
			colors: '='
		},
		templateUrl: 'app/modules/visualize/views/elements/themePicker.html',
		controller: 'ThemePickerCtrl'
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .directive('apTemplateLayout', templateLayoutDirective);

function templateLayoutDirective() {
    return {
        restrict: 'AE',
        scope: {
            type: '@'
        },
        templateUrl: 'app/modules/visualize/views/elements/templateLayout.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .directive('apDataTypeValue', dataTypeValueDirective);

function dataTypeValueDirective() {
    return {
        restrict: 'AE',
        scope: {
            mode: '=?',
            param: '=?',
            placeholder: '@',
            shouldDisable: '=?'
        },
        templateUrl: 'app/modules/visualize/views/elements/dataTypeValue.html',
        controller: 'DataTypeValueCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .directive('apDataTypeSelector', dataTypeSelectorDirective);

function dataTypeSelectorDirective() {
    return {
        restrict: 'AE',
        scope: {
            model: '=',
            context: '@',
            shouldDisable: '=?',
            onSelectCallback: '&',
            systemProperties: '='
        },
        templateUrl: 'app/modules/visualize/views/elements/dataTypeSelector.html',
        controller: 'DataTypeSelectorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
	.directive('apColorCustomizer', colorCustomizerDirective);

function colorCustomizerDirective() {
	return {
		restrict: 'AE',
		scope: {
			model: '='
		},
		templateUrl: 'app/modules/visualize/views/elements/colorCustomizer.html',
		controller: 'ColorCustomizerCtrl'
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
	.service('ThemeUtils', themeUtils);

function themeUtils() {
	
	this.defaultTheme = {
		captionColor : {value: 'white', hex: '#ffffff'},
		labelColor : {value: 'grey', hex: '#696969'},
		backgroundColor : {value: 'white', hex: '#ffffff'}
	};
	
	this.copyTheme = function (targetTheme, sourceTheme) {
		targetTheme.captionColor = sourceTheme.captionColor;
		targetTheme.labelColor = sourceTheme.labelColor;
		targetTheme.backgroundColor = sourceTheme.backgroundColor;
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .service('JsParser', jsParserService);

function jsParserService(StringUtils) {
    var self = this;
    
    /**
     * Generate array of comment positions.
     * Assuming the code syntax is valid, this array will always have an even length, and will
     * consist of 'pairs': the first index will always be the comment start index, followed by the comment end index. 
     */
    function findCommentPositions(code) {
    	var $ = [];
    	var multiLineComment = false,
			singleLineComment = false;
	
		for (var i = 0; i < code.length - 1; i++) {		//upper index makes sure that always there would be code[i] and code[i+1]
			var currentChars = code.substr(i ,2);
			if (!multiLineComment && !singleLineComment && currentChars === '//') {
				singleLineComment = true;
				$.push(i);
				i++;	//skip next character
			} else if (singleLineComment && currentChars.endsWith('\n')) {
				singleLineComment = false;
				$.push(i+1);
				i++;	//skip next character
			} else if (currentChars === '/*') {
				multiLineComment = true;
				$.push(i);
				i++;	//skip next character
			} else if (currentChars === '*/') {
				multiLineComment = false;
				$.push(i+1);
				i++;	//skip next character
			}
			
		}
		
		return $;
    }
    
    function isCommentedOut(commentPositions, position) {
    	for (var i = 0; i < commentPositions.length; i++) {
    		if (commentPositions[i] > position) {
    			return i % 2 === 1;
    		}
    	}
    	return false;
    }
    
	/**
	 * @return pairs of {functionName, startIndex}.
	 */
	this.extractFunctionNames = function(code) {
		var $ = {
			names: [],
			positions: []
		};
		if (StringUtils.isEmpty(code)) {
			return $;
		}
		
		var regex = /[\t ]*function\s+[a-zA-Z0-9_]+\s*\(/g;
		var match = regex.exec(code);
		var commentPositions = findCommentPositions(code);
		
		while (match != null) {
			if (!isCommentedOut(commentPositions, match.index)) {
				$.names.push(match[0].replace('(', '').replace('function', '').replace(/\s/g, ''));
				$.positions.push(match.index);
			}
			match = regex.exec(code);
		}
		
		return $;
	};
	
	/**
	 * Extract function body from code.
	 * code - whole JavaScript code.
	 * titleStart - index where the function starts.
	 */
	this.extractFunction = function(code, titleStart) {
    	var counter = 0,
    		firstOpeningBracketFound = false;
    	for (var i = titleStart, l = code.length; i < l; i++) {
    		if (code[i] === '{') {
    			firstOpeningBracketFound = true;
    			counter++;
    		} else if (code[i] === '}') {
    			counter--;
    		}
    		if (counter < 0) {
    			return '';
    		}
    		if (counter === 0 && firstOpeningBracketFound) {
    			return code.substring(titleStart, i + 1);
    		}
    	}
    	return '';
    };
    
    function extractFunctionBodies(code, functions) {
		functions.bodies = [];
		for (var i = 0; i < functions.names.length; i++) {
			functions.bodies.push(self.extractFunction(code, functions.positions[i]));
		}
	}
    
    this.comment = function(code) {
		var $ = '//' + code;
		return $.replace(/\n/g, '\n//');
	};
    
    function isFunctionsMatch(currentFunction, newFunction) {
    	return currentFunction.replace(/\s/g, '') === newFunction.replace(/\s/g, '');
    }
    
    function findFunctionTitle(code, functionName) {
    	var regex = new RegExp('[\t ]*function\\s+' + functionName + '\\s*\\(', 'g');
		var match = regex.exec(code);
		return match[0];
    }
    
    /**
	 * Replace a function in <code>code</code> with <code>newFucntion</code>.
	 */
	this.replaceFunction = function(currentCode, currentFunction, newCode, newFunctionName) {
		var $ = currentCode;
		var newFunction = self.extractFunction(newCode, newCode.indexOf(findFunctionTitle(newCode, newFunctionName)));
		
		if (isFunctionsMatch(currentFunction, newFunction)) {
			return $;
		}
		
		return $.replace(currentFunction, 
				  self.comment(currentFunction) +
				  '\n' +
				  newFunction);
	};
    
    /**
	 * Merge JavaScript code from <code>newCode</code> to <code>currentCode</code>.
	 * Functions that won't be replaced:<br/>
	 * <ul>
	 * 	<li>Existing functions with <code>_lov_</code> in their name</li>
	 * 	<li>Existing functions that their names are listed in <code>functionsThatSuppressJsRegeneration</code>.</li>
	 * </ul>
	 * Other existing functions will be commented-out and regenerated.
	 * @return the merged code.
	 */
	this.merge = function(currentCode, newCode, functionsNoOverride) {
		var $ = currentCode;
		
		var currentFunctionNames = self.extractFunctionNames(currentCode),
			newFunctionNames = self.extractFunctionNames(newCode);
		
		extractFunctionBodies(currentCode, currentFunctionNames);
		
		newFunctionNames.names.forEach(function(newFunctionName) {
			var indexInCurrent = currentFunctionNames.names.indexOf(newFunctionName);
			if (indexInCurrent === -1) { 
				$ += '\n' + self.extractFunction(newCode, newCode.indexOf(findFunctionTitle(newCode, newFunctionName)));
			} else if (angular.isUndefined(functionsNoOverride) || functionsNoOverride.indexOf(newFunctionName) === -1) {
				$ = self.replaceFunction($, currentFunctionNames.bodies[indexInCurrent], newCode, newFunctionName);
			}
		});
		
		return $;
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .service('DataTypeHandler', dataTypeHandlerService);

function dataTypeHandlerService($mdDialog, ObjectUtils, ConstantUtils, DataTypes, StringUtils) {
    var self = this;

    activate();

    function activate() {
        self.dataTypeHandlers = {};
        self.dataTypeHandlers.date = configureDate;
        self.dataTypeHandlers.slider = configureSlider;
        self.dataTypeHandlers.LOV = configureLov;
        self.dataTypeHandlers.static_lov = configureStaticLov;
        self.dataTypeHandlers.file = configureFile;
        self.dataTypeHandlers.image = configureImage;
    }

    this.handleDataTypeInfoSelect = function (param, dataType, systemProperties) {
    	param._backup = undefined;
		param._backup = angular.copy(param);
    	
    	if (param.dataTypeInfo.dataType.value !== dataType.value) {
    		param.dataTypeInfo.format = undefined;
        	param.dataTypeInfo.value1 = undefined;
        	param.dataTypeInfo.value2 = undefined;
        	param.dataTypeInfo.service = undefined;
    	}
    	
        ObjectUtils.ifDefined(self.dataTypeHandlers[dataType.value],
            function (handler) {
                handler(param, dataType, systemProperties);
            });
    };

    this.getDataTypeValue = function (paramName, paramDataType, systemProperties) {
        var dataType = ConstantUtils.defaultValue(paramDataType, DataTypes);

        if (StringUtils.containsInCollection(paramName, systemProperties.PROTECTED_FIELDS)) {
            return "password";
        }

        return dataType;
    };

    function configureDate(param) {
        openDataTypeConfigurator({
            controller: 'DateDialogCtrl',
            templateUrl: 'app/modules/visualize/views/elements/configurators/dateDialog.html',
            param: param,
            resultHandler: function (chosenDate) {
                param.paramValue = chosenDate;
            }
        });
    }

    function configureSlider(param) {
        openDataTypeConfigurator({
            controller: 'SliderConfigurationCtrl',
            templateUrl: 'app/modules/visualize/views/elements/configurators/sliderConfigurationDialog.html',
            param: param,
            resultHandler: function (chosenValue) {
                param.paramValue = chosenValue;
            }
        });
    }

    function configureLov(param, dataType, systemProperties) {
        openDataTypeConfigurator({
            controller: 'LovConfigurationDialogCtrl',
            templateUrl: 'app/modules/visualize/views/elements/configurators/lovConfigurationDialog.html',
            param: param,
            systemProperties: systemProperties
        });
    }
    
    function configureStaticLov(param, dataType, systemProperties) {
        openDataTypeConfigurator({
            controller: 'StaticLovConfigurationDialogCtrl',
            templateUrl: 'app/modules/visualize/views/elements/configurators/staticLovConfigurationDialog.html',
            param: param,
            systemProperties: systemProperties
        });
    }
    
    function configureFile(param, dataType, systemProperties) {
        openDataTypeConfigurator({
            controller: 'FileUploadConfigDialogCtrl',
            templateUrl: 'app/modules/visualize/views/elements/configurators/fileUploadConfigDialog.html',
            param: param,
            systemProperties: systemProperties
        });
    }
    
    function configureImage(param, dataType, systemProperties) {
        openDataTypeConfigurator({
            controller: 'AppImageDialogCtrl',
            templateUrl: 'app/modules/app/views/visualizer/page/appImageDialog.html',
            param: param,
            systemProperties: systemProperties,
            resultHandler: function (image) {
                param.paramValue = image.url;
                param.dataTypeInfo.format = image.width;
            }
        });
    }

    function openDataTypeConfigurator(options) {
        $mdDialog.show({
            controller: options.controller,
            templateUrl: options.templateUrl,
            clickOutsideToClose: true,
            locals: {
                param: options.param,
                systemProperties: options.systemProperties
            },
            bindToController: true
        }).then(options.resultHandler);
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
	.controller('ThemeCustomizerDialogCtrl', themeCustomizerDialogCtrl);

function themeCustomizerDialogCtrl($scope, $mdDialog, customizedTheme) {
	function activate() {
		$scope.theme = customizedTheme;
	}

	$scope.saveChanges = function () {
		$mdDialog.hide();
	};

	$scope.cancelChanges = function () {
		$mdDialog.cancel();
	};

	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .controller('StaticLovConfigurationDialogCtrl', staticLovConfigurationDialogCtrl);

function staticLovConfigurationDialogCtrl($scope, $mdDialog, param, StringUtils, ObjectUtils, HotkeyManager) {
    
	function activate() {
        $scope.param = param;
        $scope.config = {
        	format: ($scope.param.dataTypeInfo.format === 'Dropdown' ? 'Dropdown' : 'Combobox'),
    		values: angular.isDefined($scope.param.dataTypeInfo.value1) ? setValues($scope.param.dataTypeInfo.value1.split(',')) : []
        };
        
        HotkeyManager.bindEditorHotkeys($scope, $scope.saveChanges, $scope.cancelChanges);
    }

    $scope.validate = function () {
    	$scope.staticLovConfigurationForm.staticValues.$validate();
    };
    
    function setValues(values) {
    	var $ = [];
    	values.forEach(function(value) {
    		$.push({name: value});
    	});
    	return $;
    }
    
    function getValues() {
    	var $ = [];
    	$scope.config.values.forEach(function(value) {
    		$.push(value.name);
    	});
    	return $;
    }

    $scope.saveChanges = function () {
    	$scope.param.dataTypeInfo.format = ($scope.config.format === 'Dropdown' ? 'Dropdown' : undefined);
    	$scope.param.dataTypeInfo.value1 = getValues().join(',');
    	$scope.param.ui_touched = true;
    	$mdDialog.hide();
    };
    
    $scope.cancelChanges = function () {
    	angular.extend($scope.param, $scope.param._backup);
        $mdDialog.hide();
    };

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .controller('SliderConfigurationCtrl', sliderConfiguratorCtrl);

function sliderConfiguratorCtrl($scope, $mdDialog, param, StringUtils, HotkeyManager) {
    
	function activate() {
        $scope.param = param;
        initBooleanValues();
        initHotkeys();
    }

    function initBooleanValues() {
        if (StringUtils.isEmpty($scope.param.dataTypeInfo.value1)) {
            $scope.param.dataTypeInfo.value1 = "yes";
        }

        if (StringUtils.isEmpty($scope.param.dataTypeInfo.value2)) {
            $scope.param.dataTypeInfo.value2 = "no";
        }
    }

    function initHotkeys() {
        HotkeyManager.bindEditorHotkeys($scope, $scope.saveChanges, $scope.cancelChanges);
    }

    function isTrueOrFalseValue(paramValue) {
        return paramValue === $scope.param.dataTypeInfo.value2 ||
            paramValue === $scope.param.dataTypeInfo.value1;
    }

    $scope.saveChanges = function () {
    	var chosenValue = isTrueOrFalseValue($scope.param.paramValue) ?
    					  $scope.param.paramValue :
    					  $scope.param.dataTypeInfo.value2;
    	$mdDialog.hide(chosenValue);
    };
    
    $scope.cancelChanges = function () {
        angular.extend($scope.param, $scope.param._backup);
        $mdDialog.hide();
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .controller('LovConfigurationDialogCtrl', lovConfigurationDialogCtrl);

function lovConfigurationDialogCtrl($scope, $mdDialog, param, systemProperties, ServiceConverter, HotkeyManager, ObjectUtils) {
    
	function activate() {
        $scope.param = param;
        $scope.systemProperties = systemProperties;
        
        $scope.param.dataTypeInfo.format = ($scope.param.dataTypeInfo.format === 'Dropdown' ? 'Dropdown' : 'Combobox');
        $scope.param.dataTypeInfo.value1 = $scope.param.dataTypeInfo.value1 !== 'false' && $scope.param.dataTypeInfo.value1 !== false;
        $scope.param.dataTypeInfo.value2 = $scope.param.dataTypeInfo.value2 === 'true' || $scope.param.dataTypeInfo.value2 === true;
        if (angular.isUndefined(param.dataTypeInfo.service)) {
            $scope.param.dataTypeInfo.service = {};
        }

        HotkeyManager.bindEditorHotkeys($scope, $scope.saveChanges, $scope.cancelChanges);
    }
	
	 $scope.toggleCheckbox = function($event) {
    	var checkbox = $($event.currentTarget.previousSibling.firstChild);
    	checkbox.click();
    };
    
    $scope.hasSelection = function () {
    	if (angular.isUndefined($scope.param.dataTypeInfo.service.properties)) {
    		return false;
    	}
    	for (var i = 0; i < $scope.param.dataTypeInfo.service.properties.outputParams.length; i++) {
    		var outputParam = $scope.param.dataTypeInfo.service.properties.outputParams[i];
    		if (outputParam.inTable && outputParam.visible && !ServiceConverter.isSpecialOutputParam(outputParam)) {
    			return true;
    		}
    	}
    	return false;
    };

    $scope.saveChanges = function () {
    	$scope.param.dataTypeInfo.format = ($scope.param.dataTypeInfo.format === 'Dropdown' ? 'Dropdown' : undefined);
    	$scope.param.ui_touched = true;
        $mdDialog.hide();
    };

    $scope.cancelChanges = function () {
    	angular.extend($scope.param, $scope.param._backup);
        $mdDialog.hide();
    };

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .controller('FileUploadConfigDialogCtrl', fileUploadConfigDialogCtrl);

function fileUploadConfigDialogCtrl($scope, $mdDialog, param, StringUtils, ObjectUtils, HotkeyManager) {
    
	function activate() {
        $scope.param = param;
        $scope.param.dataTypeInfo.value1 = ($scope.param.dataTypeInfo.value1 === "true");
        $scope.param.dataTypeInfo.value2 = ($scope.param.dataTypeInfo.value2 === "true");
        
        var isUploadsFolder = angular.isUndefined($scope.param.dataTypeInfo.format);
		$scope.config = {
			target: isUploadsFolder ? 'uploadsFolder' : 'absolutePath',
			url: isUploadsFolder ? '' : $scope.param.dataTypeInfo.format
		};
        
        HotkeyManager.bindEditorHotkeys($scope, $scope.saveChanges, $scope.cancelChanges);
    }

    $scope.saveChanges = function () {
    	$scope.param.dataTypeInfo.value1 = $scope.param.dataTypeInfo.value1 ? "true" : undefined;
    	$scope.param.dataTypeInfo.value2 = $scope.param.dataTypeInfo.value2 ? "true" : undefined;
    	$scope.param.dataTypeInfo.format = $scope.config.target !== 'uploadsFolder' ? $scope.config.url : undefined;
    	$mdDialog.hide();
    };
    
    $scope.cancelChanges = function () {
    	angular.extend($scope.param, $scope.param._backup);
        $mdDialog.hide();
    };

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .controller('DateDialogCtrl', dateDialogCtrl);

function dateDialogCtrl($scope, $mdDialog, param, DateFormats, ObjectUtils, HotkeyManager) {
    function activate() {
        $scope.param = param;
        
        $scope.dateFormats = DateFormats.values;
        $scope.pickerConfig = {visible: false};
        $scope.param.dataTypeInfo.useCurrentDate = $scope.param.dataTypeInfo.value === 0;
        $scope.param.dataTypeInfo.format = ObjectUtils.defaultValue($scope.param.dataTypeInfo.format, DateFormats.default);
        $scope.param.dataTypeInfo.value = ObjectUtils.defaultValue($scope.param.dataTypeInfo.value, new Date().getTime());
        
        initHotkeys();
    }

    function initHotkeys() {
        HotkeyManager.bindEditorHotkeys($scope, $scope.saveChanges, $scope.cancelChanges);
    }
    
    $scope.openDatePicker = function () {
        $scope.pickerConfig.visible = true;
    };

    $scope.saveChanges = function () {
    	if ($scope.param.dataTypeInfo.useCurrentDate) {
    		$scope.param.dataTypeInfo.value = 0;
    	}
    	$scope.param.ui_touched = true;
        $mdDialog.hide($scope.param.dataTypeInfo.value);
    };

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
	.controller('ThemePickerCtrl', themePickerCtrl);

function themePickerCtrl($scope, $mdDialog, ThemeUtils, CollectionUtils, ObjectUtils) {
	var CUSTOM_THEME_HEX_SUFFIX = '-Custom'; 

	function activate() {
		$scope.theme.isCustomized = isCustomized();
		$scope.theme.captionColor = ObjectUtils.defaultValue($scope.theme.captionColor, ThemeUtils.defaultTheme.captionColor);
		$scope.theme.labelColor = ObjectUtils.defaultValue($scope.theme.labelColor, ThemeUtils.defaultTheme.labelColor);
		$scope.theme.backgroundColor = ObjectUtils.defaultValue($scope.theme.backgroundColor, ThemeUtils.defaultTheme.backgroundColor);
		
		if ($scope.theme.isCustomized) {
			$scope.customizedTheme = $scope.theme;
			$scope.colors.push(angular.copy($scope.customizedTheme));
		}
	}
	
	function isCustomized() {
		return $scope.theme.hex.indexOf(CUSTOM_THEME_HEX_SUFFIX) > -1;
	}
	
	$scope.getHex = function (color) {
		return color.replace(CUSTOM_THEME_HEX_SUFFIX, '');
	};
	
	$scope.onThemeChange = function () {
		ThemeUtils.copyTheme($scope.theme, isCustomized() ? $scope.colors[$scope.colors.length - 1] : ThemeUtils.defaultTheme);
	};
	
	$scope.customizeTheme = function () {
		$scope.backupTheme = angular.copy($scope.customizedTheme);
		
		$scope.customizedTheme = angular.copy($scope.theme);
		$scope.customizedTheme.hex = $scope.getHex($scope.customizedTheme.hex);
		
		if (!CollectionUtils.containsByProperty($scope.colors, true, 'isCustomized')) {
			$scope.customizedTheme.isCustomized = true;
		}
		
		$mdDialog.show({
			controller: 'ThemeCustomizerDialogCtrl',
			templateUrl: 'app/modules/visualize/views/elements/configurators/themeCustomizerDialog.html',
			clickOutsideToClose: false,
			locals: {
				customizedTheme: $scope.customizedTheme
			},
			bindToController: true
		}).then(confirmThemeCustomization, cancelThemeCustomization);
	};

	function confirmThemeCustomization() {
		$scope.customizedTheme.hex = $scope.customizedTheme.hex + CUSTOM_THEME_HEX_SUFFIX;
		$scope.colors = CollectionUtils.removeByProperty($scope.colors, 'isCustomized', true);
		$scope.colors.push(angular.copy($scope.customizedTheme));
		$scope.theme = $scope.customizedTheme;
	}

	function cancelThemeCustomization() {
		$scope.customizedTheme = $scope.backupTheme;
	}

	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .controller('DataTypeValueCtrl', dataTypeValueCtrl);

function dataTypeValueCtrl($scope, $timeout) {
    activate();

    function activate() {
        initMode();
        $scope.showValue = true;
    }

    function initMode() {
        if (angular.isUndefined($scope.mode)) {
            $scope.mode = {};
            $scope.mode.edit = true;
        }
    }

    function reloadValuePresenter() {
        $scope.showValue = false;

        $timeout(function () {
            $scope.showValue = true;
        }, 10);
    }

    $scope.$watch("param.dataTypeInfo", reloadValuePresenter, true);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .controller('DataTypeSelectorCtrl', dataTypeSelectorCtrl);

function dataTypeSelectorCtrl($scope, DataTypes, ActionBuilder) {
    activate();

    function activate() {
    	$scope.dataTypes = $scope.context === "table" ? filterTableDataTypes() : DataTypes.values;
        initActions();
    }

    function filterTableDataTypes() {
        return _.filter(DataTypes.values, function (dataTypeValue) {
            return dataTypeValue.tableValid === true;
        });
    }

    function initActions() {
        $scope.configuratorActionData = {
            actions: [
                ActionBuilder.build("Configure", "btn-purple", configure, false, "fa fa-cogs")
            ]
        };
    }

    function configure() {
        $scope.onDataTypeSelect($scope.model);
    }

    $scope.onDataTypeSelect = function (dataType) {
        $scope.onSelectCallback({
            dataType: dataType
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
	.controller('ColorCustomizerCtrl', colorCustomizerCtrl);

function colorCustomizerCtrl($scope) {

}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
	.service('ThemeColors', themeColors);

function themeColors(ConstantUtils, CollectionUtils) {
	var self = this;

	activate();

	function activate() {
		self.values = [
			{value: 'light', hex: '#d9d9d9'},
			{value: 'dark', hex: '#323232'},
			{value: 'blue', hex: '#4c4cff'},
			{value: 'green', hex: '#329932'},
			{value: 'orange', hex: '#ffb732'},
			{value: 'purple', hex: '#993299'},
			{value: 'red', hex: '#ff3232'},
			{value: 'teal', hex: '#329999'}
		];

		self.default = self.values[0];
	}

	self.getByValue = function (constantElement) {
		return ConstantUtils.getByValue(constantElement, self);
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .service('DateFormats', dateFormatConstants);

function dateFormatConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {text: "dd-MM-yyyy", value: "dd-mm-yy"},
            {text: "dd/MM/yyyy", value: "dd/mm/yy"},
            {text: "yyyy-MM-dd", value: "yy-mm-dd"},
            {text: "dd MMM, yy", value: "dd M, y"},
            {text: "dd-MMM-yy", value: "dd-M-y"}
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
    .service('DataTypes', dataTypeConstants);

function dataTypeConstants(StringUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {value: "read only", text: 'Read Only', 		configurable: false, tableValid: true},
            {value: "text", text: 'Text', 					configurable: false},
            {value: "number", text: 'Number', 				configurable: false	},
            {value: "password", text: 'Password', 			configurable: false	},
            {value: "date", text: 'Date', 					configurable: true	},
            {value: "phone", text: 'Phone', 				configurable: false	},
            {value: "slider", text: 'Slider', 				configurable: true	},
            {value: "checkbox", text: 'Checkbox', 			configurable: false, tableValid: true},
            {value: "file", text: 'File Upload / Camera', 	configurable: true	},
            {value: "link", text: 'Link', 					configurable: false	},
            {value: "LOV", text: 'LOV', 					configurable: true	},
            {value: "static_lov", text: 'Static LOV', 		configurable: true	},
            {value: "qr", text: 'QR Barcode', 				configurable: false	},
            {value: "image", text: 'Image', 				configurable: true	}
        ];
        
        self.advanced = [
        	{value: "map", text: 'Map'}
        ];

        self.default = self.values[1];
    }

    function findDataType(collection, value) {
    	return _.find(collection, function (current) {
            return StringUtils.compareToIgnoreCase(current.value, value);
        });
    }
    
    self.getByValue = function (constantElement) {
    	var $ = findDataType(self.values, constantElement);
        if (angular.isUndefined($)) {
        	$ = findDataType(self.advanced, constantElement);
        }
        if (angular.isUndefined($)) {
        	$ = self.default;
        }
    	return angular.extend({}, $);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.visualize')
	.service('BackgroundStyles', backgroundStyles);

function backgroundStyles(ConstantUtils, CollectionUtils) {
	var self = this;

	activate();

	function activate() {
		self.values = [
			{value: 'crop', text: 'Crop'},
			{value: 'stretch', text: 'Stretch'},
			{value: 'tile', text: 'Tile'}
		];

		self.default = self.values[0];
	}

	self.getByValue = function (constantElement) {
		return ConstantUtils.getByValue(constantElement, self);
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.service', [
    'ap.serviceManager.core'
]);
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.service')
    .service('JsServiceUtils', jsServiceUtils);

function jsServiceUtils($mdDialog, ServiceManager, ServiceCacheManager, ServiceConverter, ScenarioManager, CollectionUtils, PromiseUtils, FunctionUtils, ObjectUtils) {
	var self = this;
	
	function onContextItemClick(service, outputParamName, editor) {
		if (!service._isEditingJs) {
			return;
		}
		editor.session.insert(editor.getCursorPosition(), 'ServiceManager.getInput("' + outputParamName + '")');
		editor.focus();
	}
	
	this.initEditorParamsContextMenu = function(service, editor) {
    	var references = [];
    	service.inputParams.forEach(function(param) {
			if (param.visible) {
				references.push([param.id.name, FunctionUtils.partial(onContextItemClick, service, param.id.name, editor)]);
			}
		});
		return references;
    };
	
	function loadScenarioItems(service) {
		return 	service.type === 'HTML' && service.hasInputList ?
				ScenarioManager.get(service.fileName) :
				PromiseUtils.emptyPromise();
	}
    
    function findSingularOutputParam(service) {
		for (var i = 0; i < service.outputParams.length; i++) {
			var outputParam = service.outputParams[i];
			if (!outputParam.inTable && !ServiceConverter.isSpecialOutputParam(outputParam)) {
				return outputParam;
			}
		}
	}
    
    function _generateCallServiceTemplate(service, scenarioItems) {
		var $ = ServiceManager.generateInputJson(service, scenarioItems);
		$ = 'var response = ServiceManager.callWebService("' + service.name + '", ' + $ + ');\r\n';
		$ += 'var error = ServiceManager.getResponseValue(response, \'Error\');\r\n';
		$ += 'if (error.length !== 0) {\r\n';
		$ += '\tthrow(error);\r\n';
		$ += '}\r\n';
		$ += '//console.log(JSON.stringify(response));\r\n';
		
		var singular = findSingularOutputParam(service);
		if (angular.isDefined(singular)) {
			$ += 'var {0} = ServiceManager.getResponseValue(response, \'{1}\');\r\n'.format(singular.paramLabel.replace(/ /g, '_'), service.useLabelsAsKeys ? singular.paramLabel : singular.id.name);
		}
		var multiRecord = CollectionUtils.findByProperty(service.outputParams, true, "inTable");
		if (angular.isDefined(multiRecord)) {
			$ += 'var {0} = ServiceManager.getResponseArray(response, \'{1}\')[0];\r\n'.format(multiRecord.paramLabel.replace(/ /g, '_'), service.useLabelsAsKeys ? multiRecord.paramLabel : multiRecord.id.name);
		}
		return $;
	}
	
	this.generateCallServiceTemplate = function (service, callback) {
		loadScenarioItems(service).then(function (scenarioItems) {
			callback(_generateCallServiceTemplate(service, scenarioItems));
		});
	};
	
	function filterOutNextOutputs(services, currentServiceIndex) {
		var i, $ = [];
		for (i = 0; i < currentServiceIndex; i++) {
			$.push(services[i]);
		}
		for (i = currentServiceIndex; i < services.length; i++) {
			var withoutOutput = angular.copy(services[i]);
			withoutOutput.outputParams = undefined;
			$.push(withoutOutput);
		}
		return $;
	}
	
	this.generateInputReference = function(name) {
		return 'ServiceManager.getInput("{0}")'.format(name);
	};
	
	this.openFieldsDialog = function(services, currentServiceIndex) {
		return $mdDialog.show({
            controller: 'ParametersSelectorDialogCtrl',
            templateUrl: 'app/modules/serviceManager/views/dialogs/parametersSelectorDialog.html',
            locals: {
            	title: 'Select Parameter',
            	isSelectingTable: false,
            	tableConfig: null,
            	selectMultiple: false,
            	required: true,
            	services: filterOutNextOutputs(services, currentServiceIndex),
            	initialSelection: []
            },
            bindToController: true
        });
	};
	
	function loadServices(service) {
		return 	service._hasServices ?
				PromiseUtils.emptyPromise() :
				ServiceManager.getAll(ServiceManager.filters.SERVICES_LIST).then(function (services) {
					ServiceCacheManager.cacheServices(services);
					service._hasServices = true;
					return PromiseUtils.emptyPromise();
				});
	}
	
	this.onCallService = function(service, editor) {
		if (!service._isEditingJs) {
			return;
		}
		
		loadServices(service).then(function() {
			$mdDialog.show({
	    		controller: 'ServiceSelectorDialogCtrl',
	    		templateUrl: 'app/modules/auraTester/views/managers/testCase/serviceSelectorDialog.html',
	    		clickOutsideToClose: false,
				bindToController: true,
				locals: {
					title: 'Call service',
	    			context: 'JsService'
	    		}
			}).then(function (serviceConstant) {
				ServiceManager.get(serviceConstant.properties.name).then(function (service) {
					self.generateCallServiceTemplate(service, function(template) {
						editor.session.insert(editor.getCursorPosition(), template);
						editor.focus();
					});
	            });
			});
		});
	};
	
	/**************************
     *   Return statement     *
     **************************/
	
	this.extractReturnStatement = function(code, returnRegex) {
		/*jshint maxcomplexity:15 */
		
		var quotePositions = findQuotePositions(code);
		var i, count = 0;
		for (i = 0; i < code.length; i++) {
			if (code[i] === '{' && !isInsideQuotes(i, quotePositions)) {
				count++;
			} else if (code[i] === '}' && !isInsideQuotes(i, quotePositions)) {
				count--;
			} else if (count === 0 && returnRegex.test(code.substring(i).toUpperCase()) && !isInsideQuotes(i, quotePositions)) {
				break;
			}
			if (count < 0) {
				throw {message: 'Illegal } at position ' + i};
			}
		}
		if (i === code.length) {
			throw {message: 'Missing return statement'};
		}
		
		var start = i;
		var end;
		count = 0;
		for (i = code.indexOf('{', i); i < code.length; i++) {
			if (code[i] === '{' && !isInsideQuotes(i, quotePositions)) {
				count++;
			} else if (code[i] === '}' && !isInsideQuotes(i, quotePositions)) {
				count--;
			}
			if (count === 0) {
				end = i;
				break;
			}
		}
		if (angular.isUndefined(end)) {
			throw {message: 'Invalid return statement'};
		}
		
		return code.substring(start, end + 1);
	};
	
	/**************************
     *   Output Keys          *
     **************************/
	
	function findQuotePositions(returnObj) {
		var quotePos = [];
		var lastQuote;
		for (var i = 0; i < returnObj.length; i++) {
			var char = returnObj[i];
			if ((char === '"' || char === "'") && (returnObj[i-1] !== '\\')) {
				if (quotePos.length % 2 === 0) {	// starting new quote
					quotePos.push(i);
					lastQuote = char;
				} else if (char === lastQuote) {	// closing last open quote
					quotePos.push(i);
				}
			}
		}
		return quotePos;
	}
	
	function isInsideQuotes(pos, quotePos) {
		if (quotePos.length === 0) {
			return false;
		}
		for (var i = 0; i < quotePos.length; i++) {
			if (pos < quotePos[i]) {
				return i % 2 === 1;
			}
		}
		return false;
	}
	
	function stripNext(returnObj, startChar, endChar, quotePositions) {
		var stack = [];
		var startPos;
		for (var i = returnObj.indexOf(startChar); i < returnObj.length; i++) {
			var char = returnObj[i];
			if (char === startChar && !isInsideQuotes(i, quotePositions)) {
				if (stack.length === 0) {
					startPos = i;
				}
				stack.push(startChar);
				
			} else if (char === endChar && !isInsideQuotes(i, quotePositions)) {
				stack.pop();
				if (stack.length === 0) {
					return returnObj.substring(0, startPos) + returnObj.substring(i + 1);
				}
			}
		}
		return returnObj;
	}
	
	function stripBlocks(returnObj, startChar, endChar, quotePositions) {
		var res = stripNext(returnObj, startChar, endChar, quotePositions);
		while (res !== returnObj) {
			returnObj = res;
			quotePositions = findQuotePositions(returnObj);
			res = stripNext(returnObj, startChar, endChar, quotePositions);
		}
		return res;
	}
	
	function splitByCommas(returnObj, quotePositions) {
		var $ = [];
		var lastPos = -1;
		var nextPos = returnObj.indexOf(',');
		while (nextPos !== -1) {
			if (!isInsideQuotes(nextPos, quotePositions)) {
				$.push(returnObj.substring(lastPos + 1, nextPos));
				lastPos = nextPos;
			}
			nextPos = returnObj.indexOf(',', nextPos + 1);
		}
		$.push(returnObj.substring(lastPos + 1));
		return $;
	}
	
	function getByColon(commaSplits) {
		var $ = [];
		commaSplits.forEach(function(split) {
			$.push(split.substring(0, split.indexOf(':')).replace(/"/g, '').replace(/'/g, "").trim());
		});
		return $;
	}
	
	function extractOutputKeys(returnObj) {
		returnObj = returnObj.trim();
		returnObj = returnObj.substring(1, returnObj.length - 2);
		returnObj = returnObj.replace("\\\"","").replace("\\\'","");	// we don't care about values, so let's not get confused with quote escaping
		
		var quotePositions = findQuotePositions(returnObj);
		returnObj = stripBlocks(returnObj, '[', ']', quotePositions);	// remove arrays
		
		quotePositions = findQuotePositions(returnObj);
		returnObj = stripBlocks(returnObj, '{', '}', quotePositions);	// remove inner objects
		
		quotePositions = findQuotePositions(returnObj);
		var commaSplits = splitByCommas(returnObj, quotePositions);
		
		return getByColon(commaSplits);
    }
	
	/**************************
     *   Output params CRUD   *
     **************************/
	
	function createOutputParameters (service, outputKeys) {
    	outputKeys.forEach(function(outputParamName) {
    		if (!CollectionUtils.containsByProperty(service.outputParams, outputParamName, 'id.name')) {
    			service.outputParams.push({
                    id: {
                        name: outputParamName
                    },
                    visible: true,
                    name: outputParamName,
                    paramLabel: '',
                    isSpecial: false
                });
    		}
    	});
    }
	
	function deleteOutputParameters(service, outputKeys) {
    	var $ = [];
    	service.outputParams.forEach(function(outputParam) {
    		if (outputParam.isSpecial || outputKeys.indexOf(outputParam.id.name) !== -1) {
    			$.push(outputParam);
    		}
    	});
    	service.outputParams = $;
    }
	
	this.updateOutputParameters = function(service) {
		var returnStatement = this.extractReturnStatement(service.command, /^RETURN(\s)*{/);
		var outputKeys = extractOutputKeys(returnStatement.substring('return'.length));
    	
		createOutputParameters(service, outputKeys);
    	deleteOutputParameters(service, outputKeys);
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.service')
    .service('HtmlServiceUtils', htmlServiceUtils);

function htmlServiceUtils($q, $mdDialog, ScenarioManager, ToastManager, CollectionUtils, StringUtils, ObjectUtils) {
	
	function replaceLast(str, char, replacement) {
    	var pos = str.lastIndexOf(char);
    	return str.substring(0, pos) + replacement + str.substring(pos + char.length); 
    }
    
    this.confirmBaseUrl = function (service) {
    	$mdDialog.show({
            templateUrl: 'app/modules/serviceManager/views/dialogs/baseUrlDialog.html',
            controller: 'BaseUrlDialogCtrl',
            locals: {
            	initialUrl: service.formUrl
            },
            bindToController: true
            
        }).then(function(baseUrl) {
    		if (baseUrl.indexOf('//') !== baseUrl.lastIndexOf('//')) {
    			baseUrl = replaceLast(baseUrl, '//', '/');
    		}
    		service.formUrl = baseUrl;
    	});
    };
	
	this.markLoopParameters = function(service) {
		var deffered = $q.defer();
		if (service.type !== 'HTML') {
			deffered.resolve();
			return deffered.promise;
		}
		
		ScenarioManager.get(service.fileName).then(function (scenarioItems) {
            var isInsideLoop = false;
            scenarioItems.forEach(function(scenarioItem) {
        		if (scenarioItem.actionType === 'ForJson') {
        			isInsideLoop = true;
        		} else if (scenarioItem.actionType === 'EndForJson') {
        			isInsideLoop = false;
        		} else if (isInsideLoop && angular.isDefined(scenarioItem.value)) {
        			var inputParam = CollectionUtils.findBySuffix(service.inputParams, scenarioItem.fieldName, 'id.name');
        			if (angular.isDefined(inputParam)) {
        				inputParam.inList = true;
        			}
        		}
        	});
            deffered.resolve(scenarioItems);
        });
		return deffered.promise;
	};
	
	this.filterNoLoop = function(services) {
		return _.filter(services, function (service) {
			return !ObjectUtils.getProperty(service, 'hasInputList');
		});
	};
	
	this.serviceEditorValidations = function(driver, systemProperties, version, driverConstant) {
		if (!((version === 6 && driverConstant.java6) ||
				  (version === 8 && driverConstant.java8))) {
  			ToastManager.showError(driver + ' driver is not supported by your source version!');
  			return false;
  		}
  		if (driverConstant.value === 'ChromeDriver' && StringUtils.isNothing(systemProperties.HTML_CHROME_DRIVER)) {
  			ToastManager.showWarning('HTML_CHROME_DRIVER is not set in System Properties.', 'ChromeDriver browser');
  		}
  		if (driverConstant.value === 'ChromeDriver' && StringUtils.isNothing(systemProperties.HTML_CHROME_BINARY)) {
  			ToastManager.showWarning('HTML_CHROME_BINARY is not set in System Properties.', 'ChromeDriver browser');
  		}
  		if (driverConstant.value === 'PhantomJS' && StringUtils.isNothing(systemProperties.HTML_PHANTOMJS)) {
  			ToastManager.showWarning('HTML_PHANTOMJS is not set in System Properties.', 'PhantomJS browser');
  		}
  		
  		return true;
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.service')
    .service('DbServiceUtils', dbServiceUtils);

function dbServiceUtils($q, DbServices, ServiceFactory, DialogManager, ToastManager, PromiseUtils, FunctionUtils, CollectionUtils, StringUtils, ObjectUtils) {
	var self = this;
	
	this.filterNoSingleOutput = function(services) {
		return _.filter(services, function (service) {
			return !ObjectUtils.getProperty(service, 'isSingleOutput');
		});
	};
	
    /**************************
     *   Output Columns       *
     **************************/
	
	function toInputPair(key, value) {
    	return key + '=' + encodeURIComponent(value) + '&';
    }
    
    function collectInputParameters(service, username, password) {
    	var $ = '';
        for (var i = 0; i < service.inputParams.length; i++) {
        	var paramName = service.inputParams[i].id.name;
        	if (paramName !== ServiceFactory.USERNAME_INPUT_PARAMETER && paramName !== ServiceFactory.PASSWORD_INPUT_PARAMETER) {
        		$ += toInputPair(paramName, service.inputParams[i].paramValue);
        	}
        }
        $ += toInputPair(ServiceFactory.USERNAME_INPUT_PARAMETER, username);
        $ += toInputPair(ServiceFactory.PASSWORD_INPUT_PARAMETER, password);
        return $;
    }
	
    function getOutputColumnsIfNoType(service, loadingIndicator) {
    	return service._hasDbOutputTypes ? 	PromiseUtils.emptyPromise() :
    										self.getOutputColumns(service, loadingIndicator, true);
    }
    
    function removeNonBlobOutputParams(service) {
    	service.outputParams = CollectionUtils.filterByProperty(service.outputParams, 'type', 'BLOB');
    }
    
	function getOutputColumns(service, loadingIndicator, username, password, suppressNewColumns, deferred) {
    	loadingIndicator.isLoading = true;
        loadingIndicator.loadingText = 'Getting query response...';
        
        var connectionUrl = DbServices.generateConnectionString(service);
    	var query = service.command;
    	var input = collectInputParameters(service, username, password);
    	
        DbServices.getColumns(connectionUrl, query, input).then(function(response) {
        	if (response.data.success) {
        		var addCount = 0;
        		response.data.data.forEach(function (parameterNameLabelType) {
        			addCount += addAndUpdateTypeForOutputParam(service.outputParams, parameterNameLabelType.left, parameterNameLabelType.middle, parameterNameLabelType.right, suppressNewColumns);
        		});
        		if (suppressNewColumns !== true) {
        			ToastManager.showInfo('Added {0} output parameters.'.format(addCount), 'Get output columns');
        		}
        		service._hasDbOutputTypes = true;
        		if (angular.isDefined(deferred)) {
        			deferred.resolve();
        		}
        	} else {
        		ToastManager.showError(response.data.errors.errorDescription, 'Get output columns');
        		if (angular.isDefined(deferred)) {
        			deferred.reject();
        		}
        	}
    		loadingIndicator.isLoading = false;
    	});
    }
	
	function addAndUpdateTypeForOutputParam(outputParams, paramName, paramLabel, paramType, suppressNewColumns) {
		var existing = CollectionUtils.findByProperty(outputParams, paramName, 'id.name');
		if (angular.isUndefined(existing)) {
			if (suppressNewColumns !== true) {
				outputParams.splice(outputParams.length - 3, 0, {
		            id: {name: paramName},
		            name: paramName,
		            paramLabel: paramLabel,
		            type: paramType,
		            inTable: true,
		            visible: true
		        });
				return 1;
			}
		} else {
			existing.type = paramType;
		}
		return 0;
	}
	
	function checkOutputDeclarations(service, suppressNewColumns) {
		var $ = false;
		var regex = /\^{(.*?):(.*?)}/g;
		var query = service.command;
		var addCount = 0;
		
		var match = regex.exec(query);
		while (match) {
			$ = true;
			var name = match[1];
			var type = match[2];
			addCount += addAndUpdateTypeForOutputParam(service.outputParams, name, name, type, suppressNewColumns);
			match = regex.exec(query);
		}
		if ($ === true && suppressNewColumns !== true) {
			ToastManager.showInfo('Added {0} output parameters.'.format(addCount), 'Get output columns');
		}
		service._hasDbOutputTypes = true;
		return $;
	}
    
    this.getOutputColumns = function(service, loadingIndicator, suppressNewColumns) {
    	if (!validateQueryHasNoSemicolon(service.command)) {
    		return PromiseUtils.rejectedPromise();
    	}
    	var deferred = $q.defer();
    	if (checkOutputDeclarations(service, suppressNewColumns)) {
    		return PromiseUtils.emptyPromise();
    	}
    	
        var usernameParam = CollectionUtils.findByProperty(service.inputParams, ServiceFactory.USERNAME_INPUT_PARAMETER, 'id.name'),
			passwordParam = CollectionUtils.findByProperty(service.inputParams, ServiceFactory.PASSWORD_INPUT_PARAMETER, 'id.name');
        
        if (StringUtils.isNothing(usernameParam.paramValue) || StringUtils.isNothing(passwordParam.paramValue)) {
        	DbServices.promptUsernamePassword(usernameParam.paramValue, passwordParam.paramValue).then(function(credentials){
        		getOutputColumns(service, loadingIndicator, credentials.username, credentials.password, suppressNewColumns, deferred);
        	});
        } else {
        	getOutputColumns(service, loadingIndicator, usernameParam.paramValue, passwordParam.paramValue, suppressNewColumns, deferred);
        }
        
        return deferred.promise;
    };
    
    /**************************
     *   BLOB Output		  *
     **************************/
    
    this.onIsBlobOutputChange = function(service, loadingIndicator) {
    	if (!service.isSingleOutput) {		// negating condition for the new value (model wasn't updated yet)
	    	DialogManager.openConfirmationDialog({
				title: 'BLOB Output',
				description: 'Output parameters of type other than BLOB will now be removed.',
				saveLabel: 'Continue',
				onConfirmCallback: function () {
					getOutputColumnsIfNoType(service, loadingIndicator).then(FunctionUtils.partial(removeNonBlobOutputParams, service));
				},
				onCancelCallback: function(){
					service.isSingleOutput = !service.isSingleOutput;
	            }
			});
    	}
    };
	
    /**************************
     *   Save Validations     *
     **************************/
    
	function validateInputParametersInQueryExist(query, inputParams) {
    	var regex = /\${(.*?)}/g,
			missing = [];
		
		var match = regex.exec(query);
		while (match) {
			var name = match[1].indexOf(':') !== -1 ? match[1].substr(0, match[1].indexOf(':')) : match[1];
			if (!CollectionUtils.containsByProperty(inputParams, name, "id.name")) {
				missing.push(name);
			}
			match = regex.exec(query);
		}
		
		if (missing.length > 0) {
			ToastManager.showError(missing.join(', '), 'Query refers to missing input parameters:');
			return false;
		}
		return true;
    }
	
	function validateQueryHasNoSemicolon(query) {
    	if (angular.isDefined(query) && query.indexOf(';') !== -1) {
			ToastManager.showError('; - Semicolon is not allowed.', 'Invalid character in query');
			return false;
		}
		return true;
    }
	
	function validateBlobService(service) {
    	if (service.isSingleOutput) {
    		if (service.outputParams.length !== 1 || service.outputParams[0].type !== 'BLOB') {
    			ToastManager.showError('BLOB service must have exactly one output parameter, of type BLOB.', 'BLOB Output');
    			return false;
    		}
    	}
		return true;
    }
	
	this.serviceEditorValidations = function(service) {
		return  validateInputParametersInQueryExist(service.command, service.inputParams) &&
				validateQueryHasNoSemicolon(service.command) &&
				validateBlobService(service);
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils', [
    'cfp.hotkeys'
]);
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .directive('fileChange', fileChangeDirective);

function fileChangeDirective($parse, $timeout) {
    return {
        require: 'ngModel',
        restrict: 'A',
        link: function ($scope, element, attrs) {
            var attrHandler = $parse(attrs.fileChange);
            var handler = function (e) {
                $timeout(function () {
                    attrHandler($scope, {
                        $event: e,
                        files: e.target.files
                    });
                }, 10);
            };

            element[0].addEventListener('change', handler, false);
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('TreeViewUtils', treeViewUtilsService);

function treeViewUtilsService($filter, ObjectUtils) {

    /**
	 * Expand or collapse an element in the tree.
	 * Simulates a click on the element if necessary.
	 * @param {nodeToggleId} id of a span having class="node-toggle".
	 * @param {shouldExpand} true to expand, false to collapse.
	 */
	this.expandOrCollapse = function (nodeToggleId, shouldExpand) {
		if (nodeToggleId.indexOf(' ') !== -1) {
			return;
		}
		var element = angular.element('#' + nodeToggleId);
    	if ((angular.isUndefined(element[0]))) {
    		return;
    	}
    	element = angular.element(element[0].parentNode);
    	
    	if (shouldExpand && element.hasClass('collapsed')) {
    		element.removeClass('collapsed');
    	}
    	
    	if (!shouldExpand && !element.hasClass('collapsed')) {
    		element.addClass('collapsed');
    	}
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('ParameterValidationUtils', parameterValidationUtilsService);

function parameterValidationUtilsService() {
    var self = this;

    this.getPresentedValue = function (validatedEntity, validatedParameter, testedValuePresenter) {
        var validationFunction = validatedParameter.validationFunction;

        if (angular.isUndefined(validationFunction)) {
            return "";
        }

        if (validationFunction.value === "NONE") {
            return "";
        }

        return angular.isDefined(validationFunction.text) ?
        "Fail if " + (self.isTestedValueRequired(validationFunction) ?
        validationFunction.text + testedValuePresenter(validatedEntity, validatedParameter) :
            validationFunction.text) : "";
    };

    this.isTestedValueRequired = function (validationFunction) {
        return angular.isDefined(validationFunction) &&
            angular.isDefined(validationFunction.value) &&
            (validationFunction.value === "CONTAINS_STRING" ||
            validationFunction.value === "NOT_CONTAINS_STRING");
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('NavigationManager', navigationManagerService);

function navigationManagerService($location, $window, System, ObjectUtils, StringUtils) {
	var skipConfirmDiscard = false;
	
    this.goHome = function () {
        $location.path("#/serviceManager");
    };

    this.goTo = function (path) {
        if (StringUtils.isEmpty(path)) {
        	return;
        }
        
        var newPath = path.startsWith('#/') ? path.replace('#/', '') : path;
        if ($location.path().endsWith('/new') > -1 ||
        	$location.path().indexOf('/new/') > -1 ||
        	$location.path().indexOf('/edit/') > -1 ||
        	$location.path().indexOf('/duplicate/') > -1 ||
        	$location.path().indexOf('/rename/') > -1) {
        		$location.path(newPath).replace();
        }
        
        $location.path(newPath);
    };

    this.goToNewTab = function (path, isRelative, name) {
        isRelative = ObjectUtils.defaultValue(isRelative, true);
        name = ObjectUtils.defaultValue(name, "_blank");

        $window.open((isRelative ? getBasePath() : "") +
            (path.startsWith('/') || !isRelative ? "" : '/') + path,
            name);
    };

    function getBasePath() {
        return $location.absUrl().replace($location.url(), "");
    }

    this.goToServer = function (path, name) {
        name = ObjectUtils.defaultValue(name, "_blank");

        $window.open(System.baseUrl +
            (path.startsWith('/') ? "" : '/') + path, name);
    };
    
    this.skipNextConfirmDiscardChangesDialog = function () {
    	skipConfirmDiscard = true;
    };
    
    this.shouldSkipNextConfirmDiscardChangesDialog = function () {
    	var $ = skipConfirmDiscard;
    	skipConfirmDiscard = false;
    	return $;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service("DocumentNavigator", documentNavigatorService);

function documentNavigatorService() {
    var self = this;

    this.goTop = function (animationSpeed) {
        $("html, body").animate({scrollTop: 0}, animationSpeed);
    };
    
    this.goBottom = function (animationSpeed) {
    	$('html,body').animate({scrollTop: document.body.scrollHeight}, animationSpeed);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service("Logger", loggerService);

function loggerService(System) {
    this.debug = function (debugMsg) {
        logMsg(0, debugMsg);
    };

    this.info = function (infoMsg) {
        logMsg(1, infoMsg);
    };

    this.warn = function (warnMsg) {
        logMsg(2, warnMsg);
    };

    this.error = function (errMsg) {
        logMsg(3, errMsg);
    };

    function logMsg(level, msg) {
        if (level >= System.debugLevel) {
            console.log(msg);
        }
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('HotkeyManager', hotkeyManagerService);

function hotkeyManagerService(hotkeys, CollectionUtils) {
    var self = this;

    this.bindHotkeys = function ($scope, bindedHotkeys) {
        if (CollectionUtils.isNotEmpty(bindedHotkeys)) {
            var bindedScope = hotkeys.bindTo($scope);

            bindedHotkeys.forEach(function (bindedHotkey) {
                bindedScope.add(bindedHotkey);
            });
        }
    };

    var buildEditorHotkey = function (combo, description, keyCallback) {
        return {
            combo: combo,
            description: description,
            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
            callback: function (event) {
                if (angular.isDefined(keyCallback)) {
                    keyCallback();
                    event.preventDefault();
                }
            }
        };
    };
    
    this.bindEditorHotkeys = function ($scope, saveChangesCallback, cancelChangesCallback) {
        var editorHotkeys = [];
        editorHotkeys.push(buildEditorHotkey('ctrl+s', 'Save Changes', saveChangesCallback));

        if (angular.isDefined(cancelChangesCallback)) {
            editorHotkeys.push(buildEditorHotkey('esc', 'Cancel Changes', cancelChangesCallback));
        }

        self.bindHotkeys($scope, editorHotkeys);
    };

    this.buildHotkey = function (combo, description, keyCallback) {
        return {
            combo: combo,
            description: description,
            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
            callback: function (event) {
                if (angular.isDefined(keyCallback)) {
                    keyCallback();
                    event.preventDefault();
                }
            }
        };
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service("XmlFormatter", xmlFormatterService);

function xmlFormatterService() {
    this.format = function (xml) {
        var formatted = '';
        var reg = /(>)(<)(\/*)/g;
        xml = xml.replace(reg, '$1\r\n$2$3');
        var pad = 0;
        jQuery.each(xml.split('\r\n'), function(index, node) {
            var indent = 0;
            if (node.match( /.+<\/\w[^>]*>$/ )) {
                indent = 0;
            } else if (node.match( /^<\/\w/ )) {
                if (pad !== 0) {
                    pad -= 1;
                }
            } else if (node.match( /^<\w[^>]*[^\/]>.*$/ )) {
                indent = 1;
            } else {
                indent = 0;
            }

            var padding = '';
            for (var i = 0; i < pad; i++) {
                padding += '  ';
            }

            formatted += padding + node + '\r\n';
            pad += indent;
        });

        return formatted;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service("FileUtils", fileUtilsService);

function fileUtilsService() {
    this.renameExtension = function (file, extension) {
        var fileParts = file.split(".");
        var fileName = fileParts[0];
        return fileName + "." + extension;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('FileUploader', fileUploaderService);

function fileUploaderService($q, $timeout, Upload, System, UserManager, StringUtils, DialogManager, ToastManager, ObjectUtils) {
    var actionTitle = "";
    var self = this;

    this.upload = function (options) {
        var uploadDeferred = $q.defer();
        
        self.options = options;
		if (angular.isUndefined(self.options.fields)) {
        	self.options.fields = {};
        }
        self.options.fields.username = UserManager.getUser().username;

        return upload(uploadDeferred);
    };
    
    function upload(uploadDeferred) {
    	handleLoader(true);

        initDefaults();

        var uploadPromise = Upload.upload(prepareUploadParams());

        uploadPromise.then(function (response) {
            handleUploadResponse(uploadDeferred, response);
        }, handleUploadUnexpectedError);

        return uploadDeferred.promise;
    }

    function initDefaults() {
        self.options.showLog = ObjectUtils.defaultValue(self.options.showLog, true);
    }

    function prepareUploadParams() {
        return {
            url: System.baseUrl + self.options.uploadUrl,
            fields: self.options.fields,
            file: self.options.file,
            method: 'PUT'
        };
    }

    function requestOverwrite(uploadDeferred, response) {
    	DialogManager.openConfirmationDialog({
            title: 'Confirm overwrite',
            description: response.data.errors.name + ' already exists. Overwrite?',
            onConfirmCallback: function(){
                self.options.fields.Overwrite = true;
                upload(uploadDeferred);
            },
            onCancelCallback: function(){
            	onUploadError(uploadDeferred, response);
            }
        });
    }
    
    function onUploadError(uploadDeferred, response) {
    	handleUploadExpectedError(response.data, self.options);
        uploadDeferred.reject(response);
    }
    
    function handleUploadResponse(uploadDeferred, response) {
        $timeout(function () {
            handleLoader(false);
            handleActionTitle();

            if (angular.isDefined(response) && angular.isDefined(response.data) &&
                angular.isDefined(response.data.success) && response.data.success) {
                handleUploadSuccess(self.options);
                uploadDeferred.resolve(response);
            } else {
            	var errorCode = response.data.errors.errorCode;
            	if (angular.isDefined(errorCode) && errorCode === 409) {
            		requestOverwrite(uploadDeferred, response);
            		return;
            	}
            	onUploadError(uploadDeferred, response);
            }
        });
    }

    function handleActionTitle() {
        actionTitle = StringUtils.isNotEmpty(self.options.actionTitle) ?
            self.options.actionTitle : self.options.type + " upload";
    }

    function handleUploadSuccess() {
        if (self.options.showLog) {
            ToastManager.showSuccess(StringUtils.isNotEmpty(self.options.successLog) ? self.options.successLog :
            self.options.file.name + " is uploaded successfully!", actionTitle);
        }
    }

    function handleUploadExpectedError(responseData) {
        if (angular.isDefined(responseData) && angular.isDefined(responseData.errors) &&
            StringUtils.isNotEmpty(responseData.errors.errorDescription)) {

            if (self.options.showLog) {
                ToastManager.showError(responseData.errors.errorDescription, actionTitle);
            }
        } else if (StringUtils.isNotEmpty(self.options.expectedErrorLog)) {
            if (self.options.showLog) {
                ToastManager.showError(self.options.expectedErrorLog, actionTitle);
            }
        } else {
            handleUploadUnexpectedError();
        }

    }

    function handleUploadUnexpectedError() {
        if (self.options.showLog) {
            ToastManager.showFatalError("Something went wrong while during " +
            StringUtils.isNotEmpty(actionTitle) ? actionTitle.toLowerCase() : " file upload");
        }
    }

    function handleLoader(active) {
        if (angular.isDefined(self.options.loadingIndicator)) {
            self.options.loadingIndicator.isLoading = active;
            if (active === true) {
	            self.options.loadingIndicator.loadingText = ObjectUtils.defaultValue(
	                self.options.loadingIndicator.loadingText,
	                "Uploading {0} ...".format(self.options.file.name));
            }
        }
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('FileDownloader', fileDownloaderService);

function fileDownloaderService($window, EntityManager, HttpHandler) {
	var self = this;
	
    this.download = function (options) {
    	return EntityManager.handleHttpRequest({
            executionLog: options.executionLog,
            httpHandlerFunction: HttpHandler.post,
            httpHandlerUrl: options.httpHandlerUrl,
            httpHandlerConfig: {
                responseType: 'arraybuffer'
            },
            loadingIndicator: options.loadingIndicator,
            entityConfig: options.entityConfig,
            logTitle: options.logTitle,
            expectedErrorLog: options.expectedErrorLog,
            unexpectedErrorLog: options.unexpectedErrorLog,
            successLog: options.successLog
        });
    };
    
    this.saveContent = function (fileContent, fileType, fileName) {
        var contentBlob = new Blob([fileContent], {type: fileType});

        if (bowser.msie) {
            $window.navigator.msSaveBlob(contentBlob, fileName);
        } else {
        	var fileLink = $window.URL.createObjectURL(contentBlob);
        	var a = $window.document.createElement('a');
            a.href = fileLink;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service("ActionUtils", actionUtilsService);

function actionUtilsService() {
    var actionUtils = this;
    this.setPropertyByName = function (actions, actionName, property, propertyValue) {
        actions.forEach(function (action) {
            if (action.name === actionName) {
                action[property] = propertyValue;
            }
        });
    };

    this.disableByName = function (actions, actionName, disableValue) {
        actionUtils.setPropertyByName(actions, actionName, "disabled", disableValue);
    };

    this.showByName = function (actions, actionName, showValue) {
        actionUtils.setPropertyByName(actions, actionName, "visible", showValue);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service("ActionBuilder", actionBuilderService);

function actionBuilderService(ObjectUtils, NavigationManager) {
    var self = this;

    this.build = function (name, color, clickCallback, disabled, symbol, visible, checkPermission) {
        return {
            name: name,
            color: color,
            click: clickCallback,
            disabled: disabled,
            title: name,
            symbol: symbol,
            visible: ObjectUtils.defaultValue(visible, true),
            permission: ObjectUtils.defaultValue(checkPermission, false)
        };
    };

    this.buildLink = function (name, color, link, disabled, symbol, visible, checkPermission) {
        var action = self.build(name, color, undefined, disabled, symbol, visible, checkPermission);
        action.link = link;
        return action;
    };

    this.buildInlineActions = function (actions, itemScopeExtractor) {
        var inlineActions = [];
        angular.forEach(actions, function (action, index) {
            inlineActions.push(buildInlineAction(action, itemScopeExtractor));
            if (index < actions.length - 1) {
                inlineActions.push(null);
            }
        });

        return inlineActions;
    };

    function buildInlineAction(action, itemScopeExtractor) {
        action.handler = function ($itemScope) {
            if (angular.isDefined(action.click)) {
                action.click(itemScopeExtractor($itemScope));
            } else if (angular.isDefined(action.link)) {
                NavigationManager.goTo(action.link);
            }
        };

        return action;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('TableUtils', tableUtilsService);

function tableUtilsService(ObjectUtils) {
	
	function setAccordingToMergedProperty(property, mergedConfig, mergedProperty) {
		if (angular.isDefined(mergedProperty.class)) {
        	mergedConfig.class = mergedProperty.class;
        }
        		
        if (angular.isDefined(mergedProperty.makeAllVisibleByDefault)) {
            mergedConfig.makeAllVisibleByDefault = 	property.makeAllVisibleByDefault ||
                									mergedProperty.makeAllVisibleByDefault;
        }

        if (angular.isDefined(mergedProperty.showOnlyMultiRecordParams)) {
            mergedConfig.showOnlyMultiRecordParams = property.showOnlyMultiRecordParams ||
                									 mergedProperty.showOnlyMultiRecordParams;
        }
	}
	
	function merger (property, mergedProperty) {
        if (angular.isUndefined(mergedProperty)) {
        	mergedProperty = {};
        }

        var mergedConfig = {};
        mergedConfig.visible = angular.isDefined(mergedProperty.visible) ?  mergedProperty.visible : property.visible;
        mergedConfig.disabled = angular.isDefined(mergedProperty.disabled) ? mergedProperty.disabled : property.disabled;
        mergedConfig.grouped = angular.isDefined(mergedProperty.grouped) ? mergedProperty.grouped : property.grouped;

        setAccordingToMergedProperty(property, mergedConfig, mergedProperty);

        return mergedConfig;
    }
	
    this.mergeColumnConfig = function (defaultTableConfig, tableConfig) {
        return ObjectUtils.mergeObjects(defaultTableConfig, tableConfig, merger);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('TabBuilder', tabBuilderService);

function tabBuilderService(StringUtils) {
    this.buildTabs = function (tabNames) {
        return {selectedIndex: 0, tabContexts: buildTabContexts(tabNames)};
    };

    function buildTabContexts(tabNames) {
        var i = 0;
        return tabNames.map(function (tabName) {
            return {
                context: tabName,
                index: i++
            };
        });
    }

    this.getTabIndex = function (tabData, tabName) {
        var selectedTab = _.find(tabData.tabContexts, function (tabContext) {
            return StringUtils.compareToIgnoreCase(tabContext.context, tabName);
        });

        return angular.isDefined(selectedTab) ? selectedTab.index : 0;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('StringUtils', stringUtilsService);

function stringUtilsService(ObjectUtils, CollectionUtils) {
    var self = this;

    activate();

    function activate() {
        addFormatPrototype();
        addStartsWithPrototype();
        addEndsWithPrototype();
        addCapitalizePrototype();
        addPadEnd();
    }
    
    this.isNothing = function (str) {
    	return !str || 0 === str.length;
    };

    this.isEmpty = function (str) {
        return str === null || _.isEmpty(str) || str === "null";
    };

    this.isNotEmpty = function (str) {
        return !self.isEmpty(str) && str.length > 0;
    };
    
    this.isNonWhitespaces = function (str) {
        return angular.isDefined(str) && str.trim().length > 0;
    };

    this.defaultValue = function (value, defaultValue) {
        return self.isNotEmpty(value) ? value : defaultValue;
    };

    this.contains = function (str, pattern, ignoreLowerCase) {
        str = ObjectUtils.defaultValue(str, '');
        pattern = ObjectUtils.defaultValue(pattern, '');
        ignoreLowerCase = ObjectUtils.defaultValue(ignoreLowerCase, true);

        if (ignoreLowerCase) {
            str = str.toString().toLowerCase();
            pattern = pattern.toString().toLowerCase();
        }

        return str.toString().indexOf(pattern.toString()) !== -1;
    };

    this.containsInCollection = function (str, collection) {
        return self.isNotEmpty(_.filter(collection, function (item) {
            return self.contains(str, item);
        }));
    };

    this.compareToIgnoreCase = function (str, otherStr) {
        return self.contains(str, otherStr) &&
            self.contains(otherStr, str);
    };

    this.replaceAll = function (str, find, replace) {
        var replaceExp = new RegExp(find, 'g');
        return str.replace(replaceExp, replace);
    };

    this.join = function (values, delimiter) {
        if (CollectionUtils.isEmpty(values)) {
            return '';
        } else if (values.length === 1) {
            return values[0];
        }

        var concatenated = '';

        for (var i = 0; i < values.length - 1; i++) {
            concatenated += values[i] + delimiter;
        }

        concatenated += values[values.length - 1];

        return concatenated;
    };

    this.connect = function (str) {
        return self.isEmpty(str) ? str : str.split(' ').join('');
    };

    this.replaceBlanks = function (str, replacer) {
        return self.isEmpty(str) ? '' : str.split(' ').join(replacer);
    };

    this.removeSpecialChars = function (str) {
        return str.replace(/[^a-zA-Z0-9\u0590-\u05FF_.]/g, '');
    };

    this.removeLeadingNumbers = function (str) {
        return str.replace(/^\d+/, '');
    };

    this.isInt = function (n) {
        return !isNaN(parseInt(n)) && (n % 1 === 0);
    };

    this.isFloat = function (n) {
        return !isNaN(parseFloat(n)) && !isNaN(n % 1) && (n % 1 !== 0);
    };
    
    this.isBoolean = function (str) {
        return str === "true" || str === "false";
    };

    this.parseBoolean = function (str) {
        return str === "true";
    };

    function addFormatPrototype() {
        if (!String.prototype.format) {
            String.prototype.format = function () {
                var args = arguments;
                return this.replace(/{(\d+)}/g, function (match, number) {
                    return typeof args[number] !== 'undefined' ? args[number] : 'undefined';
                });
            };
        }
    }

    function addStartsWithPrototype() {
        if (!String.prototype.startsWith) {
            String.prototype.startsWith = function (prefix) {
                return this.indexOf(prefix) === 0;
            };
        }
    }

    function addEndsWithPrototype() {
        if (!String.prototype.endsWith) {
            String.prototype.endsWith = function (suffix) {
                return this.indexOf(suffix, this.length - suffix.length) !== -1;
            };
        }
    }
    
    function addCapitalizePrototype() {
    	if (!String.prototype.capitalize) {
	    	String.prototype.capitalize = function() {
	    	    return this.charAt(0).toUpperCase() + this.slice(1);
	    	};
    	}
    }
    
    function addPadEnd() {
    	if (!String.prototype.padEnd) {
    	    String.prototype.padEnd = function padEnd(targetLength,padString) {
    	        targetLength = targetLength>>0; //floor if number or convert non-number to 0;
    	        padString = String(padString || ' ');
    	        if (this.length > targetLength) {
    	            return String(this);
    	        }
    	        else {
    	            targetLength = targetLength-this.length;
    	            if (targetLength > padString.length) {
    	                padString += padString.repeat(targetLength/padString.length); //append to original to ensure we are longer than needed
    	            }
    	            return String(this) + padString.slice(0,targetLength);
    	        }
    	    };
    	}
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('SortableUtils', sortableUtils);

function sortableUtils(CollectionUtils) {
    this.getTableSortingOptions = function (sortedElementGetter) {
        return {
            axis: 'y',
            placeholder: "table-placeholder",
            cancel: ".unsortable",
            handle: 'i'
        };
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('SelectionUtils', selectionUtilsService);

function selectionUtilsService(ObjectUtils, EntityUtils, CollectionUtils) {
    var self = this;

    function activate() {
        self.selectionProperties = {
            primary: 'selected',
            secondary: 'isSelected'
        };
    }

    this.filterSelected = function (entities) {
        return _.filter(entities, function (entity) {
            return entity[self.selectionProperties.primary] ||
                entity[self.selectionProperties.secondary];
        });
    };

    this.filter = function (entities, selectedEntities, entityFieldExtractor) {
        if (CollectionUtils.isEmpty(entities)) {
            return;
        }

        entityFieldExtractor = ObjectUtils.defaultValue(entityFieldExtractor, EntityUtils.nameReducer);
        var $ = [];

        entities.forEach(function (entity) {
            if (CollectionUtils.contains(selectedEntities, entityFieldExtractor(entity))) {
                $.push(entity);
            }
        });
        return $;

    };

    this.markAsSelected = function (entities, selectedEntities, unselectOthers, entityFieldExtractor) {
        if (CollectionUtils.isEmpty(entities)) {
            return;
        }

        entityFieldExtractor = ObjectUtils.defaultValue(entityFieldExtractor, EntityUtils.nameReducer);

        entities.forEach(function (entity) {
            if (CollectionUtils.contains(selectedEntities, entityFieldExtractor(entity))) {
                entity[self.selectionProperties.primary] = true;
            } else if (unselectOthers) {
                entity[self.selectionProperties.primary] = false;
            }
        });
    };

    this.clearSelection = function (entities) {
        if (angular.isDefined(entities)) {
            entities.forEach(function (entity) {
                entity.selected = false;
            });
        }
    };

    this.hasAtLeastOneSelected = function (entities) {
        return CollectionUtils.isNotEmpty(self.filterSelected(entities));
    };

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('PromiseUtils', promiseUtilsService);

function promiseUtilsService($q) {
	
    this.emptyPromise = function (result) {
        var dummyDeferred = $q.defer();
        dummyDeferred.resolve(result);
        return dummyDeferred.promise;
    };
    
    this.rejectedPromise = function (result) {
        var dummyDeferred = $q.defer();
        dummyDeferred.reject(result);
        return dummyDeferred.promise;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('PrimitiveUtils', primitiveUtilsService);

function primitiveUtilsService(StringUtils) {
    this.stringToPrimitive = function (str) {
    	if (!angular.isString(str)) {
    		return str;
    	}
    	
    	if (str.startsWith('00') || (str.startsWith('0') && StringUtils.isInt(str) && str.length > 1)) {
    		return str;
    	}
    	
        return 	StringUtils.isInt(str) ? parseInt(str) :
            	StringUtils.isFloat(str) ? parseFloat(str) :
                StringUtils.isBoolean(str) ? StringUtils.parseBoolean(str) :
                str;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('ObjectUtils', objectUtilsService);

function objectUtilsService() {
    var self = this;

    this.isEmpty = function (obj) {
        return _.isEmpty(obj);
    };

    this.isNotEmpty = function (obj) {
        return !self.isEmpty(obj);
    };

    this.defaultValue = function (value, defaultValue, valueTransformer) {
        return hasValue(value) ?
            (angular.isDefined(valueTransformer) ? valueTransformer(value) : value) : defaultValue;
    };

    function hasValue(value) {
        return angular.isString(value) ? !_.isEmpty(value) :
        angular.isDefined(value) && value !== null && value !== "null";
    }

    this.ifDefined = function (value, definedAction) {
        if (angular.isDefined(value)) {
            definedAction(value);
        }
    };

    this.isObject = function (value) {
        return value !== null && typeof value === 'object';
    };

    this.isNumber = function (value) {
        return (typeof value === "number") && Math.floor(value) === value;
    };

    this.setDefaultValue = function (object, property, defaultValue) {
        object[property] = self.defaultValue(object[property], defaultValue);
    };

    this.clone = function (object) {
        return angular.copy(object);
    };

    this.copyInto = function (source, destination) {
        return angular.copy(source, destination);
    };

    this.mergeObjects = function (object, mergedObject, merger) {
        if (angular.isUndefined(mergedObject)) {
            return object;
        }

        angular.forEach(object, function (value, key) {
            object[key] = merger(value, mergedObject[key]);
        });

        return object;
    };

    this.toArray = function (object) {
        var arr = [];

        for (var property in object) {
            if (object.hasOwnProperty(property)) {
                arr.push(object[property]);
            }
        }

        return arr;
    };

    this.forEachProperty = function (object, propertyHandler) {
        for (var property in object) {
            if (object.hasOwnProperty(property)) {
                propertyHandler(property);
            }
        }
    };

    this.setProperties = function (object, value) {
        for (var property in object) {
            if (object.hasOwnProperty(property)) {
                object[property] = value;
            }
        }
    };

    this.getProperty = function (obj, prop) {
        var parts = prop.split('.');
        var clonedObj = angular.copy(obj);

        if (angular.isArray(parts)) {
            var last = parts.pop(),
                l = parts.length,
                i = 1,
                current = parts[0];

            while ((obj = obj[current]) && i < l) {
                current = parts[i];
                i++;
            }

            if (obj) {
                return obj[last];
            }
        }

        return clonedObj[prop];
    };

    this.stringifyObject = function (object) {
        var objectStr = "";
        angular.forEach(object, function (value, key) {
            if (angular.isDefined(value) && value.toString().length > 0) {
                objectStr += self.stringifyProperty(key) + " = " + value + "\n";
            }
        });

        return objectStr;
    };

    this.stringifyProperty = function (property) {
        return property.replace(/([A-Z])/g, ' $1')
            .replace(/^./, function (str) {
                return str.toUpperCase();
            });
    };

    this.override = function (src, override) {
        return self.isEmpty(override) ? src : angular.extend(angular.copy(src), override);
    };

    this.iterateProperties = function (obj, stack, action) {
        for (var property in obj) {
            if (obj.hasOwnProperty(property)) {
                if (angular.isObject(obj[property])) {
                    self.iterateProperties(obj[property], stack + '.' + property, action);
                } else if (angular.isDefined(action)) {
                    action(obj, property);
                }
            }
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('ModeParser', modeParserService);

function modeParserService() {
    var modes;

    function activate() {
        modes = ["new", "edit", "rename", "details", "duplicate"];
    }

    activate();

    this.parse = function (modeObject, modeValue) {
        modes.forEach(function (mode) {
            modeObject[mode] = mode === modeValue;
        });

        // mode dependencies
        if (modeValue === "new") {
            modeObject.edit = true;
        }
        if (modeValue === "duplicate") {
            modeObject.edit = true;
        }
        if (modeValue === "rename") {
            modeObject.details = true;
        }
    };

}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('MailUtils', mailUtilsService);

function mailUtilsService($window, ObjectUtils, StringUtils) {
    /**
     * Returns a URL for a mailto-link
     * @param  {String} recipient    - recipient email address
     * @param  {Object} options         - Options to construct the URL
     * @param  {String} options.cc      - Cc recipient email address (optional)
     * @param  {String} options.bcc     - Bcc recipient email address (optional)
     * @param  {String} options.subject - Email subject (optional)
     * @param  {String|Object} options.body    - Email body (optional). Separate lines with the newline character (\n)
     * @return {String}              - Returns the URL to put into the href-attribute of a mailto link
     */
    this.generateMailToLink = function (recipient, options) {
        var link = "mailto:";
        link += $window.encodeURIComponent(recipient);

        var params = [];
        angular.forEach(options, function (value, key) {
            if (isBody(key)) {
                value = stringifyBody(value);
            }

            params.push(key.toLowerCase() + "=" + $window.encodeURIComponent(value));
        });

        if (params.length > 0) {
            link += "?" + params.join("&");
        }

        return link;
    };

    function isBody(property) {
        return StringUtils.compareToIgnoreCase(property, "body");
    }

    function stringifyBody(body) {
        return ObjectUtils.isObject(body) ? ObjectUtils.stringifyObject(body) : body;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('KeyUtils', keyUtilsService);

function keyUtilsService() {
    this.displayKeyCode = function (charCode) {
        var keyChar = charValue(charCode);
        return keyChar.length > 0 && angular.isDefined(charCode) ? "Key " + keyChar : "";
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('JavascriptUtils', javascriptUtilsService);

function javascriptUtilsService(StringUtils) {
    this.removeFunction = function (javascript, functionName) {
        var javascriptLines = javascript.split('\n');
        var newJavascriptLines = [];

        var insideFunction = false;

        javascriptLines.forEach(function (javascriptLine) {
            if (StringUtils.contains(javascriptLine, functionName, true)) {
                insideFunction = true;
            } else if (insideFunction && javascriptLine.trim() === "}") {
                insideFunction = false;
            } else if (!insideFunction) {
                newJavascriptLines.push(javascriptLine);
            }
        });

        return newJavascriptLines.join('\n');
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('FunctionUtils', functionUtilsService);

function functionUtilsService() {

    this.partial = function (func /*, 0..n args */) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            var allArguments = args.concat(Array.prototype.slice.call(arguments));
            return func.apply(this, allArguments);
        };
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('EntityUtils', entityUtilsService);

function entityUtilsService() {
    
    this.nameReducer = function (entity) {
        return entity.name;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('DateUtils', dateUtilsService);

function dateUtilsService($filter, ObjectUtils) {
    var self = this;

    /**
     * @returns {number} diff in milliseconds from the current time
     */
    this.getDiff = function (time) {
        return time - new Date().getTime();
    };

    this.toSeconds = function (time) {
        return time / 1000;
    };

    this.toMinutes = function (time) {
        return self.toSeconds(time) / 60;
    };

    this.toHours = function (time) {
        return self.toMinutes(time) / 60;
    };

    this.toDays = function (time) {
        return Math.floor(self.toHours(time) / 24);
    };

    this.stringifyDate = function (time, format) {
        if (angular.isUndefined(time)) {
            return undefined;
        }

        var date = ObjectUtils.isNumber(time) ? new Date(time) : time;
        return $filter('date')(date, ObjectUtils.defaultValue(format, "dd/MM/yyyy"));
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('CsvParser', csvParserService);

function csvParserService() {
    this.parse = function (csvString, delimiter, generateHeaders) {
        var csv = {};
        var csvArray = [];

        // Break it into rows to start
        var csvRows = csvString.split(/\n/);

        // Take off the first line to get the headers, then split that into an array
        var csvHeaders = getHeaders(csvRows, delimiter, generateHeaders);

        // Loop through remaining rows
        for (var rowIndex = 0; rowIndex < csvRows.length; ++rowIndex) {
            var rowArray = csvRows[rowIndex].split(delimiter);

            // Create a new row object to store our data.
            var rowObject = csvArray[rowIndex] = {};

            // Then iterate through the remaining properties and use the headers as keys
            for (var propIndex = 0; propIndex < rowArray.length; ++propIndex) {
                // Grab the value from the row array we're looping through...
                var propValue = rowArray[propIndex].replace(/^"|"$/g, '');
                // ...also grab the relevant header (the RegExp in both of these removes quotes)
                var propLabel = csvHeaders[propIndex].replace(/^"|"$/g, '');

                rowObject[propLabel] = propValue;
            }
        }

        csv.headers = csvHeaders;
        csv.values = csvArray;
        return csv;
    };

    function getHeaders(csvRows, delimiter, generateHeaders) {
        var firstLine = csvRows.shift().split(delimiter);

        if (generateHeaders) {
            return getGeneratedHeaders(firstLine.length);
        } else {
            return firstLine.map(function (header) {
                return header.trim();
            });
        }
    }

    function getGeneratedHeaders(columnCount) {
        var headers = [];
        for (var i = 1; i <= columnCount; i++) {
            headers.push("column" + i);
        }
        return headers;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('ConstantUtils', constantUtilsService);

function constantUtilsService(ObjectUtils, StringUtils) {
	
    this.getByValue = function (value, constantDescriptor) {
    	var $ = (ObjectUtils.isNumber(value) || ObjectUtils.isNotEmpty(value)) ?
	            ObjectUtils.defaultValue(_.find(constantDescriptor.values, function (constantElement) {
	                return StringUtils.compareToIgnoreCase(constantElement.value, value);
	            }), constantDescriptor.default) :
	            constantDescriptor.default;
        return angular.extend({}, $);
    };
    
    this.defaultValue = function (constantElement, constantDescriptor) {
        var constantValue = !ObjectUtils.isObject(constantElement) ?
        					constantElement :
        					angular.isDefined(constantElement) ? constantElement.value : undefined;

        return ObjectUtils.defaultValue(constantValue, constantDescriptor.default.value);
    };
    
    this.flatten = function (constant) {
    	return constant !== null && typeof constant === 'object' ? constant.value : constant;
    };
    
    this.filter = function (constantValues, propertyName) {
    	return _.filter(constantValues, function (constantValue) {
            return angular.isDefined(constantValue[propertyName]) && constantValue[propertyName];
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
	.service('CollectionUtils', collectionUtilsService);

function collectionUtilsService($timeout, ObjectUtils) {
	var self = this;

	this.isNotEmpty = function (collection, notEmptyCallback, emptyCallback) {
		var nonEmptyCollection = angular.isDefined(collection) &&
			self.isArray(collection) &&
			collection.length > 0;

		if (nonEmptyCollection && angular.isDefined(notEmptyCallback)) {
			notEmptyCallback(collection);
		} else if (!nonEmptyCollection && angular.isDefined(emptyCallback)) {
			emptyCallback();
		}

		return nonEmptyCollection;
	};

	this.isEmpty = function (collection) {
		return angular.isUndefined(collection) ||
			(angular.isDefined(collection) &&
			self.isArray(collection) &&
			collection.length === 0);
	};

	this.isArray = function (object) {
		return Object.prototype.toString.call(object) === '[object Array]';
	};

	this.findByProperty = function (collection, value, property) {
		if (angular.isUndefined(collection)) {
			return undefined;
		}
		return _.find(collection, function (element) {
			return value === ObjectUtils.getProperty(element, property);
		});
	};
	
	this.findBySuffix = function (collection, value, property) {
		if (angular.isUndefined(collection)) {
			return undefined;
		}
		return _.find(collection, function (element) {
			var elementValue = ObjectUtils.getProperty(element, property);
			
			return angular.isDefined(elementValue) && elementValue.endsWith(value);
		});
	};

	this.findByName = function (collection, entityName) {
		if (angular.isUndefined(collection)) {
			return undefined;
		}
		return _.find(collection, function (entity) {
			return ObjectUtils.isNotEmpty(entity) && entityName === entity.name;
		});
	};

	this.indexOf = function (collection, value, property) {
		for (var i = 0, len = collection.length; i < len; i++) {
			if (value === ObjectUtils.getProperty(collection[i], property)) {
				return i;
			}
		}
		return -1;
	};
	
	this.moveToEnd = function (collection, property, value) {
		var from = this.indexOf(collection, value, property);
		collection.splice(collection.length, 0, collection.splice(from, 1)[0]);
	};

	this.contains = function (collection, object) {
		return ObjectUtils.isNotEmpty(_.find(collection, function (element) {
			return object === element;
		}));
	};

	this.containsByProperty = function (collection, value, property) {
		var filtered = _.filter(collection, function (element) {
			return value === ObjectUtils.getProperty(element, property);
		});

		return self.isNotEmpty(filtered);
	};

	this.containsByName = function (collection, entityName) {
		return angular.isDefined(self.findByName(collection, entityName));
	};

	this.filterByProperty = function (collection, propertyKey, propertyValue) {
		return _.filter(collection, function (element) {
			return propertyValue === ObjectUtils.getProperty(element, propertyKey);
		});
	};

	this.unique = function (array) {
		return array.filter(function (item, pos) {
			return array.indexOf(item) === pos;
		});
	};

	this.clone = function (array) {
		return _.map(array, _.clone);
	};

	this.equalsIgnoreOrder = function (array1, array2) {
		var sorted1 = angular.copy(array1);
		var sorted2 = angular.copy(array2);
		sorted1.sort();
		sorted2.sort();
		return sorted1.length === sorted2.length && sorted1.every(function (element, index) {
				return element === sorted2[index];
			});
	};
	
	this.removeByProperty = function (collection, propertyKey, propertyValue) {
		return _.filter(collection, function (element) {
			return propertyValue !== ObjectUtils.getProperty(element, propertyKey);
		});
	};
	
	this.removeManyByProperty = function (collection, propertyKey, propertyValues) {
		return _.filter(collection, function (element) {
			return propertyValues.indexOf(ObjectUtils.getProperty(element, propertyKey)) === -1;
		});
	};
	
	this.removeObjectByReference = function (collection, object) {
		return _.filter(collection, function (element) {
			return object !== element;
		});
	};

	this.removeDuplicates = function (collection, property, property2) {
		return _.uniq(collection, false, function (item) {
			var id =  angular.isDefined(property) ? ObjectUtils.getProperty(item, property) : item;
			id = angular.isDefined(property2) ? id + "|" + ObjectUtils.getProperty(item, property2) : id;
			return id;
		});
	};

	this.reduce = function (collection, propertyReducer, valueReducer) {
		var reduced = {};

		collection.forEach(function (item) {
			reduced[propertyReducer(item)] = valueReducer(item);
		});

		return reduced;
	};

	this.filterEmptyEntities = function (entities) {
		return _.filter(entities, ObjectUtils.isNotEmpty);
	};

	this.fixIndices = function (collection) {
		var i;

		for (i = 0; i < collection.length; i++) {
			collection[i].index = i;
		}

		return collection;
	};

	this.deferCollectionLoad = function (collection, onLoadTrigger, deferTimeout) {
		if (self.isNotEmpty(collection)) {
			$timeout(onLoadTrigger, deferTimeout);
		} else {
			onLoadTrigger();
		}
	};
	
	this.fromServerArray = function (string) {
    	return string === '[]' || string === '' ? [] : string.replace(/\[|\]/g,'').replace(/; | ;/g,';').split(';');
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('BrowserUtils', browserUtilsService);

function browserUtilsService(bowser) {
    var self = this;

    this.getVersion = function () {
        return bowser.version;
    };

    this.isIE = function () {
        return bowser.msie;
    };

    this.isEdge = function () {
        return bowser.msedge;
    };

    this.isChrome = function () {
        return bowser.chrome;
    };

    this.isCompatible = function () {
        return !(self.isIE() && self.getVersion() < 9);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.utils')
    .service('Base64', base64Service);

function base64Service() {
    var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

    this.encode = function (input) {
        var output = "";
        var chr1, chr2, chr3 = "";
        var enc1, enc2, enc3, enc4 = "";
        var i = 0;

        do {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output +
                keyStr.charAt(enc1) +
                keyStr.charAt(enc2) +
                keyStr.charAt(enc3) +
                keyStr.charAt(enc4);
            chr1 = chr2 = chr3 = "";
            enc1 = enc2 = enc3 = enc4 = "";
        } while (i < input.length);

        return output;
    };

    this.decode = function (input) {
        var output = "";
        var chr1, chr2, chr3 = "";
        var enc1, enc2, enc3, enc4 = "";
        var i = 0;

        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
        var base64test = /[^A-Za-z0-9\+\/\=]/g;
        if (base64test.exec(input)) {
            window.alert("There were invalid base64 characters in the input text.\n" +
                "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                "Expect errors in decoding.");
        }

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        do {
            enc1 = keyStr.indexOf(input.charAt(i++));
            enc2 = keyStr.indexOf(input.charAt(i++));
            enc3 = keyStr.indexOf(input.charAt(i++));
            enc4 = keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 !== 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 !== 64) {
                output = output + String.fromCharCode(chr3);
            }

            chr1 = chr2 = chr3 = "";
            enc1 = enc2 = enc3 = enc4 = "";

        } while (i < input.length);

        return output;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core', [
    'ap.serviceManager.utils',
    'ngRoute',
    'ngSanitize',
    'ngCookies',
    'ngAnimate',
    'ngAria',
    'ngMessages',
    'ngMaterial',
    'ui.grid',
    'ui.grid.pagination',
    'ui.grid.selection',
    'ui.grid.autoResize',
    'ui.grid.resizeColumns',
    'ui.grid.draggable-rows',
    'ui.grid.edit',
    'ui.select',
    'toastr',
    'nvd3',
    'cb.x2js',
    '720kb.tooltips',
    'blockUI',
    'LocalStorageModule',
    'ngCsv',
    'ui.ace',
    'ui.bootstrap',
    'ui.sortable',
    'ngTable',
    'ngTableResize',
    'bw.paging',
    'ngFileUpload',
    'vendor'
]);
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .value('System', {
        isProd: true,
        useDefault: false,   // if true use default host and port, otherwise parse it from the current url (should be false in production!)
        defaultProtocol: "http",
        defaultHost: "localhost",
        defaultPort: "8080",
        rootContext: "ServiceManager",
        localStoragePrefix: "serviceManagerLocalStorage",
        baseUrl: "", // initialized using systemConfig
        debugLevel: 4,// 0 - debug | 1 - info | 2 - warn | 3 - error | 4 - production
        bypassLicense: false, // should be false in production!
        checkRecordCompatibility: true,// should be true in production!
        enableDebugInfo: false // should be false in production!
    });
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apEditedInput', editedInputDirective);

function editedInputDirective() {
    return {
        restrict: 'AE',
        scope: {
            mode: '=?',
            model: '=',
            controlButtons: '=',
            editedType: '@',
            editedPlaceholder: '@',
            editAllowed: '=?',
            editedName: '@',
            editedClasses: '@?',
            selectAllOnClick: '=?',
            shouldDisable: '=?',
            detailType: '@',
            detailCallback: '&',
            isRequired: '=?',
            requiredErrMsg: '@',
            urlErrMsg: '@',
            minValue: '@',
            minErrMsg: '@',
            maxValue: '@',
            maxErrMsg: '@',
            saveCallback: '&',
            cancelCallback: '&',
            eliminationOptions: '=?',
            modelDebounce: '=?'
        },
        templateUrl: 'app/modules/core/views/ui/elements/edited/editedInput.html',
        controller: 'EditedInputCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apControlButtons', controlButtonsDirective);

function controlButtonsDirective() {
    return {
        restrict: 'E',
        scope: {
        	saveAllowed: '=',
            saveCallback: '&',
            cancelCallback: '&'
        },
        templateUrl: 'app/modules/core/views/ui/elements/edited/controlButtons.html',
        controller: 'ControlButtonsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apLicenseTester', licenseTesterDirective);

function licenseTesterDirective() {
    return {
        restrict: 'E',
        scope: {
            privileged: '='
        },
        templateUrl: 'app/modules/core/views/user/license/licenseTester.html',
        controller: 'LicenseTesterCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apStepNavigation', stepNavigationDirective);

function stepNavigationDirective() {
    return {
        restrict: 'AE',
        scope: {
            navigation: '=?',
            backDisabled: '=?',
            nextAllowed: '=?',
            confirmButton: '@?',
            onBack: '=?',
        	onNext: '=?'
        },
        transclude: true,
        templateUrl: 'app/modules/core/views/ui/wizard/stepNavigation.html',
        controller: 'StepNavigationCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apSmartStep', smartStepDirective);

function smartStepDirective() {
    return {
        restrict: 'AE',
        scope: {
            title: '@',
            description: '@',
            navigation: '=?',
            nextAllowed: '=?',
        	confirmButton: '@?',
        	onBack: '=?',
        	onNext: '=?'
        },
        transclude: true,
        templateUrl: 'app/modules/core/views/ui/wizard/smartStep.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apPagedTable', pagedTableDirective);

function pagedTableDirective() {
    return {
        restrict: 'AE',
        scope: {
            tableName: '@',
            entities: '=',
            tableParams: '=',
            tableFilter: '='
        },
        templateUrl: 'app/modules/core/views/ui/tables/pagedTable.html',
        controller: 'PagedTableCtrl',
        controllerAs: 'vm',
        bindToController: true,
        transclude: true,
        priority: 200
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apPagedGrid', pagedGridDirective);

function pagedGridDirective() {
    return {
        restrict: 'AE',
        scope: {
            entities: '=',
            columnDefs: '=',
            filteredColumns: '=?',
            compactView: '=?',
            useInlineActions: '=?',
            tableActions: '=?',
            functionAppender: '=?',
            useSelection: '=?',
            clearSelection: '=?',
            enableSelectAll: '=?',
            enableDraggable: '=?',
            enableFiltering: '=?',
            enableSorting: '=?',
            enablePagination: '=?',
            saveCallback: '&'
        },
        templateUrl: 'app/modules/core/views/ui/tables/pagedGrid.html',
        controller: 'PagedGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('gridConstantSelectorWrapper', gridConstantSelectorWrapperDirective);

function gridConstantSelectorWrapperDirective($document, uiGridEditConstants) {
    return function link(scope) {
        $document.on('click', handleClick);
        $document.on('keypress', handleKeyPress);

        function handleClick(evt) {
            if ($(evt.target).closest('.ui-select-container').size() === 0) {
                scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
                $document.off('click', handleClick);
            }
        }

        function handleKeyPress(event) {
            if(event.which === 13) {
                scope.$apply(function() {
                    scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
                });
                event.preventDefault();
            }
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apConstantSelector', constantSelectorDirective);

function constantSelectorDirective() {
    return {
        restrict: 'AE',
        scope: {
            mode: '=?',
            constants: '=',
            chosenConstant: '=',
            title: '@',
            constantPlaceholder: '@',
            shouldDisable: '=?',
            searchEnabled: '=?',
            hideValue: '=?',
            isRequired: '=?',
            editedName: '@?',
            editedClasses: '@?',
            onSelectCallback: '&'
        },
        templateUrl: 'app/modules/core/views/ui/selectors/constantSelector.html',
        controller: 'ConstantSelectorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apAttributeSelector', attributeSelectorDirective);

function attributeSelectorDirective() {
    return {
        restrict: 'AE',
        scope: {
            attributes: '=',
            chosenAttribute: '='
        },
        templateUrl: 'app/modules/core/views/ui/selectors/attributeSelector.html',
        controller: 'AttributeSelectorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apNavigationMenu', navigationMenuDirective);

function navigationMenuDirective() {
    return {
        restrict: 'AE',
        scope: {
            navProperties: '='
        },
        templateUrl: 'app/modules/core/views/ui/nav/navigationMenu.html',
        controller: 'NavigationMenuCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apNavigationBar', navigationBarDirective);

function navigationBarDirective() {
    return {
        restrict: 'AE',
        scope : true,
        templateUrl: 'app/modules/core/views/ui/nav/navigationBar.html',
        controller: 'NavigationBarCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apBreadcrumbs', breadcrumbsDirective);

function breadcrumbsDirective() {
    return {
        restrict: 'AE',
        scope: {
            crumbs: "="
        },
        templateUrl: 'app/modules/core/views/ui/nav/breadcrumbs.html',
        controller: 'BreadcrumbsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apEmptyLink', emptyLinkDirective);

function emptyLinkDirective() {
    return {
        scope: {
            linkCallback: "&",
            linkText: "@"
        },
        template: '<a href="javascript:void(0)" ng-click="linkCallback({})">{{::linkText}}</a>'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('aDisabled', aDisabledDirective);

function aDisabledDirective() {
    return {
        compile: function (element, attrs) {
            attrs.ngClick = "!(" + attrs.aDisabled + ") && (" + attrs.ngClick + ")";

            return function (scope, element, attrs) {
                scope.$watch(attrs.aDisabled, function (newValue) {
                    if (newValue !== undefined) {
                        element.toggleClass("disabled", newValue);
                    }
                });

                element.on("click", function (e) {
                    if (scope.$eval(attrs.aDisabled)) {
                        e.preventDefault();
                    }
                });
            };
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('specialCharEliminator', specialCharEliminatorDirective);

function specialCharEliminatorDirective($parse, StringUtils, ObjectUtils) {
    return {
        require: 'ngModel',
        link: specialCharEliminatorLink
    };

    function specialCharEliminatorLink(scope, element, attrs, ngModel) {
        initOptions(scope, attrs);

        if (!scope.deleteSpecialCharsOptions.disabled) {
            scope.$watch(function () {
                return ngModel.$modelValue;
            }, function () {
                handleModelChange(scope, ngModel);
            }, true);
        }
    }

    function initOptions(scope, attrs) {
        scope.deleteSpecialCharsOptions = ObjectUtils.defaultValue($parse(attrs.specialCharEliminator)(scope), {});

        scope.deleteSpecialCharsOptions.eliminateSpecialChars = ObjectUtils.defaultValue(
            scope.deleteSpecialCharsOptions.eliminateSpecialChars, true);
        
        scope.deleteSpecialCharsOptions.eliminateDots = ObjectUtils.defaultValue(
                scope.deleteSpecialCharsOptions.eliminateDots, false);

        scope.deleteSpecialCharsOptions.eliminateSpaces = ObjectUtils.defaultValue(
            scope.deleteSpecialCharsOptions.eliminateSpaces, true);

        scope.deleteSpecialCharsOptions.eliminateLeadingNumbers = ObjectUtils.defaultValue(
            scope.deleteSpecialCharsOptions.eliminateLeadingNumbers, false);

        scope.deleteSpecialCharsOptions.disabled = ObjectUtils.defaultValue(
            scope.deleteSpecialCharsOptions.disabled, false);
    }

    function handleModelChange(scope, ngModel) {
        if (!scope.deleteSpecialCharsOptions.disabled) {
            var fixedModel = fixModelWithCorrectedChars(ngModel.$viewValue,
                scope.deleteSpecialCharsOptions);
            ngModel.$setViewValue(fixedModel);
            ngModel.$render();
        }
    }

    function fixModelWithCorrectedChars(modelValue, deleteSpecialCharsOptions) {
        var fixedModel = modelValue;

        if (deleteSpecialCharsOptions.eliminateSpaces) {
            fixedModel = StringUtils.replaceBlanks(fixedModel, '');
        }

        if (deleteSpecialCharsOptions.eliminateSpecialChars) {
            fixedModel = StringUtils.removeSpecialChars(fixedModel);
        }
        
        if (deleteSpecialCharsOptions.eliminateDots) {
            fixedModel = fixedModel.replace(/\./g, '');
        }

        if (deleteSpecialCharsOptions.eliminateLeadingNumbers) {
            fixedModel = StringUtils.removeLeadingNumbers(fixedModel);
        }

        return fixedModel;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('keyCode', keyCodeDirective);

function keyCodeDirective(KeyUtils) {
    return {
        require: 'ngModel',
        link: function (scope, element, attrs, modelCtrl) {
            modelCtrl.$formatters.push(function (data) {
                return KeyUtils.displayKeyCode(data);
            });
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apResponseTimeChart', responseTimeChartDirective);

function responseTimeChartDirective() {
    return {
        restrict: 'AE',
        scope: {
        	key: "=",
            chartData: "=",
            serviceType: "=?",
            systemProperties: "="
        },
        templateUrl: 'app/modules/core/views/ui/graphs/responseTimeChart.html',
        controller: 'ResponseTimeChartCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core').directive('positiveNumber',
		positiveNumberDirective);

function positiveNumberDirective() {
	return {
		link : function(scope, element, attrs) {
			element.bind('keypress', function(e) {
				var char = String.fromCharCode(e.which || e.charCode || e.keyCode);
				if (!/^\d+$/.test(char) || (attrs.positiveNumber !== 'zeroAllowed' && element[0].value.length === 0 && char === '0')) {
					e.preventDefault();
					return false;
				}
			});
		}
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apVaryingDetail', varyingDetailDirective);

function varyingDetailDirective() {
    return {
        restrict: 'AE',
        scope: {
            title: '@',
            titleStyle: '=?',
            detailClass: '@'
        },
        priority: 8,
        transclude: true,
        templateUrl: 'app/modules/core/views/ui/elements/varyingDetail.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apTimePicker', timePickerDirective);

function timePickerDirective($parse) {
    return {
        restrict: 'AE',
        require: '^ngModel',
        scope: {
            timeValue: '=?',
            timeCoefficient: '=?',
            placeholder: '@'
        },
        templateUrl: 'app/modules/core/views/ui/elements/timePicker.html',
        link: timePickerLink,
        controller: 'TimePickerCtrl'
    };

    function timePickerLink(scope, element, attrs, ngModel) {
        function handleTimeValue(updatedTimeValue) {
            if (angular.isDefined(updatedTimeValue)) {
                ngModel.$setViewValue(updatedTimeValue * scope.timeCoefficient.value);
            }
        }

        function handleCoefficientValue(updatedTimeCoefficientValue) {
            if (angular.isDefined(updatedTimeCoefficientValue)) {
                ngModel.$setViewValue(ngModel.$viewValue * updatedTimeCoefficientValue);
            }
        }

        scope.$watch("timeValue", handleTimeValue);
        scope.$watch("timeCoefficient.value", handleCoefficientValue);
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apSwitch', switchDirective);

function switchDirective() {
    return {
        restrict: 'AE',
        scope: {
            model: '=',
            value1: '@',
            value2: '@',
            modelTransformer: '&',
            onChange: '=?'
        },
        templateUrl: 'app/modules/core/views/ui/elements/switch.html',
        controller: 'SwitchCtrl',
        link: function (scope, elem, attrs) {
            scope.hasModelTransformer = angular.isDefined(attrs.modelTransformer);
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apSimpleDetail', simpleDetailDirective);

function simpleDetailDirective() {
    return {
        restrict: 'AE',
        scope: {
            title: '@',
            detail: '@',
            detailClass: '@'
        },
        priority: 7,
        transclude: true,
        template: '<ap-detail title="{{::title}}" detail-class="{{::detailClass}}">{{::detail}}</ap-detail>'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apLoader', loaderDirective);

function loaderDirective() {
    return {
        restrict: 'AE',
        scope: {
            indicator: '=',
            isFullScreen: '@?'
        },
        templateUrl: 'app/modules/core/views/ui/elements/loader.html',
        controller: 'LoaderCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apLoadableButton', loadableButtonDirective);

function loadableButtonDirective() {
    return {
        restrict: 'AE',
        scope: {
            loadableConfig: "=",
            loadableContext: "=",
            loadingIndicator: "=",
            tooltipPlacement: '@'
        },
        templateUrl: 'app/modules/core/views/ui/elements/loadableButton.html',
        controller: 'LoadableButtonCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apImageUpload', imageUploadDirective);

function imageUploadDirective() {
    return {
        restrict: 'AE',
        scope: {
            model: '=',
            currentImageName: '=?',
            shouldResize: '=?'
        },
        templateUrl: 'app/modules/core/views/ui/elements/imageUpload.html',
        controller: 'ImageUploadCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apHeader', headerDirective);

function headerDirective() {
    return {
        scope: {
            mode: '=?',
            context: '@',
            mainTitle: '@',
            subTitle: '@',
            loadingIndicator: '=?',
        },
        transclude: true,
        templateUrl: 'app/modules/core/views/ui/elements/header.html',
        controller: 'HeaderCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apGroupAction', groupActionDirective);

function groupActionDirective() {
    return {
        restrict: 'AE',
        scope: {
            actions: '=',
            entities: '=',
            useSingleCallback: '=?',
            selectedProperty: '@'
        },
        templateUrl: 'app/modules/core/views/ui/elements/groupAction.html',
        controller: 'GroupActionCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apGridEditorActions', gridEditorActionsDirective);

function gridEditorActionsDirective() {
    return {
        restrict: 'E',
        scope: {
        	entities: '=',
        	additionalActions: '=?',
            addCallback: '&',
            removeCallback: '&'
        },
        templateUrl: 'app/modules/core/views/ui/elements/gridEditorActions.html',
        controller: 'GridEditorActionsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apGoTop', goTopDirective);

function goTopDirective(DocumentNavigator) {
    return {
        restrict: 'AE',
        scope: {},
        template: '<span class="go-top"><i class="clip-chevron-up"></i></span>',
        link: function (scope, element) {
            element.bind('click', handleElementClick);

            function handleElementClick() {
                DocumentNavigator.goTop("slow");
            }
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apGlobalSelector', globalSelectorDirective);

function globalSelectorDirective() {
    return {
        restrict: 'AE',
        scope: {
            entities: '=',
            selectedProperty: '@',
            selectedDescriptor: '@',
            onChange: '&?',
            inTable: '=?',
            shouldDisable: '=?'
        },
        template: '<ap-checkbox model="globalSelected" ng-click="toggleSelected()" should-disable="shouldDisable" in-table="::inTable" aria-label="{{::selectedDescriptor}}" title="{{::selectedDescriptor}}"></ap-checkbox>',
        controller: 'GlobalSelectorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apFileBrowser', fileBrowserDirective);

function fileBrowserDirective(Permissions) {
    return {
        restrict: 'AE',
        scope: {
            mode: '@', // default | simple | button | symbol
            fileHandler: '&',
            fileFilter: '@',
            browseLabel: '@',
            buttonTooltip: '@',
            confirmationTitle: '@',
            confirmationDescription: '@',
            confirmationCallback: '&'
        },
        templateUrl: 'app/modules/core/views/ui/elements/fileBrowser.html',
        link: fileBrowserLink,
        controller: 'FileBrowserCtrl'
    };

    function fileBrowserLink(scope, permissions) {
        scope.browserId = new Date().getTime().toString();

        scope.openBrowser = function () {
        	if (Permissions.blockOperator()) {
        		return;
        	}
            $("#" + scope.browserId).click();
        };
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apDetails', detailsDirective);

function detailsDirective() {
    return {
        restrict: 'AE',
        scope: {},
        transclude: true,
        template: '<dl class="dl-horizontal"><div ng-transclude></div></dl>'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apDetail', detailDirective);

function detailDirective() {
    return {
        restrict: 'AE',
        scope: {
            title: '@',
            titleStyle: '=?',
            detailClass: '@',
            shouldPaintBackground: '@?',
            padVertically: '@?'
        },
        priority: 8,
        transclude: true,
        templateUrl: 'app/modules/core/views/ui/elements/detail.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apContextMenu', contextMenuDirective);

function contextMenuDirective($compile, ObjectUtils) {
    var isIconsMenu = false;
    
    function buildMenuAction ($, $scope, $li, action, $contextMenu, model) {
    	var $a = $('<a uib-tooltip="' + action.name + '" tooltip-trigger tooltip-placement="left">');
        $a.attr({tabindex: '-1', href: '#', role: "menuitem"});
        $a.addClass("btn btn-sm narrow-item");
        $a.addClass(action.color);

        var $i = $('<i></i>');
        $i.addClass(action.symbol);
        $a.append($i);
        $li.append($compile($a)($scope));

        $li.on('click', function ($event) {
            $event.preventDefault();
            $scope.$apply(function () {
                $(event.currentTarget).removeClass('context');
                $contextMenu.remove();
                action.handler.call($scope, $scope, event, model);
            });
        });
    }
    
    function buildMenuItem ($, $scope, list, item, $contextMenu, model) {
    	var $li = $('<li>');
    	var $a;

        if (item === null) {
            $li.addClass('divider slim-divider');
            
        } else if(item[1] instanceof Array) {
            $li.addClass("ap-dropdown-submenu");
            var $subMenu = $('<ul class="dropdown-menu">');
            
            item[1].forEach(function (subItem, x) {
                buildMenuItem($, $scope, $subMenu, subItem, $contextMenu, model);
            });
            
            $a = $('<a>');
            $a.text(item[0]);
            $li.append($a);
            $li.append($subMenu);
            
        } else if (angular.isDefined(item.symbol)) {
        	if (item.visible) {
        		buildMenuAction($, $scope, $li, item, $contextMenu, model);
        	}
        	
        } else {
            $a = $('<a>');
            $a.attr({ tabindex: '-1', href: '#' });
            $a.text(item[0]);
            $li.append($a);
            $li.on('click', function ($event) {
            	$event.preventDefault();
            	$contextMenu.remove();
                $scope.$apply(function() {
                    item[1].call($scope, $scope);
                });
            });
        }

        list.append($li);
    }

    function renderContextMenu($scope, event, options, model) {
        $(event.currentTarget).addClass('context');
        var $contextMenu = $('<div>');
        $contextMenu.addClass('dropdown clearfix');
        var $ul = $('<ul>');
        $ul.addClass('dropdown-menu narrow-menu context-menu-dropdown');
        $ul.attr({'role': 'menu'});
        $ul.css({
            display: 'block',
            position: 'absolute',
            left: event.pageX + 'px',
            top: (isIconsMenu ? event.pageY - 40 : event.pageY) + 'px'
        });

        angular.forEach(options, function (item) {
        	buildMenuItem($, $scope, $ul, item, $contextMenu, model);
        });

        $contextMenu.append($ul);
        var height = Math.max(
            document.body.scrollHeight, document.documentElement.scrollHeight,
            document.body.offsetHeight, document.documentElement.offsetHeight,
            document.body.clientHeight, document.documentElement.clientHeight
        );
        $contextMenu.css({
            width: '100%',
            height: height + 'px',
            position: 'absolute',
            top: 0,
            left: 0,
            zIndex: 9999
        });

        $(document).find('body').append($contextMenu);

        $contextMenu.on("mousedown", function (e) {
            if ($(e.target).hasClass('dropdown')) {
                $(event.currentTarget).removeClass('context');
                $contextMenu.remove();
            }
        }).on('contextmenu', function (event) {
            $(event.currentTarget).removeClass('context');
            event.preventDefault();
            $contextMenu.remove();
        });
    }
    
    return {
        restrict: 'A',
        link: function ($scope, element, attrs) {
            element.on('contextmenu', function (event) {
                event.stopPropagation();
                $scope.$apply(function () {
                    var options = $scope.$eval(attrs.apContextMenu);
                    var model = $scope.$eval(attrs.model);
                    isIconsMenu = ($scope.$eval(attrs.apContextMenuIcons) === true);
                    if (options instanceof Array) {
                        event.preventDefault();
                        if (options.length === 0) {
                            return;
                        }
                        renderContextMenu($scope, event, options, model);
                    } else if (angular.isDefined(options)) {
                        throw '"' + attrs.apContextMenu + '" not an array';
                    }
                });
            });
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apCollapsingPanel', collapsingPanelDirective);

function collapsingPanelDirective() {
    return {
        restrict: 'AE',
        scope: {
            title: '@',
            activeTitle: "=?",
            shouldCollapse: "=?",
            bindableCollapse: '=?',
            onOpen: '&'
        },
        transclude: true,
        templateUrl: 'app/modules/core/views/ui/elements/collapsingPanel.html',
        controller: 'CollapsingPanelCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apCheckbox', checkboxDirective);

function checkboxDirective() {
    return {
        restrict: 'AE',
        scope: {
            model: '=?',
            title: "@",
            shouldDisable: '=?',
            onChange: '&?',
            isNarrow: '=?',
            inTable: '=?'
        },
        templateUrl: 'app/modules/core/views/ui/elements/checkbox.html',
        controller: 'CheckboxCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apInlineGridEditor', inlineGridEditorDirective);

function inlineGridEditorDirective() {
    return {
        restrict: 'AE',
        scope: {
            entity: '=',
            editCallback: '&',
            saveCallback: '&',
            cancelCallback: '&',
            saveAllowed: '=?'
        },
        templateUrl: 'app/modules/core/views/ui/editor/inlineGridEditor.html',
        controller: 'InlineGridEditorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apEditorJsSuggestions', editorJsSuggestionsDirective);

function editorJsSuggestionsDirective() {
    return {
        restrict: 'E',
        scope: {
        	editor: '=?'
        },
        templateUrl: 'app/modules/core/views/ui/editor/editorJsSuggestions.html',
        controller: 'EditorJsSuggestionsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apEditor', editorDirective);

function editorDirective() {
    return {
        restrict: 'E',
        scope: {
            edited: '=',
            mode: '@',
            shouldDisable: '=?',
            editorHeight: '@',
            editorTheme: '@',
            editorScroll: '=?',
            showGutter: '=?',
            editorReferenceHolder: '=?',
            autoCompleteArray: '=?',
            clickCallback: '&?',
            saveCallback: '&?'
        },
        templateUrl: 'app/modules/core/views/ui/editor/editor.html',
        controller: 'EditorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apFormDialog', formDialogDialog);

function formDialogDialog() {
    return {
        restrict: 'AE',
        scope: {
            title: '@',
            footerVisible: '=?',
            saveLabel: '@',
            saveClass: '@',
            cancelLabel: '@',
            cancelClass: '@',
            cancelVisible: '=?',
            saveAllowed: '=?',
            saveVisible: '=?',
            saveCallback: '&',
            cancelCallback: '&',
            warningDialog: '=?'
        },
        transclude: true,
        templateUrl: 'app/modules/core/views/ui/dialog/formDialog.html',
        controller: 'FormDialogCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apActionPanel', actionPanelDirective);

function actionPanelDirective() {
    return {
        restrict: 'AE',
        scope: {
            actionData: '=',
            actionContext: '=',
            tooltipPlacement: '@',
            containerStyle: '=?'
        },
        templateUrl: 'app/modules/core/views/ui/actions/actionPanel.html',
        controller: 'ActionPanelCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apUniquenessValidator', uniquenessValidatorDirective);

function uniquenessValidatorDirective() {
    return {
        require: 'ngModel',
        scope: {
        	items: '=',
        	currentItemIndex: '='
        },
        link: function ($scope, elm, attrs, ctrl) {
        	ctrl.$validators.unique = function (modelValue) {
        		if (angular.isUndefined(modelValue) || modelValue.length === 0) {
        			return false;
        		}
        		if (exists(modelValue)) {
        			return false;
        		}
        		return true;
            };
        	
            function omitCurrentItem() {
            	if (angular.isUndefined($scope.currentItemIndex)) {
            		return $scope.items;
            	}
            	var $ = $scope.items.slice();
            	$.splice($scope.currentItemIndex, 1);
            	return $;
            }
            
        	function exists (name) {
            	var $ = false;
            	var otherItems = omitCurrentItem();
            	otherItems.every(function(item){
            		if (item.name === name)  {
            			$ = true;
            			return false;
            		}
            		return true;
            	});
            	return $;
            }
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apLengthValidator', lengthValidatorDirective);

function lengthValidatorDirective() {
    return {
    	restrict: 'E',
        require: 'ngModel',
        link: function (scope, element, attr, ngModelCtrl) {
        	ngModelCtrl.$validators.empty = function (modelValue) {
        		if (angular.isUndefined(modelValue)) {
        			return false;
        		}
        		if (Array.isArray(modelValue)) {
        			return modelValue.length > 0;
        		}
        		return Object.keys(modelValue).length > 0;
            };
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('checkPermission', checkPermissionDirective);

function checkPermissionDirective($parse, ObjectUtils, UserManager) {
    return {
        restrict: 'A',
        link: function (scope, element, attr) {
            var shouldCheckPermission = ObjectUtils.defaultValue($parse(attr.checkPermission)(scope), true);
            if (shouldCheckPermission && UserManager.getUser().role === "Operator") {
                element.remove();
            }
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('apTooltip', tooltipDirective);

function tooltipDirective() {
    return {
        restrict: 'AE',
        scope: {
            tooltipText: "@"
        },
        template: '<md-tooltip>{{::tooltipText}}</md-tooltip>'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('focusMe', focusMeDirective);

function focusMeDirective($timeout) {
    return {
        restrict: "A",
        scope: {
            focusMe: "="
        },
        link: function (scope, element) {
            function handleFocusChange() {
                if (angular.isDefined(scope.focusMe) && scope.focusMe) {
                    // the timeout is needed to give the view time to render
                    $timeout(function () {
                        element[0].focus();
                    });
                }
            }

            element.bind('blur', function () {
                scope.focusMe = false;
                //scope.$apply();
            });

            scope.$watch("shouldFocus", handleFocusChange);
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('confirmUnsavedChanges', confirmUnsavedChangesDirective);

function confirmUnsavedChangesDirective(DataManager, DialogManager, NavigationManager) {
    return {
        restrict: 'A',
        require: '^form',
        scope: {
            confirmUnsavedChanges: "="
        },
        link: function (scope, element, attrs, formCtrl) {
        	var form = scope.$eval(element);
            scope.$on('$locationChangeStart', function (event, next, current) {
            	if (next.indexOf('#/_tabswitch_') !== -1) {	// switching tab, do not navigate
            		DataManager.setIsLoading(false);
            		event.preventDefault();
            		return;
            	}
            	
                if (NavigationManager.shouldSkipNextConfirmDiscardChangesDialog() !== true && formCtrl.$dirty && current.indexOf('/details/') === -1) {
                	DataManager.setIsLoading(false);
                    event.preventDefault();

	                DialogManager.openConfirmationDialog({
	                    title: 'Unsaved changes',
	                    description: 'Navigating from this page will discard your changes. Do you wish to continue?',
	                    saveLabel: 'Discard',
	                    next: next,
	                    onConfirmCallback: function () {
	                        formCtrl.$setPristine();
	                        window.location = next; 
	                    }
	                });
                }
            });
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .directive('compile', compileDirective);

function compileDirective($compile) {
    return function (scope, element, attrs) {
        scope.$watch(
            function (scope) {
                // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
            },
            function (value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
            }
        );
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .filter('urlParser', urlParserFilter);

function urlParserFilter($document) {
    var fields = 'protocol,username,password,host,hostname,port,pathname,search,hash'.split(',');

    return function (input) {
        var parser = $document[0].createElement('a'),
            result = {};

        parser.href = input;

        fields.forEach(function (name) {
            result[name] = parser[name];
        });

        return result;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .filter('trusted', trustedFilter);

function trustedFilter($sce) {
	return function(html){
        return $sce.trustAsHtml(html);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .filter('strLimit', strLimitFilter);

function strLimitFilter($filter) {
    return function (input, limit) {
        return input.length <= limit ? input : $filter('limitTo')(input, limit) + '...';
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .filter('simpleDate', simpleDateFilter);

function simpleDateFilter($filter, StringUtils) {
    var simpleDateFormat = "dd/MM/yy HH:mm:ss";

    return function (date) {
        return isValid(date) ? $filter('date')(date, simpleDateFormat) : "";
    };

    function isValid(date) {
        return angular.isDate(date) && date.getTime() > 0 ||
            angular.isNumber(date) && date > 0 ||
            angular.isString(date) && StringUtils.isNotEmpty(date) && parseInt(date) > 0;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .filter('secondsToDateTime', secondsToDateTimeFilter);

function secondsToDateTimeFilter() {
    return function (seconds) {
        return new Date(1970, 0, 1).setSeconds(seconds);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .filter('keyCode', keyCodeFilter);

function keyCodeFilter(KeyUtils) {
    return function (input) {
        return angular.isUndefined(input) ? "" :
            KeyUtils.displayKeyCode(input.toString());
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .filter('inputElement', inputElementFilter);

function inputElementFilter() {
    return function (elemId, $scope) {
        if (elemId === "") {
            return "";
        } else {
            var html = $scope.page.htmlData;

            var type;
            if ($(html).find("[id='" + elemId + "']") === undefined ||
                $(html).find("[id='" + elemId + "']") === [] ||
                $(html).find("[id='" + elemId + "']").get(0) === undefined) {
                return "";
            } else if ($(html).find("[id='" + elemId + "']").is('input')) {
                type = $(html).find("[id='" + elemId + "']").attr('type');
            } else {
                type = $(html).find("[id='" + elemId + "']").get(0).tagName.toLowerCase();
            }

            return type + "::" + elemId;
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .filter('humanReadableFileSize', humanReadableFileSizeFilter);

function humanReadableFileSizeFilter(FileManagerConfig) {
    var decimalByteUnits = [' kB', ' MB', ' GB', ' TB', 'PB', 'EB', 'ZB', 'YB'];
    var binaryByteUnits = ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];

    return function (input) {
        var i = -1;
        var fileSizeInBytes = input;

        do {
            fileSizeInBytes = fileSizeInBytes / 1024;
            i++;
        } while (fileSizeInBytes > 1024);

        var result = FileManagerConfig.useBinarySizePrefixes ? binaryByteUnits[i] : decimalByteUnits[i];
        return Math.max(fileSizeInBytes, 0.1).toFixed(1) + ' ' + result;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .provider('FileManagerConfig', fileManagerConfigProvider);

function fileManagerConfigProvider() {
    var values = {
        appName: 'auraPlayer',
        defaultLang: 'en',
        searchForm: true,
        sidebar: true,
        breadcrumb: true,
        allowedActions: {
            download: true,
            remove: true
        },

        showSizeForDirectories: true,
        useBinarySizePrefixes: false,

        previewImagesInModal: true,
        enablePermissionsRecursive: true,

        isEditableFilePattern: /\.(txt|html?|aspx?|ini|pl|py|md|css|js|log|orp|lobs|script|properties|mustache|htaccess|htpasswd|json|sql|xml|xslt?|sh|rb|as|bat|cmd|coffee|php[3-6]?|java|c|cbl|go|h|scala|vb)$/i,
        isImageFilePattern: /\.(jpe?g|gif|bmp|png|svg|tiff?)$/i,
        tplPath: 'app/modules/serviceManager/views/managers/file'
    };

    return {
        $get: function () {
            return values;
        },
        set: function (constants) {
            angular.extend(values, constants);
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('ToastManager', toastManagerService);

function toastManagerService(toastr, ObjectUtils) {
    
	this.showInfo = function (msg, title) {
        toastr.info(msg, title);
    };

    this.showSuccess = function (msg, title, timeout, clickHandler, payload) {
        toastr.success(msg, title, {
            positionClass: "toast-top-left",
            progressBar: false,
            timeOut: ObjectUtils.defaultValue(timeout, 3000),
            onTap: function () {
                if (angular.isDefined(clickHandler)) {
                    clickHandler(payload);
                }
            }
        });
    };

    this.showWarning = function (msg, title) {
        toastr.warning(msg, title);
    };

    this.showError = function (msg, title) {
        toastr.error(msg, title, {
            positionClass: "toast-top-full-width",
            timeOut: 8000
        });
    };

    this.showFatalError = function (msg, title) {
        toastr.error(msg, angular.isDefined(title) ? title : "Fatal error", {
            closeButton: false,
            timeOut: 0
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('DialogManager', dialogManagerService);

function dialogManagerService($mdDialog) {
	
    this.openConfirmationDialog = function (options) {
        return $mdDialog.show({
            controller: 'ConfirmationDialogCtrl',
            templateUrl: 'app/modules/core/views/ui/dialog/confirmationDialog.html',
            clickOutsideToClose: false,
            locals: {
                options: options
            },
            bindToController: true
        }).then(function () {
            return onConfirm(options);
        }, onCancel);
    };
    
    this.openInfoDialog = function (options) {
        return $mdDialog.show({
            controller: 'InfoDialogCtrl',
            templateUrl: 'app/modules/core/views/ui/dialog/infoDialog.html',
            clickOutsideToClose: false,
            locals: {
                options: options
            },
            bindToController: true
        }).then(function () {
            return onConfirm(options);
        });
    };

    function onConfirm(options) {
        if (angular.isDefined(options.onCloseCallback)) {
            options.onCloseCallback();
        }
        return true;
    }

    function onCancel() {
        return false;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('BreadcrumbsBuilder', breadcrumbsBuilderService);

function breadcrumbsBuilderService() {
    this.buildBasicBreadcrumbs = function (root, feature, descriptor) {
        return [
            buildRootBreadcrumb(root),
            {title: feature},
            {title: descriptor, active: true}
        ];
    };

    function buildRootBreadcrumb(root) {
        return angular.isString(root) ? {title: root, url: '#/'} : root;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('EntityCacheManager', entityCacheManagerService);

/**
 * Responsible for entity cache management.
 * Each cache entry holds an entity list and
 * a context entity for context driven transitions.
 */
function entityCacheManagerService(ObjectUtils, CollectionUtils, StorageManager) {
    var self = this;

    activate();

    function activate() {
        self.cache = {};
    }

    this.cacheEntity = function (cacheKey, entity) {
        initCacheEntryIfNeeded(cacheKey);
        updateLastModification(cacheKey);
        self.cache[cacheKey].entities[entity.name] = entity;
    };

    this.getEntity = function (cacheKey, entityName) {
        initCacheEntryIfNeeded(cacheKey);
        return self.cache[cacheKey].entities[entityName];
    };

    this.removeEntity = function (cacheKey, entityName) {
        initCacheEntryIfNeeded(cacheKey);
        updateLastModification(cacheKey);
        delete self.cache[cacheKey].entities[entityName];
    };

    this.cacheEntities = function (cacheKey, entities) {
        updateLastModification(cacheKey);

        entities.forEach(function (entity) {
            self.cacheEntity(cacheKey, entity);
        });
    };

    this.getEntities = function (cacheKey, requestedEntities) {
        initCacheEntryIfNeeded(cacheKey);

        return CollectionUtils.isNotEmpty(requestedEntities) ?
            getRequestEntities(cacheKey, requestedEntities) :
            ObjectUtils.toArray(self.cache[cacheKey].entities);
    };

    function getRequestEntities(cacheKey, requestedEntities) {
        return _.map(requestedEntities, function (requestEntityId) {
            return self.getEntity(cacheKey, requestEntityId);
        });
    }

    this.removeEntities = function (cacheKey, entities) {
        updateLastModification(cacheKey);

        if (angular.isDefined(self.cache[cacheKey])) {
            var entitiesToRemove = CollectionUtils.isEmpty(entities) ?
                self.cache[cacheKey].entities : entities;

            ObjectUtils.toArray(entitiesToRemove).forEach(function (entity) {
                self.removeEntity(cacheKey, entity.name);
            });
        }
    };

    this.cacheContextEntity = function (cacheKey, entity) {
        StorageManager.set(constructContextKey(cacheKey), entity);
        return entity;
    };

    this.getContextEntity = function (cacheKey) {
        return StorageManager.get(constructContextKey(cacheKey));
    };

    this.removeContextEntity = function (cacheKey) {
        StorageManager.remove(constructContextKey(cacheKey));
    };

    function constructContextKey(cacheKey) {
        return "{0}_context".format(cacheKey);
    }

    this.hasContextEntity = function (cacheKey) {
        return angular.isDefined(self.getContextEntity(cacheKey));
    };

    this.clear = function (cacheKey) {
        self.removeEntities(cacheKey);
        self.removeContextEntity(cacheKey);
        initLastModification(cacheKey);
    };

    this.getLastModification = function (cacheKey) {
        initCacheEntryIfNeeded(cacheKey);

        return self.cache[cacheKey].lastModification;
    };

    function initLastModification(cacheKey) {
        initCacheEntryIfNeeded(cacheKey);

        self.cache[cacheKey].lastModification = new Date(0);
    }

    function updateLastModification(cacheKey) {
        initCacheEntryIfNeeded(cacheKey);

        self.cache[cacheKey].lastModification = new Date();
    }

    function initCacheEntryIfNeeded(cacheKey) {
        if (angular.isUndefined(self.cache[cacheKey])) {
            self.cache[cacheKey] = {
                entities: {},
                lastModification: new Date(0)
            };
        }
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('StorageManager', storageManagerService);

function storageManagerService(localStorageService, ObjectUtils, CollectionUtils, StringUtils) {
    var self = this;

    function activate() {
        // remove old prefixed storage entries
        self.removeByPrefix("ls.");
    }

    this.set = function (key, object) {
        return localStorageService.set(key, object);
    };

    this.get = function (key) {
        var value = localStorageService.get(key);
        return ObjectUtils.isNotEmpty(value) ? value : undefined;
    };

    this.remove = function (key) {
        return localStorageService.remove(key);
    };

    this.removeByPrefix = function (prefix) {
        var keys = localStorageService.keys();
        if (CollectionUtils.isNotEmpty(keys)) {
            _.filter(keys, function (key) {
                var prefixedKey = localStorageService.deriveKey(key);
                return StringUtils.contains(prefixedKey, prefix);
            }).forEach(function (prefixedKey) {
                self.remove(prefixedKey);
            });
        }
    };

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('Permissions', permissionsService);

function permissionsService($route, PromiseUtils, UserManager, ToastManager) {
    var self = this;

    function isManagerAuthorized(routeOwner) {
        if (angular.isUndefined($route.current.$$route.authorizedRoles)) {
            return true;
        }

        if ($route.current.$$route.authorizedRoles.indexOf('manager|editOwn') === -1) {
            return false;
        }

        if ($route.current.params.mode !== 'edit' && $route.current.params.mode !== 'rename' && !$route.current.$$route.originalPath.endsWith('Manager')) {
            return true;
        }

        return angular.isDefined(routeOwner) &&
            UserManager.getUser().username === routeOwner;
    }

    this.checkAndToast = function (routeOwner) {
        var $ = UserManager.getUser().role !== 'manager' || isManagerAuthorized(routeOwner);
        if (!$) {
            ToastManager.showWarning('You may edit only your own resources.', 'Permission denied!');
        }
        return $;
    };

    this.toastNoEditPermissions = function () {
        ToastManager.showWarning('You do not have edit permissions.', 'Permission denied!');
    };

    this.blockOperator = function () {
        if (UserManager.getRole() === 'operator') {
            self.toastNoEditPermissions();
            return true;
        }
        return false;
    };

    this.checkEntityAndToast = function (entity) {
        if (UserManager.getUser().role === 'manager' && entity.createdBy !== UserManager.getUser().username && $route.current.params.mode !== 'new') {
            ToastManager.showWarning('You may edit only your own resources.', 'Permission denied!');
            return false;
        }
        if (UserManager.getUser().role === 'operator') {
            self.toastNoEditPermissions();
            return false;
        }
        return true;
    };

    this.resolve = function (routeOwner, pendingResponse) {
        if (UserManager.getUser().role !== 'manager' || isManagerAuthorized(routeOwner)) {
            return pendingResponse;
        }

        $route.current.params.accessDeniedReason = 'You may edit only your own resources.';
        return PromiseUtils.rejectedPromise();
    };

    function filterByCreator(entities, creator) {
        return _.filter(entities, function (entity) {
            return entity.createdBy === creator;
        });
    }

    this.filterIfNecessary = function (entities, systemProperties) {
        return UserManager.getUser().role !== 'manager' || systemProperties.MANAGER_VIEWS_ALL_ENTITIES === 'true' ?
            entities : filterByCreator(entities, UserManager.getUser().username);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('LicenseManager', licenseManagerService);

function licenseManagerService($q, Logger, MailUtils, EntityManager, System, NotificationManager, DateUtils,
                               ToastManager, UserManager) {
    var self = this;

    activate();

    function activate() {
        self.licenseDetails = {
            initialized: false,
            serviceManagement: false,
            testManagement: false,
            testMonitorManagement: false
        };

        self.licenseManagerConfig = {
            type: 'license',
            getUrl: '/Macro/License'
        };
    }

    this.getLicenseDetails = function () {
        var deferredFetch = $q.defer();
        if (self.licenseDetails.initialized) {
            deferredFetch.resolve(self.licenseDetails);
        } else {
            self.licenseDetails.initialized = true;

            EntityManager.get(self.licenseManagerConfig)
                .then(function (licenseDetailData) {
                    setLicenseDetails(licenseDetailData);
                    deferredFetch.resolve(self.licenseDetails);
                });
        }

        return deferredFetch.promise;
    };

    function setLicenseDetails(licenseDetailData) {
        angular.extend(self.licenseDetails, licenseDetailData);
        self.licenseDetails.expiration = new Date(self.licenseDetails.expiration);
        self.licenseDetails.testManagementExpiration = new Date(self.licenseDetails.testManagementExpiration);
        self.licenseDetails.testMonitorManagementExpiration = new Date(self.licenseDetails.testMonitorManagementExpiration);

        validateServiceManagerExpiration();
        validateTestManagementExpiration();
        validateTestMonitorManagementExpiration();
    }

    this.getRenewLicenseLink = function () {
        return MailUtils.generateMailToLink('sales@aurplayer.com', {
            subject: 'Renew our license',
            body: prepareLicenseDetails()
        });
    };

    this.getUpgradeLicenseLink = function () {
        return MailUtils.generateMailToLink('sales@aurplayer.com', {
            subject: 'Upgrade our license'
        });
    };

    function prepareLicenseDetails() {
        return angular.extend(angular.copy(self.licenseDetails), {
            initialized: undefined,
            testManagementExpiration: self.licenseDetails.testManagementExpiration,
            testMonitorManagementExpiration: self.licenseDetails.testMonitorManagementExpiration
        });
    }


    function validateServiceManagerExpiration() {
        validateExpiration(self.licenseDetails.expiration, '', function () {
            ToastManager.showFatalError("Your license has expired, please contact AuraPlayer's sales to renew", 'License Expiration');
            UserManager.setOperator();
            self.licenseDetails.backupCreation = true;
        });
    }

    function validateTestManagementExpiration() {
        validateExpiration(self.licenseDetails.testManagementExpiration, 'AuraTester Manager', function () {
            self.licenseDetails.testManagement = false;
        });
    }

    function validateTestMonitorManagementExpiration() {
        validateExpiration(self.licenseDetails.testMonitorManagementExpiration, 'Monitoring Manager', function () {
            self.licenseDetails.testMonitorManagement = false;
        });
    }

    function validateExpiration(expiration, licenseName, expiredAction) {
        var licenseDayRemainder = DateUtils.toDays(DateUtils.getDiff(expiration));

        if (angular.isUndefined(licenseDayRemainder) || isNaN(licenseDayRemainder) || (licenseDayRemainder < 0 && !System.bypassLicense)) {
            expiredAction();
            NotificationManager.addNotification("Your {0} license is expired".format(licenseName), true);
        } else if (licenseDayRemainder < 31) {
            NotificationManager.addNotification(licenseDayRemainder === 0 ?
                "Your {0} license expires TODAY".format(licenseName) :
                "Your {0} license expires in {1} days".format(licenseName, licenseDayRemainder),
                true);
        }
    }
    
    function validateServiceTypeLimit(serviceType, limit, activeCount) {
    	if (limit === -1) {
    		return;
    	}
    	var remainder = limit - activeCount;
    	if (remainder <= 5) {
            NotificationManager.addNotification(remainder === 0 ?
                "You reached the {0} services limit!".format(serviceType) :
                "Only {0} more {1} services can be activated.".format(remainder, serviceType));
        }
    }
    
    function validateTotalLimit(totalLimit, totalCreated) {
    	if (totalLimit === -1) {
    		return;
    	}
    	var remainder = totalLimit - totalCreated;
    	if (remainder <= 5) {
            NotificationManager.addNotification(remainder <= 0 ?
                "You reached the total services limit!" :
                "Only {0} more services can be created.".format(remainder));
        }
    }
    
    this.validateServiceLimits = function (services) {
    	var enabledCounters = [0, 0, 0];
    	var totalCreated = services.length;
    	
    	services.forEach(function(service) {
    		if (service.isEnabled === true) {
    			if (service.type === 'Forms') {
        			enabledCounters[0]++;
        		} else if (service.type === 'HTML') {
        			enabledCounters[1]++;
        		} else if (service.type === 'DB') {
        			enabledCounters[2]++;
        		}
    		}
    	});
    	
    	NotificationManager.clearUnpinned();
    	validateServiceTypeLimit('Forms', self.licenseDetails.formMaxServices, enabledCounters[0]);
    	validateServiceTypeLimit('HTML', self.licenseDetails.htmlMaxServices, enabledCounters[1]);
    	validateServiceTypeLimit('DB', self.licenseDetails.dbMaxServices, enabledCounters[2]);
    	validateTotalLimit(self.licenseDetails.totalMaxServices, totalCreated);
    };
    
    this.isTotalServicesLimitReached = function (licenseDetails, totalCreated) {
    	if (licenseDetails.totalMaxServices !== -1 && totalCreated >= licenseDetails.totalMaxServices) {
    		ToastManager.showWarning('Contact sales@auraplayer.com to upgrade your license.', 'Services limit reached');
    		return true;
    	}
    	return false;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('HttpHandler', httpHandlerService);

function httpHandlerService($q, $http, System, StringUtils, SystemLoader) {
    var self = this;

    this.get = function (relativeUrl, config) {
        return $http.get(System.baseUrl + relativeUrl, config);
    };

    this.getAndResolve = function (relativeUrl, config) {
        var deferred = $q.defer();
        self.get(relativeUrl, config)
            .success(function (response) {
                deferred.resolve(angular.isDefined(response) && angular.isDefined(response.data) ? response.data : response);
            })
            .error(function (status) {
                deferred.reject(status);
            });

        return deferred.promise;
    };

    this.head = function (relativeUrl, config) {
        return $http.head(System.baseUrl + relativeUrl, config);
    };

    this.post = function (relativeUrl, data, config) {
        return $http.post(System.baseUrl + relativeUrl, data, config);
    };

    this.put = function (relativeUrl, data, config) {
        return $http.put(System.baseUrl + relativeUrl, data, config);
    };

    this.delete = function (relativeUrl, config) {
        return $http.delete(System.baseUrl + relativeUrl, config);
    };

    this.jsonp = function (relativeUrl, config) {
        return $http.jsonp(System.baseUrl + relativeUrl, config);
    };

    this.patch = function (relativeUrl, data, config) {
        return $http.patch(System.baseUrl + relativeUrl, data, config);
    };

    this.options = function (relativeUrl, data) {
        return $http({
            method: 'OPTIONS',
            url: System.baseUrl + relativeUrl,
            responseType: 'json',
            data: data
        });
    };

    this.for = function (httpMethod) {
        return self[httpMethod.toString().toLowerCase()];
    };

    this.isGet = function (httpMethod) {
        return StringUtils.compareToIgnoreCase(httpMethod, 'GET');
    };

    this.isPost = function (httpMethod) {
        return StringUtils.compareToIgnoreCase(httpMethod, 'POST');
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .provider('DataManager', dataManagerServiceProvider);

function dataManagerServiceProvider() {
    var loadingIndicator = {isLoading: false};

    return {
        setIsLoading: function (isLoading, loadingText) {
            loadingIndicator.isLoading = isLoading;
            loadingIndicator.loadingText = loadingText;
        },
        $get: function () {
            return {
                loadingIndicator: loadingIndicator,
                setIsLoading: function (isLoading, loadingText) {
                    loadingIndicator.isLoading = isLoading;
                    loadingIndicator.loadingText = loadingText;
                }
            };
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('EntityValidator', entityValidatorService);

function entityValidatorService(DialogManager, PromiseUtils) {
    this.handleValidation = function (title, validationResponse) {
        if (validationResponse === true) {
            return PromiseUtils.emptyPromise("ok");
        } else {
            return DialogManager.openConfirmationDialog({
                title: title,
                description: validationResponse
            });
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('EntityManager', entityManagerService);

function entityManagerService($q, HttpHandler, Logger, ToastManager, DataManager, DocumentNavigator, HttpResponseCodes,
                              CollectionUtils, ObjectUtils, StringUtils) {
    var self = this;

    //////////////////////////
    /// API //////////////////
    //////////////////////////

    this.get = function (entityConfig, entityId, loadingIndicator, httpConfig) {
        var deferredGet = $q.defer();

        var getUrl = angular.isDefined(entityId) ? entityConfig.getUrl + entityId : entityConfig.getUrl;

        setLoadingIndicator(loadingIndicator, true, 'Getting ' + entityConfig.type + '...');

        HttpHandler.get(getUrl, httpConfig)
        
            .success(function (entityResponse) {
                if (angular.isDefined(entityResponse.success) && !entityResponse.success) {
                    Logger.info(entityConfig.type + ' ' + entityId + ' not found!');
                    deferredGet.resolve({});
                } else {
                    var fetchedEntity = ObjectUtils.isNotEmpty(entityResponse.data) ? entityResponse.data : entityResponse;
                    fetchedEntity = angular.isDefined(entityConfig.fromServerConverter) ? entityConfig.fromServerConverter(fetchedEntity) : fetchedEntity;
                    deferredGet.resolve(fetchedEntity);
                }
                setLoadingIndicator(loadingIndicator, false);
            })
            
            .error(function (status) {
                setLoadingIndicator(loadingIndicator, false);
                deferredGet.reject(status);
            });

        return deferredGet.promise;
    };

    this.getAll = function (entityConfig, additionalParam, httpConfig) {
    	var deferredGetAll = $q.defer();
    	
        if (!entityConfig.silentLoad) {
            DataManager.setIsLoading(true, 'Loading ' + entityConfig.type + 's ...');
        }

        HttpHandler.get(buildUrl(entityConfig.getAllUrl, additionalParam), httpConfig)
        
            .success(function (entitiesResponse) {
                if (angular.isDefined(entitiesResponse.success) && !entitiesResponse.success) {
                    deferredGetAll.reject(entityConfig.type + 's were not found!');
                } else {
                    var fetchedEntities = CollectionUtils.isEmpty(entitiesResponse) ? [] : entitiesResponse;
                    fetchedEntities = angular.isDefined(entityConfig.fromServerConverter) ? fetchedEntities.map(entityConfig.fromServerConverter) : fetchedEntities;
                    deferredGetAll.resolve(fetchedEntities);
                }
            })
            
            .error(function (status) {
                deferredGetAll.reject(status);
            });

        return deferredGetAll.promise;
    };

    this.create = function (entityConfig, entity, loadingIndicator) {
        var entityName = ObjectUtils.defaultValue(entity.name, entityConfig.name);

        return self.handleHttpRequest({
            executionLog: 'Creating ' + (angular.isDefined(entityConfig.type) ?
                (entityConfig.type + ' : ') : '') + entityName,
            httpHandlerFunction: HttpHandler.put,
            httpHandlerUrl: entityConfig.createUrl,
            httpHandlerData: angular.isDefined(entityConfig.toServerConverter) ?
                entityConfig.toServerConverter(entity) : entity,
            getEntityWhenResolved: true,
            loadingIndicator: loadingIndicator,
            entityId: entityName,
            entityConfig: entityConfig,
            expectedErrorLog: entityName + ' could not be created!',
            unexpectedErrorLog: 'Something went wrong while creating ' + entity.type + ' :(',
            successLog: entityName + ' created.'
        });
    };

    this.update = function (entityConfig, entity, loadingIndicator) {
        var entityName = ObjectUtils.defaultValue(entity.name, entityConfig.name);

        return self.handleHttpRequest({
            executionLog: 'Updating ' + (angular.isDefined(entityConfig.type) ?
                (entityConfig.type + ' : ') : '') + entityName,
            httpHandlerFunction: HttpHandler.post,
            httpHandlerUrl: entityConfig.updateUrl,
            httpHandlerData: angular.isDefined(entityConfig.toServerConverter) ?
                entityConfig.toServerConverter(entity) : entity,
            getEntityWhenResolved: true,
            loadingIndicator: loadingIndicator,
            entityId: entityName,
            entityConfig: entityConfig,
            expectedErrorLog: entityName + ' could not be updated!',
            unexpectedErrorLog: 'Something went wrong while updating ' + entity.type + ' :(',
            successLog: entityName + ' saved.'
        });
    };
    
    this.delete = function (entityConfig, entityName, loadingIndicator) {
        return self.handleHttpRequest({
            executionLog: 'Deleting ' + entityConfig.type + ' : ' + entityName,
            httpHandlerFunction: HttpHandler.delete,
            httpHandlerUrl: entityConfig.deleteUrl + entityName,
            getEntityWhenResolved: false,
            loadingIndicator: loadingIndicator,
            entityId: entityName,
            entityConfig: entityConfig,
            logTitle: 'Deleting ' + entityConfig.type + ' ' + entityName,
            expectedErrorLog: entityName + ' could not be deleted!',
            unexpectedErrorLog: 'Something went wrong while deleting ' + entityName + ' :(',
            successLog: entityName + ' deleted.'
        });
    };
    
    this.deleteMultiple = function (entityConfig, entityNames, loadingIndicator) {
    	var deferredDelete = $q.defer();
        setLoadingIndicator(loadingIndicator, true, 'Deleting ' + entityConfig.type + 's...');
        
        HttpHandler.delete(entityConfig.deleteUrl, {headers: {'AP-Entities': entityNames}})
	        .success(function (response) {
	            if (angular.isDefined(response.success) && !response.success) {
	            	deferredDelete.reject({resultMessage: response.errors.errorDescription, deletedServices: CollectionUtils.fromServerArray(response.data)});
	            } else {	
	                deferredDelete.resolve({resultMessage: response.data, deletedServices: entityNames});
	            }
	        	setLoadingIndicator(loadingIndicator, false);
	        })
	        .error(function (status) {
	        	setLoadingIndicator(loadingIndicator, false);
	        	deferredDelete.reject({resultMessage: 'Delete failed with status ' + status, deletedServices: []});
	        });

        return deferredDelete.promise;
    };

    this.rename = function (entityConfig, currentEntityId, newEntityId, loadingIndicator, isIgnoreDeps) {
        return self.handleHttpRequest({
            executionLog: 'Renaming ' + entityConfig.type + ' from ' + currentEntityId + ' to ' + newEntityId + '.',
            httpHandlerFunction: HttpHandler.patch,
            httpHandlerUrl: entityConfig.renameUrl + currentEntityId + '/' + newEntityId,
            httpHandlerConfig: {headers: {action: 'rename', ignoreDeps: isIgnoreDeps}},
            loadingIndicator: loadingIndicator,
            entityConfig: entityConfig,
            entityId: newEntityId,
            logTitle: 'Renaming ' + entityConfig.type,
            expectedErrorLog: entityConfig.type + ' could not be renamed!',
            unexpectedErrorLog: 'Something went wrong while renaming the ' + entityConfig.type,
            successLog: currentEntityId + ' successfully renamed  to ' + newEntityId + '.'
        });
    };

    this.exist = function (entityConfig, entityId, loadingIndicator) {
        var deferredRequest = $q.defer();

        HttpHandler.head(entityConfig.existUrl + entityId)
            .then(function (response) {
                setLoadingIndicator(loadingIndicator, false);
                deferredRequest.resolve(response.headers('exists') === 'true');
            }, function (response) {
                setLoadingIndicator(loadingIndicator, false);
                deferredRequest.resolve(false);
            });

        return deferredRequest.promise;
    };

    this.handleHttpRequest = function (options) {
        var deferredRequest = $q.defer();

        deferredRequest.notify('Starting request...');
        Logger.info(options.executionLog);
        setLoadingIndicator(options.loadingIndicator, true, options.executionLog + '...');

        options.httpHandlerFunction(options.httpHandlerUrl, options.httpHandlerData, options.httpHandlerConfig)
            .success(function (response, status) {
                handleHttpRequestSuccess(options, response, status, deferredRequest);
            })
            .error(function (response, status) {
                handleHttpRequestError(options, response, status, deferredRequest);
            });

        return deferredRequest.promise;
    };

    //////////////////////////
    /// Auxiliary ////////////
    //////////////////////////

    function handleHttpRequestSuccess(options, response, status, deferredRequest) {
        if (angular.isDefined(response.success) && !response.success) {
            if (options.ignoreStatusCode) {
                handleStatusNegligibleError(options, response, status, deferredRequest);
            } else {
                handleExpectedError(options, response, deferredRequest);
            }
        } else {
            handleExpectedSuccess(options, response, deferredRequest);
        }

        setLoadingIndicator(options.loadingIndicator, false);
    }

    function handleHttpRequestError(options, response, status, deferredRequest) {
        if (options.ignoreStatusCode) {
            handleStatusNegligibleError(options, response, status, deferredRequest);
        } else {
            handleUnexpectedError(options, status, deferredRequest);
        }

        setLoadingIndicator(options.loadingIndicator, false);
    }
    
    function shallowCopyEntityConfig(options) {
    	var shallowCopy = {};
    	angular.extend(shallowCopy, options.entityConfig);
    	options.entityConfig = shallowCopy;
    	return options.entityConfig;
    }

    function handleStatusNegligibleError(options, response, status, deferredRequest) {
    	shallowCopyEntityConfig(options).showSuccessLog = false;
        
        ToastManager.showError(options.expectedErrorLog, "{0}: {1}".format(options.logTitle,
            HttpResponseCodes.getByValue(status).text));

        handleExpectedSuccess(options, response, deferredRequest);
    }

    function handleExpectedSuccess(options, response, deferredRequest) {
        Logger.info(options.successLog);

        if (angular.isDefined(options.entityConfig) &&
            (angular.isUndefined(options.entityConfig.showSuccessLog) ||
            options.entityConfig.showSuccessLog)) {
            ToastManager.showSuccess(options.successLog, options.logTitle);
        }

        if (options.getEntityWhenResolved) {
            self.get(options.entityConfig, options.entityId).then(function (createdEntity) {
                deferredRequest.resolve(createdEntity);
            });
        } else {
            deferredRequest.resolve(response);
        }
    }

    function handleExpectedError(options, response, deferredRequest) {
        if (angular.isDefined(options.entityId)) {
            showExpectedErrorMsg(options, response);
        } else {
        	var errorDescription = StringUtils.isNotEmpty(response.errors.errorDescription) ? response.errors.errorDescription : options.unexpectedErrorLog;
            ToastManager.showError(errorDescription, options.logTitle);
        }

        deferredRequest.reject(options.expectedErrorLog);
    }

    function showExpectedErrorMsg(options, response) {
        if (ObjectUtils.isNotEmpty(response.errors) &&
            StringUtils.isNotEmpty(response.errors.errorDescription)) {
            ToastManager.showError(response.errors.errorDescription, options.logTitle);
        } else {
            ToastManager.showError(options.expectedErrorLog, options.logTitle);
        }
    }

    function handleUnexpectedError(options, status, deferredRequest) {
        ToastManager.showFatalError(options.unexpectedErrorLog, options.logTitle);
        deferredRequest.reject(status);
        setLoadingIndicator(options.loadingIndicator, false);
    }

    function buildUrl(url, param) {
        if (angular.isDefined(param) && param.length > 0) {
            return url + '/' + param;
        }

        return url;
    }

    function setLoadingIndicator(loadingIndicator, isLoading, loadingText) {
        if (angular.isDefined(loadingIndicator)) {
            loadingIndicator.isLoading = isLoading;
            loadingIndicator.loadingText = loadingText;
        }
        if (isLoading && angular.isDefined(loadingIndicator) && loadingIndicator.isGoTop !== false) {
            DocumentNavigator.goTop("slow");
        }
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('EditedInputCtrl', editedInputCtrl);

function editedInputCtrl($scope, ObjectUtils) {
    activate();

    function activate() {
        $scope.detailType = ObjectUtils.defaultValue($scope.detailType, "text");
        $scope.editedType = ObjectUtils.defaultValue($scope.editedType, "text");
        $scope.editAllowed = ObjectUtils.defaultValue($scope.editAllowed, true);
        $scope.selectAllOnClick = ObjectUtils.defaultValue($scope.selectAllOnClick, true);

        initMode();
        initModelOptions();
        fixEditedType();
    }

    function initMode() {
        if (ObjectUtils.isEmpty($scope.mode)) {
            $scope.mode = {
                details: angular.isDefined($scope.controlButtons) && !$scope.controlButtons,
                edit: angular.isUndefined($scope.controlButtons) || $scope.controlButtons
            };
        }
    }

    function initModelOptions() {
        $scope.modelOptions = {
            debounce: ObjectUtils.defaultValue($scope.modelDebounce, 200)
        };
    }

    function fixEditedType() {
        if ($scope.editedType === "url") {
            $scope.editedType = "text";
        }
    }
    
    $scope.getForm = function() {
    	return $scope.$eval($scope.editedName+'Form');
    };
    
    $scope.selectAll = function ($event) {
        $event.target.select();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('ControlButtonsCtrl', controlButtonsCtrl);

function controlButtonsCtrl($scope) {
	
   $scope.saveChanges = function () {
        if (angular.isDefined($scope.saveCallback)) {
            $scope.saveCallback();
        }
    };

    $scope.cancelChanges = function () {
        if (angular.isDefined($scope.cancelCallback)) {
            $scope.cancelCallback();
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('MailConfiguratorCtrl', mailConfiguratorCtrl);

function mailConfiguratorCtrl($scope, $mdDialog, mailConfig, loadingIndicator, ObjectUtils, StringUtils, MailConfigManager, ToastManager) {
    activate();

    function activate() {
        $scope.newMailConfigMode = false;
        $scope.loadingIndicator = loadingIndicator;
        $scope.backupMailConfig = angular.copy(mailConfig);

        initMailConfig(mailConfig);
    }

    function initMailConfig(mailConfig) {
        $scope.mail = ObjectUtils.isEmpty(mailConfig) ?
        {config: {}} : {config: mailConfig};
    }
    
    $scope.toIsTlsString = function(model) {
    	return model === 'true' || model === true ? 'TLS' : 'SSL';
    };

    $scope.mailConfigured = function () {
        return angular.isDefined($scope.mail.config) &&
            $scope.mail.config.host.length > 0 &&
            $scope.mail.config.port > 0 &&
            $scope.mail.config.email.length > 0 &&
            $scope.mail.config.password.length > 0;
    };

    $scope.handleNewMailConfig = function () {
        $scope.mail.config.edited = true;
        $scope.newMailConfigMode = true;
    };

    $scope.saveAndClose = function () {
        $scope.mail.config.validated = !isMailConfigUpdated($scope.mail.config);

        return MailConfigManager.update($scope.mail.config).then(function (updatedMailConfig) {
            ToastManager.showSuccess("Mail settings updated, no restarts required");
            $mdDialog.hide(true);
            return updatedMailConfig;
        });
    };

    $scope.testSettings = function () {
    	$scope.loadingIndicator.isLoading = true;
    	
        MailConfigManager.test($scope.mail.config)
	        .success(function (response, status) {
	        	$scope.loadingIndicator.isLoading = false;
	        	if (response.success) {
	        		$scope.mail.config.validated = true;
                    ObjectUtils.copyInto($scope.mail.config, $scope.backupMailConfig);
                    ToastManager.showSuccess("Settings OK, check your email.", "Mail configuration");
                } else {
                    ToastManager.showError("Test failed: " + response.errors.errorDescription, "Mail configuration");
                }
	        })
	        .error(function (response, status) {
	        	$scope.loadingIndicator.isLoading = false;
	        	ToastManager.showError("ServiceManager server returned unexpected response.", "Mail configuration");
	        });
    };

    function onMailConfigUpdate(updatedMailConfig) {
        if (angular.isDefined($scope.mail) &&
            angular.isDefined($scope.mail.config)) {
            if ($scope.mail.config.validated) {
                $scope.mail.config.validated = !isMailConfigUpdated(updatedMailConfig);
            }
        }
    }

    function isMailConfigUpdated(updatedMailConfig) {
        if (ObjectUtils.isNotEmpty($scope.backupMailConfig)) {
            return 	!StringUtils.compareToIgnoreCase($scope.backupMailConfig.host, updatedMailConfig.host) ||
            		!StringUtils.compareToIgnoreCase($scope.backupMailConfig.port, updatedMailConfig.port) ||
            		!StringUtils.compareToIgnoreCase($scope.backupMailConfig.email, updatedMailConfig.email) ||
            		!StringUtils.compareToIgnoreCase($scope.backupMailConfig.password, updatedMailConfig.password);
        }
        return true;
    }

    $scope.$watch("mail.config", onMailConfigUpdate, true);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('LicenseTesterCtrl', licenseTesterCtrl);

function licenseTesterCtrl($scope, LicenseManager) {
    activate();

    function activate() {
        $scope.getUpgradeLicenseLink = LicenseManager.getUpgradeLicenseLink;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('StepNavigationCtrl', stepNavigationCtrl);

function stepNavigationCtrl($scope, $transclude) {
    activate();

    function activate() {
        initNavigation();
        initTranscludeMonitor();
    }

    function initNavigation() {
        if (angular.isUndefined($scope.navigation)) {
            $scope.navigation = {};
        }
    }
    
    function initTranscludeMonitor() {
    	$scope.hasTranscluded = false;
    	$transclude(function(clone){
            if(clone.length){
                $scope.hasTranscluded = true;
            }
        });
    }
    
    $scope.undefinedOrEmpty = function (value) {
    	return value === undefined || value === '';
    };

    $scope.isBack = function () {
        return angular.isDefined($scope.navigation.back) && $scope.navigation.back;
    };

    $scope.isNext = function () {
        return (angular.isDefined($scope.navigation.next) && $scope.navigation.next) ||
            angular.isUndefined($scope.navigation.next);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('PagedTableCtrl', pagedTableCtrl);

function pagedTableCtrl($scope, $filter, NgTableParams, StringUtils, ObjectUtils, CollectionUtils) {
    var vm = this;

    activate();

    function activate() {
        initDefaults();
        initTableParams();
    }

    function initDefaults() {
        vm.useInlineActions = ObjectUtils.defaultValue(vm.useInlineActions, true);
    }

    function initTableParams() {
        var baseParameters = {};
        var baseSettings = {};
        baseParameters.page = ObjectUtils.defaultValue(vm.tableParams.page(), 1);
        baseParameters.count = ObjectUtils.defaultValue(vm.tableParams.count(), 10);

        if (angular.isDefined(vm.tableParams.sorting)) {
            baseParameters.sorting = vm.tableParams.sorting;
        }

        baseSettings.counts = [10, 20, 50, "all"];
        baseSettings.getData = getDataAndReload;

        vm.tableParams = new NgTableParams(baseParameters, baseSettings);
    }

    $scope.paginationStart = function () {
        return (vm.tableParams.page() - 1) * vm.tableParams.count() + 1;
    };

    $scope.paginationEnd = function () {
        var $ = $scope.paginationStart() + vm.tableParams.count() - 1;
        return $ > vm.entities.length ? vm.entities.length : $;
    };

    var filterEntities = function () {
        return StringUtils.isNotEmpty(vm.tableFilter.value) ?
            $filter('filter')(vm.entities, vm.tableFilter.value) : vm.entities;
    };

    function getDataAndReload($defer, params) {
        if (CollectionUtils.isNotEmpty(vm.entities)) {
            params.total(vm.entities.length);

            vm.pageSize = params.count() !== "all" ? params.count() : vm.entities.length;

            var orderedEntities = $filter('orderBy')(filterEntities(), params.orderBy());

            var slicedEntities = orderedEntities.slice((params.page() - 1) * vm.pageSize,
                params.page() * vm.pageSize);

            $defer.resolve(slicedEntities);
        }
    }

    $scope.$watch(function () {
        return vm.tableFilter.value;
    }, reloadTable);

    function reloadTable() {
        vm.tableParams.reload();
    }

    $scope.$watchCollection(function () {
        return vm.entities;
    }, reloadTable);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('PagedGridCtrl', pagedGridCtrl);

function pagedGridCtrl($timeout, $scope, $templateCache, uiGridConstants, ObjectUtils, ActionBuilder, StringUtils) {

    function activate() {
        initDefaults();
        initGridOptions();
        initGridEvents();
        initPaginationProperties();
        initSelectionProperties();
        initInlineActions();
        clearSelection();
    }

    function clearSelection() {
        if (!$scope.clearSelection) {
            return;
        }
        $scope.entities.forEach(function (entity) {
            entity.selected = false;
        });
    }

    function initDefaults() {
    	$scope.filter = {value: ''};
        $scope.useInlineActions = ObjectUtils.defaultValue($scope.useInlineActions, true);
        $scope.useSelection = ObjectUtils.defaultValue($scope.useSelection, true);
        $scope.clearSelection = ObjectUtils.defaultValue($scope.clearSelection, false);
        $scope.enableFiltering = ObjectUtils.defaultValue($scope.enableFiltering, false);
        $scope.enableSelectAll = ObjectUtils.defaultValue($scope.enableSelectAll, true);
        $scope.enableDraggable = ObjectUtils.defaultValue($scope.enableDraggable, false);
        $scope.enableSorting = ObjectUtils.defaultValue($scope.enableSorting, true);
    }

    function initGridOptions() {
        $scope.gridOptions = {
            rowHeight: 46,
            showHeader: true,
            enablePaginationControls: false,
            enableCellEdit: true,
            enableCellEditOnFocus: true,
            enableColumnResizing: true,
            enableFiltering: $scope.enableFiltering,
            enableSelectAll: $scope.enableSelectAll,
            enableRowHeaderSelection: $scope.useSelection,
            enableRowSelection: $scope.useSelection,
            enableCellSelection: $scope.useSelection,
            enableSorting: $scope.enableSorting,
            enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,
            enableVerticalScrollbar: uiGridConstants.scrollbars.NEVER,
            headerRowHeight: 65,
            virtualizationThreshold: 10,
            columnDefs: $scope.columnDefs,
            data: $scope.entities,
            rowTemplate: '<div grid="grid" class="ui-grid-draggable-row" draggable="true">' +
            			 '<div ng-repeat="(colRenderIndex, col) in colContainer.renderedColumns ' + 
            			 	  'track by col.colDef.name" class="ui-grid-cell aura-grid-cell" ' +
            			 	  'ng-class="{\'ui-grid-row-header-cell\': col.isRowHeader, \'aura-grid-selected\': row.entity.selected}" ' +
            			 	  'ui-grid-cell ap-context-menu="::row.entity.inlineActions" ap-context-menu-icons="::true"></div></div>'
        };
    }

    function initGridEvents() {
        $scope.gridOptions.onRegisterApi = function (gridApi) {
            $scope.gridApi = gridApi;

            initSelectionEvents();
            initDraggableEvents();
            initEditEvents();
            initGridFilter();
        };
    }

    function initSelectionEvents() {
        if (angular.isDefined($scope.gridApi.selection)) {
            $scope.gridApi.selection.on.rowSelectionChanged($scope, handleSelectedRow);

            $scope.gridApi.selection.on.rowSelectionChangedBatch($scope, function (rows) {
                rows.forEach(handleSelectedRow);
            });
        }
    }

    function initDraggableEvents() {
        $scope.gridApi.dragndrop.setDragDisabled(!$scope.enableDraggable);
    }

    function initEditEvents() {
        if (angular.isDefined($scope.saveCallback) && angular.isDefined($scope.gridApi.edit)) {
            $scope.gridApi.edit.on.afterCellEdit($scope, function (rowEntity, colDef, newValue, oldValue) {
                if (newValue !== oldValue && angular.isDefined(newValue)) {
                    $scope.saveCallback({entity: rowEntity});
                }
            });
        }
    }

    function handleSelectedRow(row) {
        row.entity.selected = row.isSelected;
    }

    function initGridFilter() {
        $scope.gridApi.grid.registerRowsProcessor(gridFilter, 600);
    }

    function gridFilter(renderableRows) {
        var lowerFilterValue = angular.isDefined($scope.filter.value) ?
            $scope.filter.value.toString().toLowerCase() : "";

        var matcher = new RegExp(lowerFilterValue);

        renderableRows.forEach(function (row) {
            if (angular.isUndefined($scope.filteredColumns)) {
                return true;
            }

            var match = false;

            $scope.filteredColumns.forEach(function (field) {
                var testedFieldValue = getTestedFieldValue(row.entity, field);

                if (lowerFilterValue.length === 0) {
                    match = true;
                } else if (StringUtils.isNotEmpty(testedFieldValue) &&
                    testedFieldValue.toString().toLowerCase().match(matcher)) {
                    match = true;
                }
            });

            if (!match) {
                row.visible = false;
            }
        });

        $scope.filteredEntityCount = _.filter(renderableRows, function (row) {
                return row.visible;
            }).length;

        return renderableRows;
    }

    function getTestedFieldValue(entity, field) {
        if (StringUtils.contains(field, ".")) {
            var fieldParts = field.split(".");
            return entity[fieldParts[0]][fieldParts[1]];
        }

        return entity[field];
    }

    function handleFilteredValue(filterValue, oldFilteredValue) {
        if (angular.isUndefined($scope.gridApi)) {
            return;
        }

        $scope.gridApi.grid.queueGridRefresh().then(function () {
            $timeout(function () {
                if (angular.isDefined(filterValue) ||
                    (angular.isUndefined(filterValue) && angular.isDefined(oldFilteredValue))) {
                    initSizeProperties();
                }
            }, 100);
        });
    }

    $scope.scrollToFocus = function (rowIndex, colIndex) {
        $scope.gridApi.cellNav.scrollToFocus($scope.gridOptions.data[rowIndex], $scope.gridOptions.columnDefs[colIndex]);
    };

    $scope.onPaginationChange = function (page, pageSize, total) {
        $scope.paginationStart = (page - 1) * pageSize + 1;
        $scope.paginationEnd = $scope.paginationStart + pageSize - 1;
        if ($scope.paginationEnd > total) {
            $scope.paginationEnd = total;
        }
    };

    function initPaginationProperties() {
    	$scope.enablePagination = ObjectUtils.defaultValue($scope.enablePagination, true);
    	if ($scope.enablePagination) {
    		$scope.gridOptions.paginationPageSize = 10;
        	$scope.gridOptions.paginationCurrentPage = 1;
    		initPageSizes();
            initSizeProperties();
            $scope.onPaginationChange(1, $scope.gridOptions.paginationPageSize, $scope.entities.length);
    	}
    }

    function initPageSizes() {
    	if ($scope.compactView !== true) {
	        $scope.gridOptions.paginationPageSizes = constructPageSizes([10, 20, 50]);
	
	        if (angular.isDefined($scope.entities) && $scope.entities.length > 50) {
	            $scope.gridOptions.paginationPageSizes.push(
	                constructPageSize($scope.entities.length));
	        } else if (angular.isDefined($scope.entities) && $scope.entities.length < 10) {
	            $scope.gridOptions.paginationPageSizes = constructPageSizes([10]);
	        }
    	} else {
    		$scope.gridOptions.paginationPageSizes = constructPageSizes([8]);
    	}

        if (angular.isUndefined($scope.gridOptions.chosenPaginationPageSize)) {
            handlePaginationPageSizeSelect($scope.gridOptions.paginationPageSizes[0]);
        }
    }

    function handlePaginationPageSizeSelect(chosenPageSize) {
        $scope.gridOptions.chosenPaginationPageSize = chosenPageSize;
        $scope.gridOptions.paginationPageSize = chosenPageSize.value;
        $scope.gridHeight = calculateHeight();
    }

    function constructPageSizes(pageSizes) {
        return _.map(pageSizes, constructPageSize);
    }

    function constructPageSize(pageSize) {
        return {
            value: pageSize,
            text: 'show ' + pageSize + ' entities'
        };
    }

    function initSizeProperties() {
        $scope.gridHeight = calculateHeight();
    }

    function initSelectionProperties() {
        $templateCache.put('ui-grid/selectionRowHeader',
            "<div class='ui-grid-disable-selection'><div class='ui-grid-cell-contents selection-cell-contents'>" +
            "<ui-grid-selection-row-header-buttons></ui-grid-selection-row-header-buttons></div></div>"
        );


        $templateCache.put('ui-grid/selectionRowHeaderButtons',
            "<div><ap-checkbox model='row.entity.selected'></ap-checkbox></div>"
        );
    }

    function calculateHeight() {
        var entitiesLength = angular.isDefined($scope.entities) ? $scope.entities.length : 0;

        var gridLength = Math.min($scope.gridOptions.paginationPageSize,
            ObjectUtils.defaultValue($scope.filteredEntityCount, entitiesLength));

        var $ = Math.max(110, gridLength * $scope.gridOptions.rowHeight) + 32;
        return $scope.enableFiltering ? $ + 32 : $;
    }

    function initInlineActions() {
        if (angular.isDefined($scope.entities)) {
            $scope.entities.forEach(function (entity) {
                if (ObjectUtils.isNotEmpty(entity) && ObjectUtils.isNotEmpty(entity.actionsData)) {
                    entity.inlineActions = !$scope.useInlineActions ? undefined : ActionBuilder.buildInlineActions(
                        entity.actionsData.actions, function ($itemScope) {
                            return $itemScope.row.entity;
                        });
                }
            });
        }
    }

    function handleEntitiesChange(newEntities, oldEntities) {
        if (angular.isDefined(newEntities) && angular.isDefined(oldEntities) &&
            newEntities.length !== oldEntities.length) {
            $scope.gridOptions.data = newEntities;

            initPaginationProperties();
            appendEntityFunctions(newEntities);

        } else if (angular.isDefined(newEntities)) {
            appendEntityFunctions(newEntities);
        }
        handleFilteredValue(ObjectUtils.defaultValue($scope.filter.value, ''));
    }

    function appendEntityFunctions(entities) {
        if (angular.isDefined($scope.functionAppender)) {
            angular.forEach($scope.functionAppender, function (func, funcName) {
                entities.forEach(function (entity) {
                    entity[funcName] = func;
                });
            });
        }
    }

    activate();

    $scope.handlePaginationPageSizeSelect = handlePaginationPageSizeSelect;
    $scope.$watch("filter.value", handleFilteredValue);
    $scope.$watchCollection("entities", handleEntitiesChange);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('ConstantSelectorCtrl', constantSelectorCtrl);

function constantSelectorCtrl($scope, StringUtils, ObjectUtils) {
    activate();

    function activate() {
        initMode();
        initDefaults();
    }

    function initMode() {
        if (angular.isUndefined($scope.mode)) {
            $scope.mode = {edit: true};
        }
    }
    
    function initDefaults() {
    	$scope.searchEnabled = ObjectUtils.defaultValue($scope.searchEnabled, false);
    }

    $scope.handleConstantSelect = function (item) {
        $scope.chosenConstant = item;

        if (angular.isDefined($scope.onSelectCallback)) {
            $scope.onSelectCallback({constant: item});
        }
    };

    $scope.constantMatch = function (pattern) {
        return function (constant) {
        	if (!$scope.searchEnabled) {
        		return true;
        	}
            return StringUtils.contains(constant.value, pattern) ||
                (StringUtils.isNotEmpty(constant.text) &&
                StringUtils.contains(constant.text, pattern));
        };
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('AttributeSelectorCtrl', attributeSelectorCtrl);

function attributeSelectorCtrl($scope, StringUtils) {
    activate();

    function activate() {
        fixAttributes();
    }

    function fixAttributes() {
        $scope.fixedAttributes = angular.copy($scope.attributes);
        $scope.fixedAttributes = _.filter($scope.attributes, function (attribute) {
            return angular.isDefined(attribute.name) && attribute.name.length > 0;
        });

        $scope.fixedAttributes.unshift({name: "Custom..", value: "custom"});
    }

    $scope.attributeMatch = function (pattern) {
        return function (attribute) {
            return StringUtils.contains(attribute.name, pattern);
        };
    };

    $scope.handleAttributeSelect = function (item) {
        if (angular.isDefined($scope.onSelectCallback)) {
            $scope.onSelectCallback({attribute: item});
        }
    };

    $scope.$watchCollection('attributes', fixAttributes);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('NavigationMenuCtrl', navigationMenuCtrl);

function navigationMenuCtrl($scope, UserManager) {
    activate();

    function activate() {
        $scope.isLogged = UserManager.isLogged;
    }

    $scope.toggleMiniMenu = function () {
        $scope.navProperties.miniMode = !$scope.navProperties.miniMode;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('NavigationBarCtrl', navigationBarCtrl);

function navigationBarCtrl($scope, $window, UserManager, LoginManager, NotificationManager, ServiceRecordManager) {
    activate();

    function activate() {
        $scope.isLogged = UserManager.isLogged;
        $scope.user = UserManager.user;
        $scope.notifications = NotificationManager.notifications;
        $scope.isPanelShowed = ServiceRecordManager.isPanelShowed;
        $scope.toggleRecordPanel = ServiceRecordManager.toggleRecordPanel;
    }
    
    $scope.logout = function () {
    	LoginManager.logout();
    	$window.location.reload();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('BreadcrumbsCtrl', breadcrumbsCtrl);

function breadcrumbsCtrl($scope, ObjectUtils) {
    function activate() {
        $scope.crumbs = fixCrumbs();
    }

    activate();

    function fixCrumbs() {
        return $scope.crumbs.map(function (crumb) {
            crumb.hasUrl = angular.isDefined(crumb.url) && crumb.url.length > 0;
            crumb.active = ObjectUtils.defaultValue(crumb.active, false);
            return crumb;
        });
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('ResponseTimeChartCtrl', responseTimeChartCtrl);

function responseTimeChartCtrl($rootScope, $scope, $timeout, $filter, FileNavigator, CollectionUtils) {
	var SUCCESS_COLOR = '#1dc430';
	var FAIL_COLOR = '#db020a';
	var TIMEOUT_LINE_COLOR = '#e5a526';
	
    activate();

    function activate() {
        initOptions();
        initData();
    }
    
    function formatValueX(value) {
    	return $filter('date')(new Date(value), 'dd/MM HH:mm');
    }
    
    function formatValueY(value) {
    	return angular.isNumber(value) && value > 0 ? $filter('number')(value / 1000, 2) : 0;
    }

    function initOptions() {
        $scope.options = {
            chart: {
                type: 'lineChart',
                height: 450,
                showLegend: false,
                x: function (d) {
                    return d.x;
                },
                y: function (d) {
                    return d.y;
                },
                useInteractiveGuideline: true,
                xAxis: {
                    axisLabel: 'Date',
                    tickFormat: function (xValue) {
                        return formatValueX(xValue);
                    }
                },
                yAxis: {
                    axisLabel: 'Time (s)',
                    tickFormat: function (yValue) {
                        return formatValueY(yValue);
                    }
                },
                callback: function(chart) {
                	chart.lines.dispatch.on('elementClick', function(series){
                		if (series[0].point.success === false && angular.isDefined(series[0].point.failTrace)) {
                			var title = formatValueX(series[0].point.x) + ' failure (' + formatValueY(series[0].point.y) + ' sec) ';
                    		FileNavigator.openContentPreview(title, series[0].point.failTrace);
                		}
                    });
                },
                interactiveLayer: { 
	                tooltip: {
	                    contentGenerator: tooltipGenerator
	                }
                },
                staggerLabels: true,
                yDomain: ([0, calculatePeak()])
            }
        };
    }
    
    function tooltipGenerator(data) {
    	var resultColor = (data.series["0"].data.success ? SUCCESS_COLOR : FAIL_COLOR);
        return '<table>' +
        			'<thead>' +
        				'<tr>' +
        					'<td class="legend-color-guide"><div style="display:inline-block; margin-top:-3px; margin-right:10px; background-color: ' + resultColor + '"></div>' +
        					'<strong style="color:' + resultColor + '">' + (data.series["0"].data.success ? 'Success' : 'FAIL') + '</strong></td>' +
        				'</tr>' +
        				'<tr>' +
            		 		'<td><strong>' + formatValueX(data.series["0"].data.x) + '</strong></td>' +
            		 		'<td><strong>' + formatValueY(data.series["0"].data.y) + ' sec</strong></td>' +
            		 	'</tr>' +
        			'</thead>' +
            		 '<tbody>' +
            		 	
            		 	(angular.isDefined(data.series["0"].data.ip) ?
            		 			'<tr>' +
            		 				'<td>IP:</td>' +
            		 				'<td>' + data.series["0"].data.ip + '</td>' +
            		 			'</tr>' : '') +
        		 	'</tbody>' +
    		 	'</table>';
    }

    function initData() {
        $scope.data = CollectionUtils.isNotEmpty($scope.chartData) ? [$scope.chartData] :
            [{key: 'Waiting for data..', area: true, values: []}];
    }
    
    function appendCustomLines(allCharts, errorMarkers) {
    	if ($scope.systemProperties.CHARTS_DRAW_FAILURE_LINES === 'true') {
	    	errorMarkers.forEach(function(errorMarker) {
	        	allCharts.push({key: 'marker' + errorMarker.timestamp, color: FAIL_COLOR, values: [{x: errorMarker.timestamp, y:-100000},{x: errorMarker.timestamp, y:10000000}]});
	        });
    	}
    	if ($scope.systemProperties.CHARTS_DRAW_TIMEOUT_LINE === 'true') {
    		var timeout = $scope.serviceType === 'FORMS' ? $scope.systemProperties.FORM_TIMEOUT : $scope.serviceType === 'HTML' ? $scope.systemProperties.HTML_TIMEOUT : undefined;
    		if (angular.isDefined(timeout)) {
	    		var start = allCharts[0].values[0].x;
	    		var end = allCharts[0].values[allCharts[0].values.length - 1].x;
	    		allCharts.push({key: 'timeout', color: TIMEOUT_LINE_COLOR, values: [{x: start, y:timeout},{x: end, y:timeout}]});
    		}
    	}
    }

    function parseRawData(rawData) {
        if (angular.isDefined(rawData) && rawData.length > 0) {
        	var mainChart = [];
            var errorMarkers = [];

            sortLogs(rawData);

            rawData.forEach(function (rawDataRow) {
                var point = {};
                point.x = rawDataRow.timestamp;
                point.y = rawDataRow.responseTime;
                point.success = rawDataRow.success;
                point.failTrace = angular.isDefined(rawDataRow.failReason) ? rawDataRow.failReason.replace(',','\r\n') : rawDataRow.failTrace;
                point.ip = rawDataRow.ip;
                mainChart.push(point);
                
                if (!rawDataRow.success) {
                	errorMarkers.push(rawDataRow);
                }
            });

            var allCharts = [{key: $scope.key, area: true, values: mainChart}];
            appendCustomLines(allCharts, errorMarkers);
            $scope.data = allCharts;
            
        } else {
            $scope.data = [{key: 'Waiting for data..', area: true, values: []}];
        }
    }

    function sortLogs(rawData) {
        rawData.sort(function (rawDataRow1, rawDataRow2) {
            return rawDataRow1.timestamp > rawDataRow2.timestamp ? 1 : -1;
        });
    }

    function updatePeak() {
        $scope.options.chart.yDomain = ([0, calculatePeak()]);
    }

    function calculatePeak() {
        var defaultPeak = 30 * 1000;

        if (angular.isUndefined($scope.data)) {
            return defaultPeak;
        }

        var maxValue = _.max($scope.data[0].values, function (item) {
            return item.y;
        }).y + 2 * 1000;

        return maxValue > 0 ? maxValue : defaultPeak;
    }

    function repaintGraph() {
        if (angular.isDefined($scope.api)) {
            $scope.api.refresh();
        }
    }

    $scope.$watchCollection('chartData', function (updatedRawData) {
        parseRawData(updatedRawData);
        updatePeak(updatedRawData);

        $timeout(repaintGraph, 10);
    });

    $rootScope.$on('chartContainerUpdate', repaintGraph);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('TimePickerCtrl', timePickerCtrl);

function timePickerCtrl($scope, ObjectUtils, TimeFormats) {
    activate();

    function activate() {
        $scope.timeFormats = TimeFormats.values;
        $scope.timeCoefficient = TimeFormats.default;
        $scope.timeValue = ObjectUtils.defaultValue($scope.timeValue, 10);
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('SwitchCtrl', switchCtrl);

function switchCtrl($scope) {
    activate();

    function activate() {
        initSwitchPresenters();
        if (angular.isDefined($scope.onChange)) {
        	$scope.onChange($scope.model);
        }
    }

    function initSwitchPresenters() {
        $scope.value1 = angular.isDefined($scope.value1) ? "'" + $scope.value1 + "'" : "'yes'";
        $scope.value2 = angular.isDefined($scope.value2) ? "'" + $scope.value2 + "'" : "'no'";
    }

    $scope.transformModel = function () {
        return $scope.hasModelTransformer ? $scope.modelTransformer({model: $scope.model}) : $scope.model;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('LoaderCtrl', loaderCtrl);

function loaderCtrl($scope, ObjectUtils, blockUI) {
    activate();

    function activate() {
        $scope.isFullScreen = ($scope.isFullScreen !== 'false');
        $scope.indicator.block = ObjectUtils.defaultValue($scope.indicator.block, true);
    }

    function setLoading(isLoading) {
        if ($scope.indicator.block) {
            if (angular.isDefined(isLoading)) {
                if (isLoading) {
                    blockUI.start();
                } else {
                    blockUI.stop();
                }
            }
        }
    }

    $scope.$watch("indicator.isLoading", setLoading);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('LoadableButtonCtrl', loadableButtonCtrl);

function loadableButtonCtrl($scope, ObjectUtils) {
    activate();

    function activate() {
        $scope.tooltipPlacement = ObjectUtils.defaultValue($scope.tooltipPlacement, "bottom");
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('ImageUploadCtrl', imageUploadCtrl);

function imageUploadCtrl($scope) {

	$scope.clearImage = function() {
		$scope.model = undefined;
		if (angular.isDefined($scope.currentImageName)) {
			$scope.currentImageName = undefined;
		}
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('HeaderCtrl', headerCtrl);

function headerCtrl($scope, $window, NavigationManager, DialogManager, StringUtils, ObjectUtils) {
    activate();

    function activate() {
        $scope.shouldConfirm = ObjectUtils.defaultValue($scope.shouldConfirm, false);
        initLoadingIndicator();
    }

    function initLoadingIndicator() {
        if (angular.isUndefined($scope.loadingIndicator)) {
            $scope.loadingIndicator = {isLoading: false};
        }
    }

    $scope.handleBack = function () {
        $window.history.back();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('GroupActionCtrl', groupActionCtrl);

function groupActionCtrl($scope, $q, CollectionUtils, ObjectUtils, ToastManager) {
    activate();

    function activate() {
        initActions();
        initSelectedProperty();
    }

    function initActions() {
        $scope.actions.forEach(function (action) {
            action.visible = ObjectUtils.defaultValue(action.visible, true);
        });
    }

    function initSelectedProperty() {
        $scope.selectedProperty = ObjectUtils.defaultValue($scope.selectedProperty, "selected");
    }

    $scope.handleAction = function (action, event) {
        var selectedEntities = getSelectedEntities();

        if (angular.isDefined(action.isGlobalAction) && action.isGlobalAction) {
            action.callback(selectedEntities);
            return;
        }

        if (CollectionUtils.isNotEmpty(selectedEntities)) {
            if (angular.isDefined(action.map) && angular.isDefined(action.reduce)) {
                action.callback(action.reduce(_.map(selectedEntities, action.map)));
            } else if (angular.isDefined(action.map)) {
                action.callback(_.map(selectedEntities, action.map), event);
            } else {
                invokeGroupAction(action, selectedEntities);
            }
        } else {
            ToastManager.showWarning("Please select at least one element");
        }
    };

    function invokeGroupAction(action, selectedEntities) {
        if ($scope.useSingleCallback === true) {
            action.callback(selectedEntities);
            return;
        }

        var actionPromises = [];

        selectedEntities.forEach(function (selectedEntity) {
            var callbackPromise = action.callback(selectedEntity, selectedEntities.length);

            if (angular.isDefined(callbackPromise.then)) {
                actionPromises.push(callbackPromise);
                callbackPromise.then(function () {
                    handleLoader(action, true);
                }).catch(function () {
                    handleLoader(action, false);
                });
            }
        });

        handleTermination(actionPromises, action, selectedEntities.length);
    }

    function handleLoader(action, active) {
        if (angular.isUndefined(action.loadingIndicator)) {
            return;
        }

        if (active) {
            action.loadingIndicator.isLoading = true;
            action.loadingIndicator.loadingText = action.groupLoadingText;
        } else {
            action.loadingIndicator.isLoading = false;
        }
    }

    function handleTermination(actionPromises, action, selectedEntitiesCount) {
        $q.all(actionPromises).then(function (actionPromiseResults) {
            handleLoader(action, false);

            if (angular.isDefined(action.onFinishCallback)) {
                action.onFinishCallback(selectedEntitiesCount, actionPromiseResults);
            }
        }).catch(function () {
            handleLoader(action, false);
        });
    }

    function getSelectedEntities() {
        return _.filter($scope.entities, function (entity) {
            return entity[$scope.selectedProperty];
        });
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('GridEditorActionsCtrl', headerCtrl);

function headerCtrl($scope, $window, NavigationManager, DialogManager, StringUtils, PromiseUtils, ObjectUtils) {
    activate();

    function activate() {
        initGroupActions();
    }

    function initGroupActions() {
    	$scope.gridEditorGroupActions = [];
    	
    	if (angular.isDefined($scope.additionalActions)) {
    		$scope.gridEditorGroupActions = $scope.additionalActions;
    	}
    	
        $scope.gridEditorGroupActions.push(
            {
                name: "Delete",
                callback: function(entity, total) {
                	$scope.removeCallback()(entity);
                	return PromiseUtils.emptyPromise();
                }
            }
        );
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('GlobalSelectorCtrl', globalSelectorCtrl);

function globalSelectorCtrl($scope, ObjectUtils, CollectionUtils) {
    activate();

    function activate() {
        $scope.inTable = ObjectUtils.defaultValue($scope.inTable, true);
        $scope.selectedProperty = ObjectUtils.defaultValue($scope.selectedProperty, "selected");
        
        $scope.globalSelected = false;
        updateGlobalSelected($scope.entities);
    }
    
    $scope.toggleSelected = function () {
        $scope.entities.forEach(function (entity) {
            entity[$scope.selectedProperty] = !$scope.globalSelected;
        });
        if (angular.isDefined($scope.onChange)) {
        	$scope.onChange();
        }
    };

    function updateGlobalSelected(entities) {
    	if ($scope.globalSelected === hasUnchosenSelector(entities)) {
    		$scope.globalSelected = !$scope.globalSelected;
    	}
    }

    function hasUnchosenSelector(entities) {
    	entities = CollectionUtils.filterByProperty(entities, 'isSpecial', false);
        return entities.length === 0 || _.find(entities, function (entity) {
            return !entity[$scope.selectedProperty];
        }) !== undefined;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('FileBrowserCtrl', fileBrowserCtrl);

function fileBrowserCtrl($scope, StringUtils, DialogManager) {
    activate();

    function activate() {
        initMode();
    }

    function initMode() {
        if (angular.isUndefined($scope.mode)) {
            $scope.mode = "default";
        }
    }

    $scope.handleFiles = function (event, files) {
        if (angular.isUndefined(files) || files.length === 0 || angular.isUndefined(files[0])) {
            return;
        }
        
        if (StringUtils.isNotEmpty($scope.confirmationTitle)) {
            handleBrowseConfirmation(files);
        } else {
            handleBrowsedFiles(files);
        }
    };

    function handleBrowseConfirmation(files) {
        DialogManager.openConfirmationDialog({
            title: $scope.confirmationTitle,
            description: $scope.confirmationDescription,
            onConfirmCallback: function () {
                handleBrowsedFiles(files);
            }
        }).then(emptyChosenFile, emptyChosenFile);
    }

    function handleBrowsedFiles(files) {
        $scope.fileHandler({file: files[0]});
        emptyChosenFile();
    }

    function emptyChosenFile() {
        $("#" + $scope.browserId).val(null);
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('CollapsingPanelCtrl', collapsingPanelCtrl);

function collapsingPanelCtrl($scope) {
    activate();

    function activate() {
        $scope.collapseManager = {isOpen: true};
        $scope.hasActiveTitle = angular.isDefined($scope.activeTitle);
    }

    function handleCollapseToggle(shouldCollapse) {
        if (angular.isDefined(shouldCollapse)) {
            $scope.collapseManager.isOpen = shouldCollapse;
        }
    }

    function handleCollapseManagerToggle(collapseManager) {
        $scope.bindableCollapse = collapseManager.isOpen;

        if (angular.isDefined($scope.onOpen) && collapseManager.isOpen) {
            $scope.onOpen({});
        }
    }

    $scope.$watch('shouldCollapse', handleCollapseToggle);
    $scope.$watch('bindableCollapse', handleCollapseToggle);
    $scope.$watch('collapseManager', handleCollapseManagerToggle, true);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('CheckboxCtrl', checkboxCtrl);

function checkboxCtrl($scope, ObjectUtils) {
    activate();

    function activate() {
        initModel();
        $scope.inTable = ObjectUtils.defaultValue($scope.inTable, false);
    }

    function initModel() {
        if(angular.isUndefined($scope.model)){
            $scope.model = false;
        }
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('InlineGridEditorCtrl', inlineGridEditorCtrl);

function inlineGridEditorCtrl($scope, ActionBuilder) {
    function activate() {
        $scope.inlineEditorActionData = {};
        $scope.entityBeforeEdit = {};

        initActions();
    }

    function initActions() {
        var actions = [];

        actions.push(ActionBuilder.build("Edit", "btn-blue", editEntity, false, "clip-pencil-3", true));
        actions.push(ActionBuilder.build("Save", "btn-green", saveEntity, !$scope.saveAllowed, "fa fa-save", true));
        actions.push(ActionBuilder.build("Cancel", "btn-red", cancelEntity, true, "clip-redo", true));

        $scope.inlineEditorActionData = {actions: actions};
        $scope.entity.editActionData = $scope.inlineEditorActionData;
    }


    function editEntity(entity) {
        if (angular.isDefined($scope.editCallback)) {
            $scope.editCallback({entity: entity});
        }
    }

    function saveEntity(entity) {
        if (angular.isDefined($scope.saveCallback)) {
            $scope.saveCallback({entity: entity});
        }
    }

    function cancelEntity(entity) {
        if (angular.isDefined($scope.cancelCallback)) {
            $scope.cancelCallback({entity: entity});
        }
    }

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('EditorJsSuggestionsCtrl', editorJsSuggestionsCtrl);

function editorJsSuggestionsCtrl($scope, AppVisualizerSuggestions) {
    activate();

    function activate() {
    	$scope.suggestions = AppVisualizerSuggestions;
    	$scope.shouldExpand = false;
    	$scope.categories = Object.keys($scope.suggestions.values);
    	$scope.category = undefined;
    }
    
    $scope.openCategory = function(category) {
    	$scope.category = category;
    	if (angular.isDefined(category)) {
    		$scope.icon = $scope.suggestions.values[category].icon;
    		$scope.methods = Object.keys($scope.suggestions.values[category].methods);
    		$scope.lessCommonMethods = 	angular.isDefined($scope.suggestions.values[category].lessCommonMethods) ? 
    									Object.keys($scope.suggestions.values[category].lessCommonMethods) :
    									undefined;
    	} else {
    		$scope.currentMethod = undefined;
    	}
    };
    
    $scope.openDoc = function(method, isLessCommon) {
    	$scope.currentMethod = isLessCommon ? 
    						   $scope.suggestions.values[$scope.category].lessCommonMethods[method] :
    						   $scope.suggestions.values[$scope.category].methods[method];
    };
    
    $scope.insertMethod = function(methodTitle) {
    	if (angular.isDefined($scope.editor)) {
    		$scope.editor.session.insert($scope.editor.getCursorPosition(), methodTitle);
    		$scope.editor.focus();
    	}
    };
    
    $scope.togglePanels = function() {
    	$scope.shouldExpand = !$scope.shouldExpand;
    	if ($scope.shouldExpand && angular.isDefined($scope.editor)) {
    		document.getElementById('editorJsPanelBottom').style.width = $scope.editor.renderer.$size.width + 'px';
    	}
    };
    
    $scope.closePanels = function() {
    	$scope.shouldExpand = false;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('EditorCtrl', editorCtrl);

function editorCtrl($scope, ApiAutoComplete, AppVisualizerSuggestions, SystemPropertyManager, ObjectUtils) {
    activate();
    var editor;

    function activate() {
        $scope.systemConfig = SystemPropertyManager.systemConfig;
        initDefaults();
        initEditorOptions();
    }

    function initDefaults() {
    	$scope.editorTheme = ObjectUtils.defaultValue($scope.editorTheme, 'tomorrow_night_eighties');
    	$scope.editorHeight = ObjectUtils.defaultValue($scope.editorHeight, 465);
    	$scope.editorScroll = ObjectUtils.defaultValue($scope.editorScroll, {
            horizontal: false,
            vertical: true
        });
    }

    function initEditorOptions() {
        $scope.editorOptions = {
            require: ['ace/ext/language_tools'],
            useWrapMode: true,
            animatedScroll: true,
            printMargin: true,
            displayIndentGuides: true,
            highlightGutterLine: true,
            hScrollBarAlwaysVisible: $scope.editorScroll.horizontal,
            vScrollBarAlwaysVisible: $scope.editorScroll.vertical,
            showGutter: ObjectUtils.defaultValue($scope.showGutter, true),
            theme: $scope.editorTheme,
            mode: $scope.mode,
            onLoad: onEditorLoad,
            advanced: {
                enableSnippets: true,
                enableBasicAutocompletion: true,
                enableLiveAutocompletion: true
            }
        };
    }
    
    function configureCommands(_editor) {
    	_editor.commands.addCommand({
            name: "replace",
            bindKey: {win: "Ctrl-S", mac: "Command-Option-S"},
            exec: function () {
                if (angular.isDefined($scope.saveCallback)) {
                    $scope.saveCallback();
                }
            }
        });
    }

    function getAuraPlayerApiCompleter() {
        return {
            getCompletions: function(editor, session, pos, prefix, callback) {
            	var suggestions = ApiAutoComplete.expressions;
            	$scope.autoCompleteArray = AppVisualizerSuggestions.asAutoCompleteArray();	//TODO temp until directive-not-passing-value-from-pageEditor is resolved
            	if (angular.isDefined($scope.autoCompleteArray)) {
            		suggestions = suggestions.concat($scope.autoCompleteArray);
            	}
            	
                callback(null, prefix.length > 0 ? suggestions : []);
            },
            getDocTooltip: function(item) {
            	item.docHTML = [
                    "<b>", item.caption, "</b>", "<hr></hr>", item.jsdoc
                ].join("");
            },
            isNonDefaultCompleter: true
        };
    }
    
    function removeNonDefaultCompleters(_editor) {
    	var i = 0;
    	while (i < _editor.completers.length) {
    		if (_editor.completers[i].isNonDefaultCompleter) {
    			_editor.completers.splice(i, 1);
    		} else {
    			i++;
    		} 
    	}
    }
    
    function configureCompleters(_editor) {
    	removeNonDefaultCompleters(_editor);
    	
    	if ($scope.mode === 'html' || $scope.mode === 'javascript') {
        	_editor.completers.push(getAuraPlayerApiCompleter());
    	}
    }
    
    function initValidityListener() {
    	editor.getSession().on("changeAnnotation", function() {
    		var hasErrors = false;
    	    var annotations = editor.getSession().getAnnotations();
    	    for (var i = 0; i < annotations.length; i++) {
    	    	if (annotations[i].type === 'error') {
    	    		hasErrors = true;
    	    		break;
    	    	}
    	    }
    	    editor.$valid = !hasErrors;
    	});
    }
    
    function onEditorLoad(_editor) {
    	if (angular.isDefined($scope.editorReferenceHolder)) {
    		editor = _editor;
    		$scope.editorReferenceHolder.editor = _editor;
    		initValidityListener();
    	}
    	configureCommands(_editor);
        configureCompleters(_editor);
        onShouldDisableChange($scope.shouldDisable);
        _editor.$blockScrolling = Infinity;
    }

    function onShouldDisableChange(shouldDisable) {
    	if (angular.isUndefined(editor)) {
    		return;
    	}
		editor.container.style.opacity = shouldDisable ? 0.5 : 1;
		editor.renderer.setStyle("disabled", shouldDisable);
    }

    $scope.$watch("shouldDisable", onShouldDisableChange);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('ActionPanelCtrl', actionPanelCtrl);

function actionPanelCtrl($scope, ObjectUtils) {
    activate();

    function activate() {
        $scope.inlineMode = ObjectUtils.defaultValue($scope.inlineMode, false);
        $scope.tooltipPlacement = ObjectUtils.defaultValue($scope.tooltipPlacement, "bottom");
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('InputFieldDialogCtrl', inputFieldDialogCtrl);

function inputFieldDialogCtrl($scope, $mdDialog, title, label, ObjectUtils) {
    
    function activate() {
    	$scope.holder = {value: ''};
    	$scope.title = title;
    	$scope.label = label;
    }    
    
    $scope.onConfirm = function () {
        $mdDialog.hide($scope.holder.value);
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('InfoDialogCtrl', infoDialogCtrl);

function infoDialogCtrl($scope, $mdDialog, options, ObjectUtils) {
    activate();

    function activate() {
        $scope.options = options;
    }

    $scope.close = function () {
        $mdDialog.hide();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('FormDialogCtrl', formDialogCtrl);

function formDialogCtrl($scope, ObjectUtils, $mdDialog) {
    activate();

    function activate() {
        $scope.saveAllowed = ObjectUtils.defaultValue($scope.saveAllowed, true);
        $scope.saveLabel = ObjectUtils.defaultValue($scope.saveLabel, "Save");
        $scope.saveClass = ObjectUtils.defaultValue($scope.saveClass, "btn-primary");
        $scope.cancelLabel = ObjectUtils.defaultValue($scope.cancelLabel, "Cancel");
        $scope.cancelClass = ObjectUtils.defaultValue($scope.cancelClass, "btn-default");
        $scope.cancelVisible = ObjectUtils.defaultValue($scope.cancelVisible, true);
        $scope.saveVisible = ObjectUtils.defaultValue($scope.saveVisible, true);
        $scope.warningDialog = ObjectUtils.defaultValue($scope.warningDialog, false);
    }

    $scope.handleSave = function () {
        if (angular.isDefined($scope.saveCallback)) {
            $scope.saveCallback({});
        } else {
            $mdDialog.hide();
        }
    };

    $scope.handleCancel = function () {
        if (angular.isDefined($scope.cancelCallback)) {
            $scope.cancelCallback({});
        }

        $mdDialog.cancel();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .controller('ConfirmationDialogCtrl', confirmationDialogCtrl);

function confirmationDialogCtrl($scope, $mdDialog, options, ObjectUtils) {
    activate();

    function activate() {
        $scope.options = options;
        $scope.options.saveLabel = ObjectUtils.defaultValue(options.saveLabel, "OK");
    }

    $scope.onConfirm = function () {
        if (angular.isDefined($scope.options.onConfirmCallback)) {
            $scope.options.onConfirmCallback({});
        }
        $mdDialog.hide();
    };

    $scope.onCancel = function () {
        if (angular.isDefined(options.onCancelCallback)) {
            options.onCancelCallback();
        }
        $mdDialog.cancel();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('AppVisualizerSuggestions', appVisualizerSuggestionsConstants);

function appVisualizerSuggestionsConstants(ConstantUtils) {
	
	this.values = {
			
		Barcode: {
			icon: 'clip clip-barcode',
			methods: {
				init: {
					title: 'Barcode.init(callback, filter, minLength, maxInterval)',
					desc: 'Init listener for fast keystrokes, typically generated by barcode readers.',
					params: '<ul><li><i>callback : function|string</i> - reference or name of a function to be called once a barcode is read.<br/>The barcode value will be passed as first argument to this function.</li>' +
							'<li><i>filter : string</i> - (optional) string containing chars that should be omitted from the barcode value that was read.</li>' +
							'<li><i>minLength : integer</i> - (optional, default=6) length threshold for barcode reads.<br/>Barcode values shorter than this length will not trigger calls to callback function. Length is checked before trimming filter chars.</li>' +
							'<li><i>maxInterval : integer</i> - (optional, default=50) miliseconds time threshold between chars.<br/>Chars typed in an interval smaller or equal to this value will be considered part of the same barcode value.</li></ul>'
				}
			}
		},
		Fields: {
			icon: 'clip clip-pencil-2',
			methods: {
				clear: {
					title: 'Fields.clear()',
					desc: 'Set all fields empty (clears table as well, if exists).'
				},
				get: {
					title: 'Fields.get(fieldName)',
					desc: 'Get value of a field (field could be an input, div, checkbox, etc).<br/>' +
							'<span class="example">If field is not found on the page, returns value from Session Storage via Storage.get(elementId).</span>',
					params: '<ul><li><i>fieldName : string</i> - element id of a field.</li></ul>',
					returns: '(<i>string</i>) value of the field, or undefined if no value was found.'
				},
				set: {
					title: 'Fields.set(fieldName, value)',
					desc: 'Set value to a field.',
					params: '<ul><li><i>fieldName : string</i> - element id of a field.</li>' +
							'<li><i>value : string|number</i> - value to be set.</li></ul>'
				},
				setAndStore: {
					title: 'Fields.setAndStore(fieldName, value)',
					desc: 'Set value to a field, also storing it in Session Storage.',
					params: '<ul><li><i>fieldName : string</i> - element id of a field.</li>' +
							'<li><i>value : string|number</i> - value to be set and stored.</li></ul>'
				},
				setDefaultValues: {
					title: 'Fields.setDefaultValues()',
					desc: 'Set default values to all fields.'
				},
				setFromStorage: {
					title: 'Fields.setFromStorage()',
					desc: 'Set values stored in Session Storage to all fields.'
				},
				storeAll: {
					title: 'Fields.storeAll()',
					desc: 'Store all fields to Session Storage.<br/>' +
							'<span class="example">IDs of fields will be used as keys to hold the values.</span>'
				},
				validate: {
					title: 'Fields.validate()',
					desc: 'Validates that required fields are not empty, also invoking custom validations if defined by user.<br/>' +
							'<span class="example">Disables (enables) all buttons on the page if validation fails (succeeds).</span>'
				}
			}
		},
		/*FileUpload: {
			
		},
		Handlers: {
			
		},
		Init: {
			
		},
		Lov: {
			
		},*/
		Location: {
			icon: 'clip clip-earth',
			methods: {
				initMap: {
					title: 'Location.initMap()',
					desc: 'Draws a map on the page.<br/><br/>' +
							'Page should have the following HTML elements:<br/>' +
							'<ul><li><i>&lt;div id="map"&gt;&lt;/div&gt;</i> - map will be drawn to this element.</li>' +
							'<li><i>&lt;div id="map_address"&gt;&lt;/div&gt;</i> - will contain textual address to be displayed on the map.</li>' +
							'<li><i>&lt;a id="map_locate_button"&gt;&lt;/a&gt;</i> - triggers lookup and centers the map on map_address.</li>' +
							'<li><i>&lt;a id="map_navigate_button"&gt;&lt;/a&gt;</i> - triggers lookup and opens navigation via Google Maps.</li></ul>'
				},
				buildAddress: {
					title: 'Location.buildAddress()',
					desc: 'Invokes <i>convert_map()</i> function to build an address.<br/>Sets the result to a <i>&lt;div id="map_address"&gt;&lt;/div&gt;</i> element that should exist on the page.'
				},
				markOnMap: {
					title: 'Location.markOnMap(address, popupOnFailure)',
					desc: 'Put a maker on the map on the given address.',
					params: '<ul><li><i>address : string</i> - a human-friendly address (e.g. "2 Gold St, New York").</li>' +
							'<li><i>popupOnFailure : boolean</i> - (optional, default=false) true to popup an error if address cannot be resolved.</li>'
				},
				getCurrentPosition: {
					title: 'Location.getCurrentPosition(callback)',
					desc: 'Get current position.',
					params: '<ul><li><i>callback : function</i> - function to be called once location is resolved. A position object will be passed as first argument to the callback function.<br/>' +
							'<span class="example">LatLng coordinates are available via position.coords.latitude and position.coords.longitude.</span></li></ul>'
				},
				resolveAddress: {
					title: 'Location.resolveAddress(callback, position)',
					desc: 'Resolves the human-friendly address of a <i>position</i>.',
					params: '<ul><li><i>callback : function</i> - function to be called once address is resolved. The details object will be passed as first argument to the callback function.<br/>' +
							'<span class="example">Details object format: {street_number: "12", route: "Rambam Street", locality: "Tel Aviv", administrative_area_level_1: "Tel Aviv District", country: "Israel"}</span></li>' +
							'<li><i>position : object</i> - consisting of position.coords.latitude and position.coords.longitude.</li></ul>'
				}
			}
		},
		/*Offline: {
			
		},*/
		Page: {
			icon: 'clip clip-file-2',
			methods: {
				navigate: {
					title: 'Page.navigate(target)',
					desc: 'Navigate to a page or URL.',
					params: '<ul><li><i>target : string</i> - name of other page in the app, or any full URL.</li></ul>'
				},
				parseQueryParams: {
					title: 'Page.parseQueryParams()',
					desc: 'Parses current URL, extracting query parameters.',
					returns: '<i>object</i> whose keys are the query param names, and values are the query param values.'
				}
			},
			lessCommonMethods: {
				getCurrentPage: {
					title: 'Page.getCurrentPage()',
					desc: 'Get the name of the current page.',
					returns: '(<i>string</i>) filename of the current page.'
				},
				getLoginPage: {
					title: 'Page.getLoginPage()',
					desc: 'Get the name of the login page.',
					returns: '(<i>string</i>) filename of the login page, or empty string if no login page is configured for this app.'
				},
				validateLogin: {
					title: 'Page.validateLogin()',
					desc: 'Verify that the user is logged in, and if no then navigate to login page.<br/>' +
							'<span class="example">If the current page is the login page, it will also mark the user as not-logged-in.</span>'
				}
			}
		},
		Popup: {
			icon: 'clip clip-popout',
			methods: {
				ok: {
					title: 'Popup.ok(title, message, okCallback)',
					desc: 'Show dialog with single OK button.',
					params: '<ul><li><i>title : string</i> - popup title.</li>' +
							'<li><i>message : string</i> - popup body.</li>' +
							'<li><i>okCallback : function</i> - (optional) function to be called once the OK button is clicked.</li></ul>'
				},
				okCancel: {
					title: 'Popup.okCancel(title, message, okCallback, cancelCallback)',
					desc: 'Show dialog with OK and Cancel buttons.',
					params: '<ul><li><i>title : string</i> - popup title.</li>' +
							'<li><i>message : string</i> - popup body.</li>' +
							'<li><i>okCallback : function</i> - (optional) function to be called once the OK button is clicked.</li>' +
							'<li><i>cancelCallback : function</i> - (optional) function to be called once the Cancel button is clicked.</li></ul>'
				},
				custom: {
					title: 'Popup.custom(title, message, button1Label, button2Label, button1Callback, button2Callback)',
					desc: 'Show dialog with custom button(s).',
					params: '<ul><li><i>title : string</i> - popup title.</li>' +
							'<li><i>message : string</i> - popup body.</li>' +
							'<li><i>button1Label : string</i> - label for the left button.</li>' +
							'<li><i>button2Label : string</i> - (optional) label for the right button. If undefined, there would be no second button.</li>' +
							'<li><i>button1Callback : function</i> - (optional) function to be called once the left button is clicked.</li>' +
							'<li><i>button2Callback : function</i> - (optional) function to be called once the right button is clicked.</li></ul>'
				},
				serviceErrors: {
					title: 'Popup.serviceErrors(serviceError, status)',
					desc: 'Show info dialog, formatted for service errors.',
					params: '<ul><li><i>serviceError : string</i> - One or more error messages.<br/>' +
							'<span class="example">Multiple error messages should be separated by semicolon, and they will be displayed in separate lines.</span></li>' +
							'<li><i>status : integer</i> - HTTP status code in the service\'s response.</li></ul>'
				}
			}
		},
		Services: {
			icon: 'clip clip-tree',
			methods: {
				call: {
					title: 'Services.call(serviceName, successFunction, failureFunction)',
					desc: 'Call a web service, sending all fields and storage values in the request.<br/>' +
							'<span class="example>Service\'s response will be passed in the first argument to the success/failure function.</span>',
					params: '<ul><li><i>serviceName : string</i> - service to call.</li>' +
							'<li><i>successFunction : string</i> - name of function to be called in case of success.</li>' +
							'<li><i>failureFunction : string</i> - (optional, default=undefined) name of function to be called in case of failure.<br/>' +
							'The failureFunction could be a <span class="example">function</span>, <span class="example">undefined</span> (display popup with errors), or <span class="example">null</span> (do nothing).<br/>' +
							'<span class="example">A failure is considered as success:false in service\'s response, or HTTP status code other than 200.</span></li></ul>'
				},
				callSync: {
					title: 'Services.callSync(serviceName, failureFunction)',
					desc: 'Call a web service <b>synchronously</b>, sending all fields and storage values in the request.',
					params: '<ul><li><i>serviceName : string</i> - service to call.</li>' +
							'<li><i>failureFunction : string</i> - (optional, default=undefined) name of function to be called in case of failure.<br/>' +
							'The failureFunction could be a <span class="example">function</span>, <span class="example">undefined</span> (display popup with errors), or <span class="example">null</span> (do nothing).<br/>' +
							'<span class="example">A failure is considered as success:false in service\'s response, or HTTP status code other than 200.</span></li></ul>',
					returns: 'JSON <i>object</i> of the response in success, undefined otherwise.<br/>' +
							 '<span class="example">In case of failure, the \'failureFunction\' will be called before returning undefined from this command.</span>'
					
				},
				startSession: {
					title: 'Services.startSession()',
					desc: 'Sets the \'keepAlive\' flag to true, preparing next service call for partial playback.'
				},
				endSession: {
					title: 'Services.endSession()',
					desc: 'Sets the \'keepAlive\' flag to false, stopping partial playback session after next service call.'
				},
				killSession: {
					title: 'Services.killSession(sessionId)',
					desc: 'Kills the session, invalidating it in sessionStorage if the argument matches the last used sessionId.<br/>' +
							'<span class="example">If no sessionId is specified, kills the sessionId stored in sessionStorage.</span>',
					params: '<ul><li><i>sessionId: string</i> - (optional, default=see comment) id of a session to kill, or undefined to kill last used session.</li></ul>'
				}
			}
		},
		Spinner: {
			icon: 'clip clip-spinner',
			methods: {
				start: {
					title: 'Spinner.start()',
					desc: 'Shows a full-screen blocking spinner on the center of the page.'
				},
				stop: {
					title: 'Spinner.stop()',
					desc: 'Hides the full-screen spinner.'
				},
				startMiniSpinner: {
					title: 'Spinner.startMiniSpinner(text)',
					desc: 'Shows a small non-blocking spinner at the top-right corner of the screen.',
					params: '<ul><li><i>text : string</i> - to be displayed next to the spinner.</li></ul>'
				},
				stopMiniSpinner: {
					title: 'Spinner.stopMiniSpinner()',
					desc: 'Hides the small spinner.'
				}
			}
		},
		Storage: {
			icon: 'clip clip-database',
			methods: {
				clear: {
					title: 'Storage.clear()',
					desc: 'Deletes all Session Storage data.'
				},
				contains: {
					title: 'Storage.contains(key)',
					desc: 'Check if Session Storage has value set for \'key\'.',
					params: '<ul><li><i>key : string</i> - identifies the stored entry.</li></ul>',
					returns: '(boolean) true if the key exists.'
				},
				copyFromIndex: {
					title: 'Storage.copyFromIndex(key, index)',
					desc: 'Sets to \'key\' the value stored under indexed key.<br/>' +
							'<span class="example">For example, Storage.copyFromIndex(\'S_CUSTOMER_NAME_0\', 4) will set the value of S_CUSTOMER_NAME_4 to S_CUSTOMER_NAME_0.</span>',
					params: '<ul><li><i>key : string</i> - name of a key that ends with underscore+number.</li>' +
							'<li><i>index : integer</i> - numeric index to copy from.</li></ul>'
				},
				deleteByPrefix: {
					title: 'Storage.deleteByPrefix(prefix)',
					desc: 'Delete all Session Storage keys that start with \'prefix\'.<br/>' +
							'<span class="example">For example: Storage.deleteByPrefix(\'ORDER_LINES_\')</span>',
					params: '<ul><li><i>prefix : string</i> - beginning of key names to delete.</li></ul>'
				},
				deleteAllIndices: {
					title: 'Storage.deleteAllIndices(paramName)',
					desc: 'Delete all Session Storage keys that match \'paramName\', but might have a different numeric suffix.<br/>' +
							'<span class="example">For example: Storage.deleteAllIndices(\'S_CUSTOMER_ID_0\') will delete S_CUSTOMER_ID_0, S_CUSTOMER_ID_1, S_CUSTOMER_ID_2, ...</span>',
					params: '<ul><li><i>paramName : string</i> - name of a param/key that contains underscore.</li></ul>'
				},
				deleteBySubstring: {
					title: 'Storage.deleteBySubstring(substr)',
					desc: 'Delete all items whose keys contain substr.',
					params: '<ul><li><i>substr : string</i> - partial name of keys to be deleted.</li></ul>'
				},
				get: {
					title: 'Storage.get(key)',
					desc: 'Get value from Session Storage.',
					params: '<ul><li><i>key : string</i> - identifies the stored entry.</li></ul>',
					returns: '(string) the stored value, or empty string if key is not stored.'
				},
				set: {
					title: 'Storage.set(key, value)',
					desc: 'Stores an item in session storage (any previous value will be overriden).',
					params: '<ul><li><i>key : string</i> - identifies the stored entry.</li>' +
							'<li><i>value : string|number</i> - value to be stored.</li></ul>'
				},
				remove: {
					title: 'Storage.remove(key)',
					desc: 'Remove item from Session Storage.',
					params: '<ul><li><i>key : string</i> - identfies the key-value pair to be removed.</li></ul>'
				}
				
			},
			lessCommonMethods: {
				backup: {
					title: 'Storage.backup(key)',
					desc: 'Performs backup of the current value of \'key\'.<br/>' +
							'<span class="example">Value will be stored in Session Storage under <\'_backup_\' + key>.</span>',
					params: '<ul><li><i>key : string</i> - identifies the stored entry.</li></ul>'
				},
				backupAndCopyFromIndex: {
					title: 'Storage.backupAndCopyFromIndex(key, index)',
					desc: 'Performs backup of the current value of \'key\', then sets to \'key\' the value stored under indexed key.<br/>' +
							'<span class="example">For example, Storage.backupAndCopyFromIndex(\'S_CUSTOMER_NAME_0\', 4) will store the value of S_CUSTOMER_NAME_0 under _backup_S_CUSTOMER_NAME_0, and then it will set the value of S_CUSTOMER_NAME_4 to S_CUSTOMER_NAME_0.</span>',
					params: '<ul><li><i>key : string</i> - name of a key that ends with underscore+number.</li>' +
							'<li><i>index : integer</i> - numeric index to copy from.</li></ul>'
				},
				backupAndSet: {
					title: 'Storage.backupAndSet(key, value)',
					desc: 'Performs backup of the current value of \'key\', then assigns a new value for it.<br/>' +
							'<span class="example">Current value will be stored in Session Storage under <\'_backup_\' + key>.</span>',
					params: '<ul><li><i>key : string</i> - identifies the stored entry.</li>' +
							'<li><i>value : string|number</i> - value to be stored.</li></ul>'
				},
				clearBackups: {
					title: 'Storage.clearBackups()',
					desc: 'Deletes all backed up keys in Session Storage.<br/>' +
						   '<span class="example">i.e. All keys starting with \'_backup_\' will be removed.</span>',
				},
				restoreBackups: {
					title: 'Storage.restoreBackups()',
					desc: 'Restore all backup values to the original keys.<br/>' +
							'All values stored under <\'_backup_\' + key> will be set the <key>, <\'_backup_\' + key> entries will be deleted.<br/>' +
							'<span class="example">For example, value of key _backup_S_CUSTOMER_NAME_0 will be restored to S_CUSTOMER_NAME_0.</span>'
				}
			}
		},
		/*Table: {
			icon: 'fa fa-table'
		},*/
		Utils: {
			icon: 'clip clip-puzzle-3',
			methods: {
				split: {
					title: 'Utils.split(text, delimiter)',
					desc: 'Split a string by a delimiter char.<br/>' +
							'Leading and trailing delimiters will not generate empty elements.<br/>' +
							'<span class="example">undefined or null input will be "split" to empty array.</span>',
					params: '<ul><li><i>text : string</i> - to be split.</li>' +
							'<li><i>delimiter : char</i> - separates between elements.</li></ul>',
					returns: '(<i>string[]</i>) array with the result.'
				}
			}
		}
	};
	
	this.asAutoCompleteArray = function() {
		
		function addMethods(returnArray, category, methods) {
			if (angular.isUndefined(methods)) {
				return;
			}
			Object.keys(methods).forEach(function(methodName) {
				returnArray.push({
					value: methods[methodName].title,
					score: 1,
					meta: category,
					jsdoc: methods[methodName].desc
				});
			});
		}
		
		var $ = [];
		var that = this;
		Object.keys(that.values).forEach(function(category) {
			addMethods($, category, that.values[category].methods);
			addMethods($, category, that.values[category].lessCommonMethods);
		});
		return $;
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('SqlTypes', sqlTypeConstants);

function sqlTypeConstants(ConstantUtils) {
	this.values = [
    	'BIT',
    	'TINYINT',
    	'SMALLINT',
    	'INTEGER',
    	'BIGINT',
    	'FLOAT',
    	'REAL',
    	'DOUBLE',
    	'NUMERIC',
    	'DECIMAL',
    	'CHAR',
    	'VARCHAR',
    	'LONGVARCHAR',
    	'DATE',
    	'TIME',
    	'TIMESTAMP',
    	'BINARY',
    	'VARBINARY',
    	'LONGVARBINARY',
    	'ARRAY',
    	'BLOB',
    	'CLOB',
    	'REF',
    	'BOOLEAN'
    ];
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.service')
    .service('HtmlDrivers', htmlDriverConstants);

function htmlDriverConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {value: "IE", text: "IE",						java6: true,	java8: false},
            {value: "Firefox", text: "Firefox",				java6: true,	java8: false},
            {value: "Chrome", text: "Chrome",				java6: true,	java8: false},
            {value: "ChromeDriver", text: "ChromeDriver",	java6: false,	java8: true},
            {value: "PhantomJS", text: "PhantomJS",			java6: false,	java8: true}
        ];
        
        self.default = self.values[0];
        self.default6 = self.default;
        self.default8 = self.values[3];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('DbTypes', dbTypeConstants);

function dbTypeConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {
                value: "Oracle",
                text: "Oracle"
            },
            {
                value: "MySQL",
                text: "MySQL"
            },
            {
                value: "PostgreSQL",
                text: "PostgreSQL"
            }
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('AuthenticationMethods', authenticationMethodConstants);

function authenticationMethodConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {value: "None", text: "None"},
            {value: "BasicAuthentication", text: "Basic Authentication"},
            {value: "FieldEncryption", text: "Field Encryption"},
            {value: "Ticket", text: "Ticket"},
            {value: "Ldap", text: "LDAP"}
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('HandlerActions', handlerActionConstants);

function handlerActionConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {value: "function", text: "Function"},
            {value: "webservice", text: "WebService"},
            {value: "navigate", text: "Navigate"},
            {value: "onload", text: "WebService (On load)"}
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('ApiAutoComplete', apiAutoComplete);

function apiAutoComplete() {

    this.expressions = [
    	
	   	/* fields.js */
	    {value: 'getResponseNodeValueByName(nodeName)', 								score: 1, meta: "fields.js", jsdoc: 'Get value of response node.'},
	      
	    /* handlers.js */
	    {value: 'callWebServiceWithAllParams(webService, initHandler, responseHandler, failureHandler, asyncFlag, populateFields)', 	score: 1, meta: "handlers.js", jsdoc: 'Execute a service.<br/><br/><i>webService</i> - name of a service.<br/><i>initHandler</i> - function to be called before executing the service (initHandler(serviceName))<br/><i>responseHandler</i> - function to be called on successful service response (responseHandler(response, serviceName, status))<br/><i>failureHandler</i> - function to be called on service failure.'},
	      
	    /* list.js */
	    {value: 'createList(serviceName, listItemTitle, selectionHandler)', 			score: 1, meta: "list.js", jsdoc: 'Query a service, and populate list with the result.<br/><br/><i>serviceName</i> - name of the service.<br/><br/><i>listItemTitle</i> - Either<br/>(A) name of output field whose value will be used for list-item title; <i>OR</i><br/>(B) function(outputParams, index) - <i>outputParams</i> - object containing selected item output params, <i>index</i> - index of item in list. Returns title for a list item in list.<br/><br/><i>selectionHandler</i> - function(outputParams) - callback function for an element pressed. <i>outputParams</i> - object containing selected item output params (default: defaultListSelectionHandler).'},
	    {value: 'createSelect(serviceName, fieldID, onChangeFunc, defaultIndex)', 		score: 1, meta: "list.js", jsdoc: 'Query a service, and populate object with the result.<br/><br/><i>serviceName</i> - name of the service.<br/><i>fieldID</i> - name of an output field in which the select would be populated into.<br/><i>onChangeFunc</i> - (optional) onchange callback function.<br/><i>defaultIndex</i> - (optional) index to be selected (default: 0).'},
	      
	    /* offline.js */
	    {value: 'deleteOfflineResponse(serviceName)', 									score: 1, meta: "offline.js", jsdoc: 'Delete cached response of a given service.'},
	    {value: 'deleteAllOfflineResponses()', 											score: 1, meta: "offline.js", jsdoc: 'Delete any cached responses.'},
	      
	    /* utils.js */
	    {value: 'cleanValue(val)', 														score: 1, meta: "utils.js", jsdoc: 'Trim value from leading and tailing spaces.<br/>Returns empty string if value does not exists.'}
   	];
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('ThreadContexts', threadContextConstants);

function threadContextConstants(ConstantUtils) {
    var self = this;
    
    activate();

    function activate() {
        self.values = [
        	{value: "ANY",		text: "Any"	},
            {value: "LOGIN",	text: "Login"	},
            {value: "CONN",		text: "Connection"	},
            {value: "REC",		text: "Recording"		},
            {value: "SERVC",	text: "Service"	},
            {value: "TCASE",	text: "Test Case"	},
            {value: "UPDATE",	text: "Update"	},
            {value: "EXPORT",	text: "Export"	},
            {value: "ADMIN",	text: "Admin"	},
            {value: "MACRO",	text: "Macro"	}
        ];
        
        self.default = self.values[0];
    }
    
    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('LogLevels', logLevelConstants);

function logLevelConstants(ConstantUtils) {
    var self = this;
    
    activate();

    function activate() {
        self.values = [
            {value: "ANY",		text: "Any"	},
            {value: "TRACE",	text: "Trace"	},
            {value: "DEBUG",	text: "Debug"	},
            {value: "INFO",		text: "Info"	},
            {value: "WARN",		text: "Warn"	},
            {value: "ERROR",	text: "Error"	}
        ];
        
        self.default = self.values[0];
        
        createSeverityMap();
    }
    
    function createSeverityMap() {
    	self.severityMap = {};
    	for (var i = 0; i < self.values.length; i++) {
    		self.severityMap[self.values[i].value] = i;
    	}
    }
    
    self.isSevereThan = function (checkedLevel, fixedLevel) {
    	return self.severityMap[checkedLevel] >= self.severityMap[fixedLevel];
    };

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .constant('HttpStatusCodes', {
        OK: 200,
        BAD_REQUEST: 400,
        UNAUTHORIZED: 401,
        FORBIDDEN: 403,
        NOT_FOUND: 404
    });
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('HttpResponseCodes', httpResponseCodesConstants);

function httpResponseCodesConstants(ConstantUtils, CollectionUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {
                value: "200",
                text: "200 - OK"
            },
            {
                value: "204",
                text: "204 - No Content"
            },
            {
                value: "400",
                text: "400 - Bad Request"
            },
            {
                value: "401",
                text: "401 - Unauthorized"
            },
            {
                value: "403",
                text: "403 - Forbidden"
            },
            {
                value: "404",
                text: "404 - Not Found"
            },
            {
                value: "406",
                text: "406 - Not Acceptable"
            },
            {
                value: "417",
                text: "417 - Expectation Failed"
            },
            {
                value: "500",
                text: "500 - Internal Server Error"
            },
            {
                value: "502",
                text: "502 - Bad Gateway"
            }
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };

    self.parse = function (constant) {
        return CollectionUtils.findByProperty(self.values, constant, "value");
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('HttpProtocols', httpProtocolsConstants);

function httpProtocolsConstants(ConstantUtils, CollectionUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {
                value: "http:",
                text: "http"
            },
            {
                value: "https:",
                text: "https"
            }
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };

    self.parse = function (constant) {
        return CollectionUtils.findByProperty(self.values, constant, "value");
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('HttpMethods', httpMethodConstants);

function httpMethodConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {
                value: "POST",
                text: "POST"
            },
            {
                value: "GET",
                text: "GET"
            }
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .constant('HttpConstants', {
        defaultHttpPort: 80,
        defaultHttpsPort: 443
    });
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('TimeFormats', timeFormatConstants);

function timeFormatConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {value: 1, text: "seconds"},
            {value: 60, text: "minutes"}
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .service('Formats', formatConstants);

function formatConstants(ConstantUtils) {
    var self = this;

    activate();

    function activate() {
        self.values = [
            {value: "JSON"},
            {value: "XML"}
        ];

        self.default = self.values[0];
    }

    self.getByValue = function (constantElement) {
        return ConstantUtils.getByValue(constantElement, self);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .value('bowser', bowser);
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .config(toastrConfigurator);

function toastrConfigurator(toastrConfig) {
    angular.extend(toastrConfig, {
        allowHtml: false,
        closeButton: true,
        closeHtml: '<button>&times;</button>',
        progressBar: true,
        newestOnTop: true,
        positionClass: 'toast-top-left',
        timeOut: 4000
    });
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .config(blockUIConfigurator);

function blockUIConfigurator(blockUIConfig) {
    // Change the default delay to 100ms before the blocking is visible
    blockUIConfig.delay = 100;

    // disable auto block on $http requests (all blocking is done manually!)
    blockUIConfig.autoBlock = false;
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .run(locationListenersConfigurator);

function locationListenersConfigurator($rootScope, $window, $location, DataManager, UserManager, ToastManager) {
    ////////////////////////////
    // on $routeChangeStart ////
    ////////////////////////////

    function checkLogin(event, next) {
        //redirect to login page if not logged in
        if (next.$$route.originalPath !== '/login' && (!UserManager.isInitialized() || !UserManager.isLogged())) {
            event.preventDefault();
            $location.path('/login');
            return false;
        }
        return true;
    }

    function isRoleAllowed(next) {
        return next.$$route.authorizedRoles.indexOf(UserManager.getUser().role) > -1 ||
            next.$$route.authorizedRoles.indexOf(UserManager.getUser().role + '|editOwn') > -1;
    }

    function isRoleAllowedInMode(next) {
        return next.$$route.authorizedRoles.indexOf(UserManager.getUser().role + '|' + next.pathParams.mode) > -1;
    }

    function checkPermissions(event, next) {
        if (angular.isUndefined(next.$$route.authorizedRoles) || isRoleAllowed(next) || isRoleAllowedInMode(next)) {
            return true;
        }

        event.preventDefault();
        DataManager.setIsLoading(false);
        ToastManager.showWarning('Permission denied!');
        return false;
    }

    $rootScope.$on('$routeChangeStart', function (event, next, previous) {
        DataManager.setIsLoading(true);

        if (angular.isUndefined(next.$$route) || !checkLogin(event, next) || !checkPermissions(event, next)) {
            return;
        }
    });

    ///////////////////////////////////
    // on $routeChange Success/Error //
    ///////////////////////////////////

    $rootScope.$on('$routeChangeSuccess', function (event, next, previous) {
        $rootScope.previousRoute = previous;
        $window.scroll(0, 0);
    });

    $rootScope.$on("$routeChangeError", function (event, current, previous, rejection) {
        if (angular.isDefined(current.params.accessDeniedReason)) {
            ToastManager.showWarning(current.params.accessDeniedReason, 'Access denied!');
        } else {
            ToastManager.showWarning('Unexpected route error - see console for details.');
        }

        $window.history.back();
    });
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .config(compileConfigurator);

function compileConfigurator($compileProvider) {
    $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|file|ftp|mailto|blob):|data:image\//);
    $compileProvider.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|file|blob):|data:image\//);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .config(bootstrapperConfigurator);

function bootstrapperConfigurator($compileProvider) {
    $compileProvider.debugInfoEnabled(false);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .config(localStorageConfigurator);

function localStorageConfigurator(localStorageServiceProvider) {
    localStorageServiceProvider
        .setPrefix('serviceManagerLocalStorage')
        .setStorageType('sessionStorage');
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.core')
    .config(fileManagerConfigurator);

function fileManagerConfigurator(FileManagerConfigProvider) {
    var defaults = FileManagerConfigProvider.$get();
    FileManagerConfigProvider.set({
        allowedActions: angular.extend(defaults.allowedActions, {
            remove: true
        })
    });
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('apScenarioDetails', scenarioDetailsDirective);

function scenarioDetailsDirective() {
    return {
        restrict: 'AE',
        scope: {
            service: '='
        },
        templateUrl: 'app/modules/serviceManager/views/managers/service/scenario/scenarioDetails.html',
        controller: 'ScenarioDetailsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceRecordPanel', serviceRecordPanelDirective);

function serviceRecordPanelDirective() {
    return {
        restrict: 'AE',
        scope: {},
        templateUrl: 'app/modules/serviceManager/views/managers/service/record/serviceRecordPanel.html',
        controller: 'ServiceRecordPanelCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceOutputParameterTableRow', serviceOutputParameterTableRowDirective);

function serviceOutputParameterTableRowDirective() {
    return {
        restrict: 'A',
        scope: true,
        templateUrl: 'app/modules/serviceManager/views/managers/service/parameters/serviceOutputParameterTableRow.html',
        controller: 'ServiceOutputParameterTableRowCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceOutputParameterTableNewRow', serviceOutputParameterTableNewRowDirective);

function serviceOutputParameterTableNewRowDirective() {
    return {
        restrict: 'A',
        scope: true,
        templateUrl: 'app/modules/serviceManager/views/managers/service/parameters/serviceOutputParameterTableNewRow.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceOutputParameterTable', serviceOutputParameterTableDirective);

function serviceOutputParameterTableDirective() {
    return {
        restrict: 'AE',
        scope: {
            mode: '=?',
            service: '=',
            tableConfig: '=?',
            quantityReadOnly: '=?'
        },
        templateUrl: 'app/modules/serviceManager/views/managers/service/parameters/serviceOutputParameterTable.html',
        controller: 'ServiceOutputParameterTableCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceInputParameterTableNewRow', serviceInputParameterTableNewRowDirective);

function serviceInputParameterTableNewRowDirective() {
    return {
        restrict: 'A',
        scope: true,
        templateUrl: 'app/modules/serviceManager/views/managers/service/parameters/serviceInputParameterTableNewRow.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceInputParameterTable', serviceInputParameterTableDirective);

function serviceInputParameterTableDirective() {
    return {
        restrict: 'AE',
        scope: {
            mode: '=?',
            service: '=',
            getOutputEnable: '=?',
            getOutputCallback: '&?',
            systemProperties: '=',
            tableConfig: '=?',
            quantityReadOnly: '=?'
        },
        templateUrl: 'app/modules/serviceManager/views/managers/service/parameters/serviceInputParameterTable.html',
        controller: 'ServiceInputParameterTableCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceValidationOptions', serviceValidationOptionsDirective);

function serviceValidationOptionsDirective() {
    return {
        restrict: 'AE',
        scope: {
            mode: '=',
            service: '=',
            serviceOutputParam: '=',
            closeCallback: '&'
        },
        templateUrl: 'app/modules/serviceManager/views/managers/service/parameters/outputParameterConfigDialog.html',
        controller: 'OutputParameterConfigDialogCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceNameValidator', serviceNameValidatorDirective);

function serviceNameValidatorDirective($q, $parse, PromiseUtils, ServiceManager) {
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ctrl) {
            var shouldValidate = $parse(attrs.serviceNameValidator)(scope);

            ctrl.$asyncValidators.name = function (modelValue) {
                return shouldValidate ?
                    ServiceManager.exist(modelValue).then(function (serviceExists) {
                        return serviceExists ? $q.reject("service found") : true;
                    }, function () {
                        return true;
                    }) : PromiseUtils.emptyPromise(true);
            };
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('outputParamLabelValidator', outputParamLabelValidatorDirective);

function outputParamLabelValidatorDirective(CollectionUtils) {
    return {
        require: 'ngModel',
        scope: {
            outputParams: '=',
            currentOutputParam: '='
        },
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$validators.label = function (modelValue) {
                var outputParamLabels = _.map(_.filter(scope.outputParams,
                    function (outputParam) {
                        return outputParam !== scope.currentOutputParam;
                    }), function (outputParam) {
                    return outputParam.paramLabel;
                });

                return !CollectionUtils.contains(outputParamLabels, modelValue);
            };
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('inputParamLabelValidator', inputParamLabelValidatorDirective);

function inputParamLabelValidatorDirective(CollectionUtils) {
    return {
        require: 'ngModel',
        scope: {
            inputParams: '=',
            currentInputParam: '='
        },
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$validators.label = function (modelValue) {
                var inputParamLabels = _.map(_.filter(scope.inputParams,
                    function (inputParam) {
                        return inputParam !== scope.currentInputParam;
                    }), function (inputParam) {
                    return inputParam.paramLabel;
                });

                return !CollectionUtils.contains(inputParamLabels, modelValue);
            };
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('entityUniquenessValidator', entityUniquenessValidatorDirective);

function entityUniquenessValidatorDirective(CollectionUtils) {
    return {
        require: 'ngModel',
        scope: {
            collection: '='
        },
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$validators.name = function (modelValue) {
                return !CollectionUtils.findByProperty(scope.collection, modelValue, 'id.name');
            };
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceSelector', serviceSelectorDirective);

function serviceSelectorDirective() {
    return {
        restrict: 'AE',
        scope: {
            context: '@',
            service: '=',
            serviceSelectCallback: '&'
        },
        templateUrl: 'app/modules/serviceManager/views/managers/service/serviceSelector.html',
        controller: 'ServiceSelectorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceGrid', serviceGridDirective);

function serviceGridDirective() {
    return {
        restrict: 'AE',
        scope: {
            services: '=',
            compactView: '=?',
            tableActions: '=?',
            visibleColumns: '=',
            readOnly: '=?',
            useSelection: '=?',
            clearSelection: '=?',
            enablePagination: '=?',
            enableSelectAll: '=?',
            enableDraggable: '=?',
            enableClickableNames: '=?',
            nameCellTemplate: '=?',
            actions: '=?',
            licenseDetails: '=?'
        },
        templateUrl: 'app/modules/serviceManager/views/managers/service/serviceGrid.html',
        controller: 'ServiceGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('apRecordingsGrid', recordingsGridDirective);

function recordingsGridDirective() {
    return {
        restrict: 'AE',
        scope: {
        	recordings: '=',
        	numOfServices: '=',
        	licenseDetails: '='
        },
        templateUrl: 'app/modules/serviceManager/views/managers/file/recordingsGrid.html',
        controller: 'RecordingsGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('apFileGrid', fileGridDirective);

function fileGridDirective() {
    return {
        restrict: 'AE',
        scope: {
            files: '='
        },
        templateUrl: 'app/modules/serviceManager/views/managers/file/fileGrid.html',
        controller: 'FileGridCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('apFileExplorerBreadcrumbs', fileExplorerBreadcrumbsDirective);

function fileExplorerBreadcrumbsDirective() {
    return {
        restrict: 'AE',
        scope: {},
        templateUrl: 'app/modules/serviceManager/views/managers/file/fileExplorerBreadcrumbs.html',
        controller: 'FileExplorerBreadcrumbsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('apFileExplorer', fileExplorerDirective);

function fileExplorerDirective() {
    return {
        restrict: 'AE',
        scope: {},
        templateUrl: 'app/modules/serviceManager/views/managers/file/fileExplorer.html',
        controller: 'FileExplorerCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('apBackupSelector', backupSelectorDirective);

function backupSelectorDirective() {
    return {
        restrict: 'AE',
        scope: {
            backup: '=',
            backups: '=',
            backupCallback: '&'
        },
        templateUrl: 'app/modules/serviceManager/views/managers/admin/backupSelector.html',
        controller: 'BackupSelectorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceNameEditor', serviceNameEditorDirective);

function serviceNameEditorDirective() {
    return {
        restrict: 'AE',
        scope: {
            mode: '=?',
            service: '=',
            shouldDisable: '=?',
            editedPlaceholder: '@?',
            renameCallback: '&',
            cancelRenameCallback: '&'
        },
        templateUrl: 'app/modules/serviceManager/views/editors/service/serviceNameEditor.html',
        controller: 'ServiceNameEditorCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceEditorHeader', serviceEditorHeaderDirective);

function serviceEditorHeaderDirective() {
    return {
        restrict: 'E',
        scope: {
            mode: '=',
            service: '=',
            saveAllowed: '=',
            licenseDetails: '=',
            saveCallback: '&'
        },
        templateUrl: 'app/modules/serviceManager/views/editors/service/serviceEditorHeader.html',
        controller: 'ServiceEditorHeaderCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceDetails', serviceDetailsDirective);

function serviceDetailsDirective() {
    return {
        restrict: 'E',
        scope: {
            mode: '=',
            service: '=',
            loadingIndicator: '=',
            renameCallback: '&',
            cancelRenameCallback: '&'
        },
        templateUrl: 'app/modules/serviceManager/views/editors/service/serviceDetails.html',
        controller: 'ServiceDetailsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceDbDetails', serviceDbDetailsDirective);

function serviceDbDetailsDirective() {
    return {
        restrict: 'E',
        scope: {
            mode: '=',
            service: '=',
            loadingIndicator: '='
        },
        templateUrl: 'app/modules/serviceManager/views/editors/service/serviceDbDetails.html',
        controller: 'ServiceDbDetailsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('serviceAdvancedDetails', serviceAdvancedDetailsDirective);

function serviceAdvancedDetailsDirective() {
    return {
        restrict: 'E',
        scope: {
            mode: '=',
            service: '=',
            systemProperties: '=',
            onIsBlobOutputChange: '='
        },
        templateUrl: 'app/modules/serviceManager/views/editors/service/serviceAdvancedDetails.html',
        controller: 'ServiceAdvancedDetailsCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive("apOutputParamLabelEditor", outputParamLabelEditorDirective);

function outputParamLabelEditorDirective() {
    return {
        restrict: 'AE',
        scope: {
            mode: '=',
            outputParam: '=',
            service: '=',
            shouldDisable: '='
        },
        templateUrl: 'app/modules/serviceManager/views/editors/service/outputParamLabelEditor.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('apInputParamLabelEditor', inputParamLabelEditorDirective);

function inputParamLabelEditorDirective() {
    return {
        restrict: 'AE',
        scope: {
            mode: '=',
            inputParam: '=',
            service: '=',
            shouldDisable: '='
        },
        templateUrl: 'app/modules/serviceManager/views/editors/service/inputParamLabelEditor.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('apHostPortInput', hostPortInputDirective);

function hostPortInputDirective() {
    return {
        restrict: 'AE',
        scope: {
            mode: '=',
            isRequired: '=',
            hostModel: '=',
            portModel: '='
        },
        templateUrl: 'app/modules/serviceManager/views/editors/service/hostPortInput.html'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .directive('apMain', mainDirective);

function mainDirective() {
    return {
        restrict: 'AE',
        scope: true,
        templateUrl: 'app/modules/serviceManager/views/main/main.html',
        controller: 'MainCtrl'
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .provider('RouteWrapper', routeWrapperProvider);

function routeWrapperProvider() {
    var prepareRoute = function (routeProperties) {
        var resolveObject = _.isEmpty(routeProperties.resolve) ? {} : routeProperties.resolve;

        addLicenseDetails(resolveObject, routeProperties);
        addService(resolveObject, routeProperties);
        addPages(resolveObject, routeProperties);
        addTestCases(resolveObject, routeProperties);
        addTestGroups(resolveObject, routeProperties);
        addTestAgents(resolveObject, routeProperties);
        addSystemProperties(resolveObject, routeProperties);

        routeProperties.resolve = resolveObject;

        return routeProperties;
    };

    function addLicenseDetails(resolveObject, routeProperties) {
        if (hasResolveRequest(routeProperties.withLicenseDetails)) {
            resolveObject.licenseDetails = function (LicenseManager) {
                return LicenseManager.getLicenseDetails();
            };
        }
    }

    function addService(resolveObject, routeProperties) {
        if (hasResolveRequest(routeProperties.withService)) {
            resolveObject.service = function (Permissions, $route, ServiceManager) {
                var serviceId = $route.current.params.serviceId;
                return ServiceManager.get(serviceId).then(function (service) {
                	return Permissions.resolve(service.createdBy, service);
                });
            };
        }
    }

    function addPages(resolveObject, routeProperties) {
        if (hasResolveRequest(routeProperties.withPages)) {
            resolveObject.pages = function (PageManager) {
                return PageManager.getAll();
            };
        }
    }

    function addTestCases(resolveObject, routeProperties) {
        if (hasResolveRequest(routeProperties.withTestCases)) {
            resolveObject.testCases = function (TestCaseManager) {
                return TestCaseManager.getAll();
            };
        }
    }

    function addTestGroups(resolveObject, routeProperties) {
        if (hasResolveRequest(routeProperties.withTestGroups)) {
            resolveObject.testGroups = function (TestGroupManager) {
                return TestGroupManager.getAll();
            };
        }
    }

    function addTestAgents(resolveObject, routeProperties) {
        if (hasResolveRequest(routeProperties.withTestAgents)) {
            resolveObject.testAgents = function (TestAgentManager) {
                return TestAgentManager.getAll();
            };
        }
    }

    function addSystemProperties(resolveObject, routeProperties) {
        if (hasResolveRequest(routeProperties.withSystemProperties)) {
            resolveObject.systemProperties = function (SystemPropertyManager) {
                return SystemPropertyManager.get();
            };
        }
    }

    function hasResolveRequest(resolveProperty) {
        return angular.isDefined(resolveProperty) && resolveProperty;
    }

    return {
        prepareRoute: prepareRoute,
        $get: function () {
            return {
                prepareRoute: prepareRoute
            };
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service("MailConfigManager", mailConfigManagerService);

function mailConfigManagerService(EntityManager, HttpHandler, ObjectUtils) {
    var self = this;

    activate();

    function activate() {
        self.mailConfigManagerConfig = {
            type: "mail config",
            getUrl: "/Macro/MailConfig",
            updateUrl: "/Macro/MailConfig",
            testUrl: "/Macro/MailConfig",
            fromServerConverter: fromServer,
            showSuccessLog: false
        };
    }

    function fromServer (mailConfig) {
        if (ObjectUtils.isNotEmpty(mailConfig)) {
            mailConfig.port = parseInt(mailConfig.port);
            mailConfig.isTls = '' + mailConfig.isTls;
        }
        return mailConfig;
    }
    
    this.get = function () {
        return EntityManager.get(self.mailConfigManagerConfig);
    };

    this.update = function (mailConfig, loadingIndicator) {
        return EntityManager.update(self.mailConfigManagerConfig, mailConfig, loadingIndicator);
    };

    this.test = function (mailConfig) {
    	return HttpHandler.patch(self.mailConfigManagerConfig.testUrl, mailConfig);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service("LoginManager", loginManagerService);

function loginManagerService($window, $location, EntityManager, HttpHandler, UserManager, AuthenticationManager,
							 ServiceCacheManager, TestCaseCacheManager, TestGroupCacheManager, AppCacheManager) {
    var self = this;

    activate();

    function activate() {
        self.loginManagerConfig = {
            loginUrl: "/Macro/Login",
            logoutUrl: "/Macro/Logout"
        };
    }

    this.login = function (username, password, loadingIndicator) {
        return EntityManager.handleHttpRequest({
            executionLog: "performing login..",
            httpHandlerFunction: HttpHandler.get,
            httpHandlerUrl: self.loginManagerConfig.loginUrl,
            httpHandlerData: {
                headers: {
                    Authorization: getSecureAuthorizationKey(username, password),
                    AuthenticationHost: $location.search().AUTHENTICATION_SERVER
                }
            },
            loadingIndicator: loadingIndicator,
            entityConfig: self.loginManagerConfig,
            entityId: 'Login',
            logTitle: "User Authentication",
            expectedErrorLog: "Authentication has failed, please try a different username/password.",
            unexpectedErrorLog: "Seems to be a problem contacting the server.",
            successLog: "Welcome: " + username
        });
    };

    function getSecureAuthorizationKey(username, password) {
        return 'Basic ' + $window.btoa(unescape(
                encodeURIComponent(username + ':' + password)));
    }
    
    this.logout = function () {
    	UserManager.clearUser();
        AuthenticationManager.clearCredentials();
        clearCaches();
    };
    
    function clearCaches() {
    	ServiceCacheManager.clear();
    	TestCaseCacheManager.clear();
    	TestGroupCacheManager.clear();
    	AppCacheManager.clear();
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service('AuthenticationManager', authenticationManagerService);

function authenticationManagerService($rootScope, $http, $window, $cookies, HttpHandler, UserManager) {
	var self = this;
	
	this.toBase64 = function (username, password) {
		return $window.btoa(unescape(encodeURIComponent(username + ':' + password)));
	};
	
    this.setCredentials = function (userInfo) {
        var authdata = self.toBase64(userInfo.username, userInfo.password);

        $rootScope.globals = {
            currentUser: {
                username: userInfo.username,
                authdata: authdata,
                role: userInfo.role
            }
        };

        UserManager.setUser(userInfo.username, userInfo.role);

        $http.defaults.headers.common.Authorization = 'Basic ' + authdata;
        $cookies.putObject('globals', $rootScope.globals);
    };

    this.clearCredentials = function () {
        $rootScope.globals = {};
        $cookies.remove('globals');
        $http.defaults.headers.common.Authorization = 'Basic ';
        HttpHandler.get('/Macro/Logout');
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service('LogManager', logManagerService);

function logManagerService($window, System, EntityManager, HttpHandler) {
    var self = this;

    activate();

    function activate() {
        self.logManagerConfig = {
            type: "system logs",
            getUrl: "/Macro/Log",
            logRotateUrl: "/Macro/Log",
        };
    }

    this.get = function (loadingIndicator) {
        return EntityManager.get(self.logManagerConfig, undefined, loadingIndicator);
    };

    this.rotate = function (loadingIndicator) {
        return EntityManager.handleHttpRequest({
            executionLog: "Rotating log..",
            httpHandlerFunction: HttpHandler.patch,
            httpHandlerUrl: self.logManagerConfig.logRotateUrl,
            httpHandlerConfig: {headers: {action: 'rotate'}},
            loadingIndicator: loadingIndicator,
            entityConfig: self.logManagerConfig,
            logTitle: "Clear Log",
            expectedErrorLog: "Could not rotate log.",
            unexpectedErrorLog: "Something went wrong while rotating log :(",
            successLog: "Current log archived and replaced by a new file."
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service("ScenarioManager", scenarioManagerService);

function scenarioManagerService($q, HttpHandler) {
    this.get = function (recordingFileName) {
        var deferredGet = $q.defer();

        HttpHandler.get('/Macro/ScenarioView/' + recordingFileName)
            .success(function (scenarioViewResponse) {
                if (angular.isDefined(scenarioViewResponse) && scenarioViewResponse.success) {
                    deferredGet.resolve(scenarioViewResponse.data);
                }
            }).error(function (status) {
            deferredGet.reject(status);
        });

        return deferredGet.promise;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service('ServiceRecordManager', serviceRecordManagerService);

function serviceRecordManagerService($window, $http, $timeout, $interval, $mdUtil, $mdSidenav, NavigationManager, HttpStatusCodes,
                                     SystemPropertyManager, System, Logger, ToastManager, ObjectUtils, ServiceCacheManager,
                                     RecordingsManager, ServiceFactory, ServiceManager, UserManager, StringUtils) {
    var self = this;
    
    var port = 4444, internalPort = port + 1, portQuery,
        timeouts = {snapshot: 40000, default: 10000},
        testerTolerance = 10, testerInterval = 3000, actionRetries = 3,
        recordingQuery = "formsMessageListener=com.auraplayer.ListenerWS&record=names",
        preserveIcxTicket = false,
        allowPartial = false;

    activate();

    function activate() {
    	if (!UserManager.isLogged()) {
    		return;
    	}
    	
        self.serviceOptions = {};
        self.loadingIndicator = {isLoading: false, loadingText: "Initializing recorder..", block: false};
        self.recordingProperties = {
        		isRecording: false,
        		isPanelVisible: true,
        		allowPartial: false,
        		isPartial: false,
        		isPaused: false
		};
        self.recordingTime = {value: 0};
        self.toggleRecordPanel = buildRecordPanelToggler();

        initJnpi();

        initConfiguredProperties();
    }

    function initConfiguredProperties() {
    	SystemPropertyManager.get(true).then(function(systemProperties) {
    		initPort(systemProperties);
            initRecordingQuery(systemProperties);
            preserveIcxTicket = (systemProperties.SERVICE_RECORDER_PRESERVE_ICXTICKET === "true");
            allowPartial = (systemProperties.ALLOW_PARTIAL_RECORDINGS === "true");
        });
    }

    function initPort(systemProperties) {
        var configuredPort = systemProperties.SERVICE_RECORDER_PORT;
        port = parseInt(ObjectUtils.defaultValue(configuredPort, port));
        portQuery = (configuredPort === '' ? '' : 'port=' + port);
        internalPort = port + 1;
    }

    function initRecordingQuery(systemProperties) {
        var configuredRecordingQuery = systemProperties.SERVICE_RECORDER_QUERY;
        recordingQuery = configuredRecordingQuery === '' ? '' : ObjectUtils.defaultValue(configuredRecordingQuery, recordingQuery);
    }

    function initJnpi() {
        J50Npi.success = function (data) {
            Logger.debug("jsonp request is invoked successfully..", data);
        };
    }

    function appendQueryParameter(url, keyValueToken) {
    	if (keyValueToken === '') {
    		return url;
    	}
    	var $ = url;
    	if (url.indexOf('?') !== -1 && !url.endsWith('&')) {
    		$ += '&';
    	} else if (url.indexOf('?') === -1 && !url.endsWith('?')) {
    		$ += '?';
    	} 
    	$ += keyValueToken;
    	return $;
    }
    
    this.executeRecord = function (serviceOptions, context, shouldTestInstallation, shouldRecordWithoutInstallation) {
        self.context = context;

        var serviceFormUrl = decodeURI(serviceOptions.formUrl.replace(/\+?((icx_ticket))=([^\+]$|[^\+]*)/gi, ""));
        var recorderFormUrl = preserveIcxTicket ? decodeURI(serviceOptions.formUrl) : serviceFormUrl;
        
        serviceOptions.formUrl = serviceFormUrl;
        angular.extend(self.serviceOptions, serviceOptions);

        self.loadingIndicator.isLoading = true;

        var currentRecordingQuery = shouldTestInstallation && recordingQuery.indexOf('com.auraplayer.ListenerWSTest') === -1 ?
        							recordingQuery.replace('com.auraplayer.ListenerWS', 'com.auraplayer.ListenerWSTest') :
        							recordingQuery;
        
        recorderFormUrl = appendQueryParameter(recorderFormUrl, currentRecordingQuery);
        recorderFormUrl = appendQueryParameter(recorderFormUrl, portQuery);
        
        var startRecordingUrl = shouldRecordWithoutInstallation ?
        						System.baseUrl + ServiceManager.serviceManagerConfig.recordUrl + encodeURIComponent(recorderFormUrl) :
        						recorderFormUrl;
        							   
        $window.open(startRecordingUrl, '_blank', 'playerRecorder');

        $timeout(function () {
            self.startRecording();
        }, 2000);
    };

    this.startRecording = function () {
    	self.recordingProperties.allowPartial = allowPartial;
        self.recordingProperties.isRecording = true;
        self.recordingProperties.isPartial = false;
        self.recordingProperties.isPaused = false;

        initiateRecordTimer();
        initiateTester();
    };

    this.captureParameters = function () {
        Logger.info("Capturing parameters..");
        killTester();

        self.loadingIndicator.isLoading = true;
        self.loadingIndicator.loadingText = "Capturing parameters..";

        sendToPlayer2('addalloutputparams', '', alertWhenDone, false, true);
    };
    
    function alertWhenDone(response, status) {
        self.loadingIndicator.isLoading = false;

        if (status === HttpStatusCodes.OK) {
            var decodedResponse = decodeURIComponent(parseResponseText(response));
            ToastManager.showSuccess(decodedResponse, "Service Record");
        } else {
            var responseError = StringUtils.defaultValue(parseResponseText(response), "Action failed");
            ToastManager.showError(responseError, "Service Record");
        }
    }
    
    this.saveAndContinue = function () {
        Logger.info("Saving and continuing to service edit..");
        killTester();

        self.loadingIndicator.isLoading = true;
        self.loadingIndicator.loadingText = "Saving service..";

        var params = '&serviceName=' + self.serviceOptions.name + '&serviceManagerURL=' +
            encodeURIComponent(System.baseUrl + '/uploadRecordedMacro') +
            '&formsUrl=' + encodeURIComponent(self.serviceOptions.formUrl);

        Logger.info("Sending to player with params: " + params);

        deployService(params);
    };
    
    this.stopRecord = function (shouldDestroyPanel) {
        self.loadingIndicator.isLoading = true;
        self.loadingIndicator.loadingText = "Stopping record..";

        var params = '&serviceName=' + self.serviceOptions.name;
        sendToPlayer2('stop', params, undefined, false, false);
        
        if (shouldDestroyPanel) {
        	destroyPanel();
        }
    };

    this.saveAndExit = function () {
        Logger.info("Saving and exiting..");
        killTester();

        self.loadingIndicator.isLoading = true;
        self.loadingIndicator.loadingText = "Saving service..";

        var params = '&serviceName=' + self.serviceOptions.name + '&serviceManagerURL=' +
            encodeURIComponent(System.baseUrl + '/uploadRecordedMacro') +
            '&formsUrl=' + encodeURIComponent(self.serviceOptions.formUrl);

        Logger.info("Sending to player with params: " + params);

        deployService(params, true);
    };
    
    this.saveAndPause = function () {
    	var params = '&serviceName=' + self.serviceOptions.name + '&serviceManagerURL=' +
        			 encodeURIComponent(System.baseUrl + '/uploadRecordedMacro') +
        			 '&formsUrl=' + encodeURIComponent(self.serviceOptions.formUrl);
    	
    	sendToPlayer2('stop', params, function (response, status) {
    		self.saveAndContinue();
        });
    };
    
    this.resumeRecord = function () {
        Logger.info("Resuming record..");
        killTester();

        self.loadingIndicator.isLoading = true;
        self.loadingIndicator.loadingText = "Resuming record..";

        sendToPlayer2('record', '', alertWhenDone, false, true);
    };

    this.isPanelShowed = function () {
        return $mdSidenav('serviceRecordPanel').isOpen();
    };

    /*************************************
     * *           Utilities
     *************************************/

    function deployService(params, shouldExitPanel) {
        shouldExitPanel = ObjectUtils.defaultValue(shouldExitPanel, false);

        sendToPlayer2('deployAndContinue', params, function (response, status) {
                Logger.info("service is deployed!");
                var formUrl = response.responseJson.serviceUrl;
                var fileName = response.responseJson.fileName;

                RecordingsManager.get(fileName).then(function (recordingFile) {
                    afterCreatedRecording(recordingFile, formUrl);

                    if (shouldExitPanel) {
                        destroyPanel(true);
                    }
                });
            }
        );
    }

    function afterCreatedRecording(recordingFile, formUrl) {
        var service = ServiceFactory.buildBaseService(recordingFile, formUrl);
        ServiceCacheManager.cacheContextService(service);

        if (self.context === "testCase") {
            handleTestCaseContext(service);
        } else {
            NavigationManager.goToNewTab('/serviceEditor/new/{0}'.format(service.name));
        }
    }

    function handleTestCaseContext(service) {
        self.loadingIndicator.loadingText = 'creating service..';

        ServiceManager.create(service, self.loadingIndicator)
            .then(function () {
                NavigationManager.goToNewTab('/testCaseEditor/new/{0}/{1}'.format(service.name, service.name));
            });
    }

    function sendToPlayer2(action, params, callback, showSuccess, showError) {
        var url = "http://localhost:{0}/?callback=JSON_CALLBACK&action={1}".format(internalPort, action + params);
        getJsonp(url, action, callback, showSuccess, showError);
    }

    function getJsonp(url, action, callback, showSuccess, showError) {
        Logger.info("Invoking jsonp request with url: " + url);
        showSuccess = ObjectUtils.defaultValue(showSuccess, true);
        showError = ObjectUtils.defaultValue(showError, true);
        var timeout = ObjectUtils.defaultValue(timeouts[action], timeouts['default']);

        invokeAction(actionRetries, url, callback, action, showSuccess, showError, timeout);
    }

    function invokeAction(retries, url, callback, action, showSuccess, showError, timeout) {
        Logger.info("Invoking action on {0} on retry #{1}".format(url, actionRetries - retries + 1));

        $http.jsonp(url, {timeout: timeout})
        	.success(function (data, status, headers, config) {
	            Logger.info("Success invoking url: {0} with action: {1}".format(url, action), data);
	
	            if (action === "test") {
	                killTester();
	            }
	
	            if (retries === 1 && StringUtils.isEmpty(data.responseText)) {
	                handleError("action call exhaustion on {0}".format(action), showError, action);
	            } else if (StringUtils.isEmpty(data.responseText) && action !== "test") {
	                invokeAction(retries - 1, url, callback, showSuccess, showError, timeout);
	            } else {
	                handleSuccess(data, showSuccess);
	
	                if (angular.isDefined(callback)) {
	                    callback(data, status);
	                }
	            }
        	}).error(function (data, status, headers, config) {
	            if (retries === 1) {
	                Logger.error("Request returned with status " + status);
	
	                handleError("Action call exhaustion on {0}".format(action), showError, action);
	
	                if (angular.isDefined(callback)) {
	                    callback(undefined, status);
	                }
	            } else if (action !== "test") {
	                invokeAction(retries - 1, url, callback, showSuccess, showError, timeout);
	            }
        	});
    }

    function handleSuccess(data, showSuccess) {
        self.consecutiveFailedTests = 0;

        if (showSuccess) {
            ToastManager.showSuccess(parseResponseText(data), "Service Record");
        }

        self.loadingIndicator.isLoading = false;
    }

    function handleError(response, showError, action) {
        if (showError) {
            ToastManager.showError("Error while recording: ", response);
        }

        self.loadingIndicator.isLoading = true;
        self.loadingIndicator.loadingText = "Initializing recorder..";

        if (self.consecutiveFailedTests++ > testerTolerance) {
            destroyPanel(true);
        }

        self.loadingIndicator.isLoading = action === "test";
        self.loadingIndicator.loadingText = "initializing recorder..";
    }

    function parseResponseText(data) {
    	if (angular.isUndefined(data)) {
    		return undefined;
    	}
        var response = data.responseText;
        return StringUtils.isNotEmpty(response) ? response.replace(/\+/g, " ") : "";
    }

    function initiateRecordTimer() {
        self.recordingTimer = $interval(function () {
            self.recordingTime.value++;
        }, 1000);
    }

    function initiateTester() {
        killTester();
        self.consecutiveFailedTests = 0;
        self.tester = $interval(function () {
            Logger.debug("Testing recorder..");
            testRecorder();
        }, testerInterval);
    }

    function testRecorder() {
        sendToPlayer2('test', '', function (response, status) {
            if (status === HttpStatusCodes.OK) {
                Logger.debug("Record tester returned with: " + response);
                self.consecutiveFailedTests = 0;
                Logger.debug("Test passed!");
                self.loadingIndicator.isLoading = false;
            } else {
                Logger.debug("Test failed! (consecutive failed tests: " +
                    self.consecutiveFailedTests + ")");
                self.loadingIndicator.isLoading = true;
                self.loadingIndicator.loadingText = "initializing recorder..";
            }

            if (self.consecutiveFailedTests > testerTolerance) {
                destroyPanel(true);
            }

        }, false, false);
    }

    function buildRecordPanelToggler() {
        return $mdUtil.debounce(function () {
            $mdSidenav('serviceRecordPanel')
                .toggle().then(function () {
                Logger.info("Record panel is toggled");
            });
        }, 200);
    }

    function killTimer() {
        $interval.cancel(self.recordingTimer);
        self.recordingTime.value = 0;
    }

    function killTester() {
        if (angular.isDefined(self.tester)) {
            $interval.cancel(self.tester);
        }
    }

    function destroyPanel(togglePanel) {
        Logger.debug("=== Destroying panel ===");

        togglePanel = ObjectUtils.defaultValue(togglePanel, true);

        killTimer();
        killTester();

        self.loadingIndicator.isLoading = false;
        self.loadingIndicator.loadingText = "Initializing recorder..";
        self.recordingProperties.isRecording = false;

        if (togglePanel) {
            self.toggleRecordPanel();
        }
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin')
    .service('FormUrls', formUrlsService);

function formUrlsService(HttpHandler) {
	var macroUrl = '/Macro/Forms';

    this.getAll = function () {
        return HttpHandler.getAndResolve(macroUrl);
    };
    
    this.update = function (formUrls) {
    	return HttpHandler.post(macroUrl, formUrls); 
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service("UserManager", userManagerService);

function userManagerService($rootScope, StringUtils) {
    var self = this;

    activate();

    function activate() {
        self.user = {logged: false, initialized: false};
        
        self.user.isManager = function () {
        	return self.user.role === 'manager' || self.user.isAdmin();
        };
        self.user.isAdmin = function () {
        	return self.user.role === 'webuser';
        };
    }

    
     //////////////////////////
    /// Getters //////////////
    //////////////////////////
    
    this.isInitialized = function () {
        return self.user.initialized;
    };
    this.getUser = function () {
        return self.user;
    };
    this.getRole = function () {
    	return self.user.role;
    };
    this.getUsername = function () {
        return self.user.username;
    };
    this.isLogged = function () {
        return self.user.logged;
    };
    

    //////////////////////////
    /// Setters //////////////
    //////////////////////////
    
    this.setUser = function (user, role) {
        angular.extend(self.user, user);
        
        self.user.username = user;
        self.user.role = role;
        self.user.logged = true;
        self.user.initialized = true;
    };
    this.setOperator = function () {
        self.user.role = 'Operator';
        self.user.initialized = true;
    };
    this.clearUser = function () {
    	$rootScope.globals.currentUser = undefined;
        activate();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service("NotificationManager", notificationManagerService);

function notificationManagerService() {
    var self = this;

    activate();

    function activate() {
        self.notifications = [];
        self.pinned = [];
    }

    this.addNotification = function (msg, isPinned) {
        self.notifications.push(msg);
        if (isPinned) {
        	self.pinned.push(msg);
        }
    };
    
    this.clearUnpinned = function () {
    	self.notifications.length = 0;
    	Array.prototype.push.apply(self.notifications, self.pinned);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service('SystemPropertyManager', systemPropertyManagerService);

function systemPropertyManagerService(EntityManager, HttpHandler, DialogManager, SystemPropertiesParser, PromiseUtils) {
    var self = this;
    self.systemConfig = {properties: {}};

    activate();

    function activate() {
        self.systemPropertyManagerConfig = {
            type: 'system properties',
            getUrl: '/Macro/SystemProperties',
            updateUrl: '/Macro/SystemProperties',
            restartUrl: '/Macro/SystemProperties',
            showSuccessLog: false
        };
    }

    this.get = function (isUseCache) {
        if (isUseCache === true && Object.keys(self.systemConfig.properties).length > 0) {
            return PromiseUtils.emptyPromise(self.systemConfig.properties);
        }

        return EntityManager.get(self.systemPropertyManagerConfig).then(function (systemProperties) {
        	if (systemProperties.announceOnDbReset === true) {
        		DialogManager.openInfoDialog({
                    title: 'Version upgrade',
                    description: 'Your database has been reset.<br/>Please restore your data from previous backups (full or daily).'
                });
        	}
        	
        	var parsedSystemProperties = SystemPropertiesParser.parse(systemProperties);
        	self.systemConfig.properties = parsedSystemProperties;
        	self.systemConfig.properties.toString = function() {
        		return systemProperties.properties;
        	};
            return parsedSystemProperties;
        });
    };

    this.getCachedSystemConfig = function () {
        return self.systemConfig;
    };

    this.update = function (systemProperties, loadingIndicator) {
    	return EntityManager.handleHttpRequest({
            executionLog: 'Updating System Properties',
            httpHandlerFunction: HttpHandler.post,
            httpHandlerUrl: self.systemPropertyManagerConfig.updateUrl,
            httpHandlerData: systemProperties,
            getEntityWhenResolved: false,
            loadingIndicator: loadingIndicator,
            expectedErrorLog: 'System Properties could not be updated!',
            unexpectedErrorLog: 'Something went wrong while updating System Properties :('
        });
    };

    this.restart = function (loadingIndicator) {
        return EntityManager.handleHttpRequest({
            executionLog: 'Restarting server',
            httpHandlerFunction: HttpHandler.patch,
            httpHandlerUrl: self.systemPropertyManagerConfig.restartUrl,
            getEntityWhenResolved: false,
            loadingIndicator: loadingIndicator,
            expectedErrorLog: 'Server could not be restarted!',
            unexpectedErrorLog: 'Something went wrong during server restart :('
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service("SystemPropertiesParser", SystemPropertiesParserService);

function SystemPropertiesParserService(StringUtils, CollectionUtils) {

    this.parse = function (systemProperties) {
        var systemPropertyLines = angular.isObject(systemProperties.properties)? '' : systemProperties.properties.split("\n");
        systemPropertyLines = filterNonPropertyLines(systemPropertyLines);
        var $ = reduceToObject(parseProperties(systemPropertyLines));
        $.javaCompileVersion = systemProperties.javaCompileVersion;
        return $;
    };

    function filterNonPropertyLines(systemPropertyLines) {
        return _.filter(systemPropertyLines, function (systemPropertyLine) {
            return systemPropertyLine.trim().length > 0 && !systemPropertyLine.trim().startsWith("#");
        });
    }

    function parseProperties(systemPropertyLines) {
        return _.map(systemPropertyLines, function (systemPropertyLine) {
            var systemPropertyLineParts = systemPropertyLine.split(/=(.+)?/);

            return {
                property: systemPropertyLineParts[0].trim(),
                value: parseValue(systemPropertyLineParts[1])
            };
        });
    }

    function parseValue(value) {
    	if (angular.isUndefined(value)) {
    		return "";
    	}
    	
        return !StringUtils.contains(value, ",") ? value.trim() :
            _.map(value.split(","), function (valuePart) {
                return valuePart.trim();
            });
    }

    function reduceToObject(systemProperties) {
        return CollectionUtils.reduce(systemProperties, function (systemProperty) {
            return systemProperty.property;
        }, function (systemProperty) {
            return systemProperty.value;
        });
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service('SystemLoader', systemLoaderService);

function systemLoaderService($location, System, StringUtils) {
    var protocol = System.useDefault ? System.defaultProtocol : $location.protocol();
    var host = System.useDefault ? System.defaultHost : $location.host();
    var port = System.useDefault ? System.defaultPort : $location.port();

    System.baseUrl = '{0}://{1}:{2}/{3}'.format(protocol, host, port, System.rootContext);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service('ServiceManager', serviceManagerService);

function serviceManagerService($q, $mdDialog, System, HttpHandler, ObjectUtils, EntityManager, NavigationManager, DataManager, ServiceConverter,
                               ServiceCacheManager, CollectionUtils, UserManager, ToastManager, PromiseUtils, BrowserUtils,
                               SystemPropertyManager, Permissions) {
    var self = this;

    activate();

    function activate() {
        self.serviceManagerConfig = {
            type: 'service',
            recordUrl: '/Macro/RecordService?formUrl=',
            executeUrl: '/Macro/ExecMacro/',
            getUrl: '/Macro/Service/',
            getAllUrl: '/Macro/Services',
            getNumberOfEntitiesUrl: '/Macro/Services',
            createUrl: '/Macro/Service/',
            updateUrl: '/Macro/Service/',
            deleteUrl: '/Macro/Services',
            renameUrl: '/Macro/Service/',
            existUrl: '/Macro/Service/',
            enableDisableUrl: '/Macro/Services',
            mockUrl: '/Macro/ServiceMock/',
            backupUrl: '/Macro/Backup',
            ticketServiceUrl: '/Macro/Ticket',
            fromServerConverter: ServiceConverter.fromServer,
            toServerConverter: ServiceConverter.toServer
        };
    }

    this.get = function (serviceName) {
        return EntityManager.get(self.serviceManagerConfig, serviceName);
    };

    this.getAll = function (filter, filterParameter, customConverter) {
    	var config = angular.isDefined(customConverter) ?
    				 angular.extend({}, self.serviceManagerConfig, {fromServerConverter: (customConverter !== null ? customConverter : undefined)}) :
    				 self.serviceManagerConfig;
    				 
        return EntityManager.getAll(config, undefined, prepareGetAllHeaders(filter, filterParameter)).then(function (fetchedServices) {
        	DataManager.setIsLoading(false);
            return SystemPropertyManager.get(true).then(function (systemProperties) {
                return Permissions.filterIfNecessary(fetchedServices, systemProperties);
            });	
        });
    };
    
    this.filters = {
		SERVICES_LIST: 'SERVICES_LIST',
		SPECIFIED: 'SPECIFIED',
		NAMES: 'NAMES',
		BY_APP: 'BY_APP',
		BY_PROCESS: 'BY_PROCESS',
		MCS: 'MCS',
		APP_VISUALIZER: 'APP_VISUALIZER'
    };

    function prepareGetAllHeaders(filter, filterParameter) {
        return {
            headers: {
                'AP-Filter': filter,
                'AP-FilterParameter': filterParameter
            }
        };
    }
    
    this.getNumberOfServices = function () {
    	return HttpHandler.patch(self.serviceManagerConfig.getNumberOfEntitiesUrl);
    };

    this.create = function (service, loadingIndicator) {
        service.createdBy = UserManager.getUsername();

        self.serviceManagerConfig.createUrl = '/Macro/Service/' + service.name;
        return EntityManager.create(self.serviceManagerConfig, service, loadingIndicator)
            .then(function (createdService) {
                return afterServiceModification(createdService, true);
            });
    };

    this.update = function (service, loadingIndicator, overrideConfig) {
        self.serviceManagerConfig.updateUrl = '/Macro/Service/' + service.name;
        return EntityManager.update(ObjectUtils.override(self.serviceManagerConfig, overrideConfig),
            service, loadingIndicator).then(function () {
            return afterServiceModification(service);
        });
    };

    function toastDeleteResult(serviceNames, isForceDelete, result) {
    	if (result.deletedServices.length > 0) {
    		ToastManager.showSuccess(result.deletedServices.length + ' services deleted.');
    	}
    	CollectionUtils.fromServerArray(result.resultMessage).forEach(function(error){
    		ToastManager.showError(error, 'Error deleting service');
    	});
    	if (!isForceDelete && serviceNames.length !== result.deletedServices.length) {
    		ToastManager.showInfo('You may Force Delete services by holding the Shift key while deleting.', 'Services in use');
    	}
    }
    
    this.delete = function (serviceNames, isForceDelete, loadingIndicator) {
    	var config = self.serviceManagerConfig;
    	if (isForceDelete) {
    		config = angular.copy(config);
    		config.deleteUrl += '/Force';
    	}
    	
        return EntityManager.deleteMultiple(config, serviceNames, loadingIndicator).then(function () {
        	serviceNames.forEach(function(serviceName){
        		ServiceCacheManager.removeService(serviceName);
        	});
        	ToastManager.showSuccess(serviceNames.length > 1 ? serviceNames.length + ' services deleted.' : 'Service ' + serviceNames[0] + ' deleted.');
        	return serviceNames;
        }, function (result) {
        	result.deletedServices.forEach(function(serviceName){
        		ServiceCacheManager.removeService(serviceName);
        	});
        	toastDeleteResult(serviceNames, isForceDelete, result);
        	return result.deletedServices;
        });
    };

    this.enableOrDisable = function (serviceNames, loadingIndicator, isEnable) {
    	var deferred = $q.defer();
    	loadingIndicator.isLoading = true;
        loadingIndicator.loadingText = (isEnable ? 'Enabling ' : 'Disabling ') + serviceNames.length + ' services...';
        
        HttpHandler.post(self.serviceManagerConfig.enableDisableUrl, undefined, {headers: {'AP-Entities': serviceNames, 'AP-Action': (isEnable ? 'activate' : 'disable')}})
	        .success(function (response) {
	            if (angular.isDefined(response.success) && !response.success) {
	            	ToastManager.showWarning(response.errors.errorDescription);
	            	deferred.resolve(CollectionUtils.fromServerArray(response.data));
	            } else {
	                deferred.resolve(serviceNames);
	            }
	            loadingIndicator.isLoading = false;
	        })
	        .error(function (status) {
	        	loadingIndicator.isLoading = false;
	        	ToastManager.showError('Failed with status ' + status, (isEnable ? 'Activate' : 'Disable'));
	        	deferred.reject([]);
	        });

        return deferred.promise;
    };
    
    this.exist = function (serviceName, loadingIndicator) {
        return EntityManager.exist(self.serviceManagerConfig, serviceName, loadingIndicator);
    };

    this.rename = function (currentServiceName, newServiceName, loadingIndicator, isIgnoreDeps) {
        return EntityManager.rename(self.serviceManagerConfig, currentServiceName, newServiceName, loadingIndicator, isIgnoreDeps);
    };
    
    this.setMock = function (serviceName, mockResponse, loadingIndicator) {
    	loadingIndicator.isLoading = true;
    	HttpHandler.post(self.serviceManagerConfig.mockUrl + serviceName, mockResponse)
	        .success(function (response) {
	            if (angular.isDefined(response.success) && !response.success) {
	            	ToastManager.showWarning(response.errors.errorDescription);
	            } else {
	            	ToastManager.showSuccess('Response saved as mock', 'Set Mock');
	            }
	            loadingIndicator.isLoading = false;
	        })
	        .error(function (status) {
	        	loadingIndicator.isLoading = false;
	        	ToastManager.showError('Failed with status ' + status, 'Set Mock');
	        });
    };

    function afterServiceModification(updatedService, isCreateNew) {
        if (angular.isUndefined(isCreateNew)) {
            ServiceCacheManager.cacheService(updatedService);
        }

        return updatedService;
    }

    this.backup = function (services) {
        var encodedServices = encodeURIComponent(JSON.stringify({services: services}));
        NavigationManager.goToServer("{0}?data={1}".format(self.serviceManagerConfig.backupUrl, encodedServices));
    };

    this.showServiceRecorderDialog = function (service, recordActivator, context) {
        if (validateSystemBeforeRecord()) {
            return openServiceRecorderOptionsDialog(service, recordActivator, context);
        }

        return PromiseUtils.emptyPromise(false);
    };

    function validateSystemBeforeRecord() {
        if (BrowserUtils.isChrome() && System.checkRecordCompatibility) {
            ToastManager.showError("To record a webservice, please use a different browser than Chrome", "Service Record");
            return false;
        } else if (!BrowserUtils.isCompatible()) {
            ToastManager.showError("Please use IE 9+ version", "Service Record");
            return false;
        }
        return true;
    }

    function openServiceRecorderOptionsDialog(service, recordActivator, context) {
        if (angular.isUndefined(service)) {
            service = {name: '', formUrl: ''};
        }

        return $mdDialog.show({
            controller: 'ServiceRecordDialogCtrl',
            templateUrl: 'app/modules/serviceManager/views/managers/service/record/serviceRecordDialog.html',
            clickOutsideToClose: true,
            locals: {
                context: context,
                serviceOptions: {
                    name: service.name,
                    formUrl: service.formUrl
                }
            },
            bindToController: true
        }).then(function (activateRecord) {
            if (activateRecord && angular.isDefined(recordActivator)) {
                recordActivator();
            }
            return true;
        });
    }
    
    function putInputParameters($, service) {
    	service.inputParams.forEach(function(inputParam) {
    		if ((angular.isUndefined(inputParam.paramValue) || !inputParam.paramValue.includes('$')) && inputParam.visible === true) {
    			var key = service.useLabelsAsKeys ? inputParam.paramLabel : inputParam.id.name;
        		$[key] = inputParam.paramValue || '';
    		}
    	});
    }
    
    function putExpressionVariables($, expression) {
    	var VAR_REGEX = /\${(.*?)}/g;
    	var match = VAR_REGEX.exec(expression);
    	while (match != null) {
    		if (match[1] !== 'index') {
    			$[match[1]] = '';
    		}
    		match = VAR_REGEX.exec(expression);
    	}
    }
    
    function putLoopVariables($, scenarioItems) {
    	var loopKey;
    	scenarioItems.forEach(function(scenarioItem) {
    		if (scenarioItem.actionType === 'ForJson') {
    			loopKey = scenarioItem.fieldName;
    			$[loopKey] = [{}];
    		} else if (scenarioItem.actionType === 'EndForJson') {
    			loopKey = undefined;
    		} else if (angular.isDefined(loopKey)) {
    			putExpressionVariables($[loopKey][0], scenarioItem.fieldName);
    			putExpressionVariables($[loopKey][0], scenarioItem.value);
    		}
    	});
    }
    
    this.generateInputJson = function (service, scenarioItems) {
    	var $ = {};
    	putInputParameters($, service);
    	if (service.type === 'HTML' && service.hasInputList) {
    		putLoopVariables($, scenarioItems);
    	}
    	return JSON.stringify($, null, '\t');
    };
    
    this.generateTicketService = function (loginService, loadingIndicator) {
    	var deferred = $q.defer();
    	loadingIndicator.isLoading = true;
        loadingIndicator.loadingText = 'Generating Ticket service...';
        
        HttpHandler.get(self.serviceManagerConfig.ticketServiceUrl + '/' + loginService)
	        .success(function (response, status) {
	            if (status === 200) {
	            	deferred.resolve(response.data);
	            } else {
	            	ToastManager.showError('Failed with status ' + status, 'Generate Ticket service');
	            }
	            loadingIndicator.isLoading = false;
	        })
	        .error(function (response, status) {
	        	loadingIndicator.isLoading = false;
	        	ToastManager.showError('Failed, see log for details', 'Generate Ticket service');
	        	deferred.reject([]);
	        });

        return deferred.promise;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service("ServiceFactory", serviceFactoryService);

function serviceFactoryService(AuthenticationMethods, ServiceConverter, StringUtils, ObjectUtils) {
	var self = this;
	
	this.USERNAME_INPUT_PARAMETER = 'username';
	this.PASSWORD_INPUT_PARAMETER = 'password';
	
    this.buildDefaultService = function () {
        return {
        	type: 'Forms',
            authenticationMethod: AuthenticationMethods.default,
            numOfRowsInTable: 20,
            isEnabled: true,
            isJson: true
        };
    };

    function omitNamelessParams (params) {
    	return _.filter(params, function (param) {
            return !StringUtils.isEmpty(param.id.name) || !StringUtils.isEmpty(param.paramLabel);
        });
    }
    
    this.buildBaseService = function (recordingFile, formUrl) {
        return {
            name: recordingFile.fileName.split(".")[0],
            fileName: recordingFile.fileName,
            type: ServiceConverter.identifyType(recordingFile.fileName),
            description: "",
            formUrl: angular.isDefined(recordingFile.baseUrl) ? recordingFile.baseUrl : ObjectUtils.defaultValue(formUrl, ""),
            authenticationMethod: AuthenticationMethods.default,
            numOfRowsInTable: 20,
            isEnabled: true,
            isPartial: ObjectUtils.defaultValue(recordingFile.isPartial, false),
            isJson: true,
            isHandlePopups: false,
            inputParams: ObjectUtils.defaultValue(recordingFile.inputParams, []),
            outputParams: ObjectUtils.defaultValue(omitNamelessParams(recordingFile.outputParams), [])
        };
    };
    
    /*********************************
     ** DB Service *******************
     *********************************/
    
    function constructDbInputParam(name) {
    	return {
            id: {name: name},
            name: name,
            paramLabel: name,
            paramValue: '',
            visible: true
        };
    }
    
    function constructDbInputParams() {
    	var $ = [];
    	$.push(constructDbInputParam(self.USERNAME_INPUT_PARAMETER));
    	$.push(constructDbInputParam(self.PASSWORD_INPUT_PARAMETER));
    	return $;
    }
    
    this.buildDbService = function () {
    	return {
            name: 'dbService',
            fileName: '@sql',
            type: 'DB',
            description: '',
            formUrl: '',
            authenticationMethod: AuthenticationMethods.default,
            numOfRowsInTable: 20,
            isEnabled: true,
            isJson: true,
            inputParams: constructDbInputParams(),
            outputParams: []
        };
    };
    
    /*********************************
     ** JS Service *******************
     *********************************/
    
    this.buildJsService = function () {
    	return {
            name: 'jsService',
            fileName: '@js',
            type: 'JS',
            description: '',
            formUrl: '',
            authenticationMethod: AuthenticationMethods.default,
            numOfRowsInTable: 20,
            isEnabled: true,
            isJson: true,
            useLabelsAsKeys: false,
            inputParams: [],
            outputParams: []
        };
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service('ServiceExecutor', serviceExecutorService);

function serviceExecutorService(ServiceManager, EntityManager, HttpHandler, PrimitiveUtils, ObjectUtils) {
	
	this.execute = function (serviceId, query, httpMethod, loadingIndicator, agent) {
        return EntityManager.handleHttpRequest({
            executionLog: 'Executing service',
            httpHandlerFunction: HttpHandler.for(httpMethod),
            httpHandlerUrl: ServiceManager.serviceManagerConfig.executeUrl + serviceId +
            (HttpHandler.isGet(httpMethod) ? query : ''),
            httpHandlerData: HttpHandler.isPost(httpMethod) ? (query instanceof Object ? query : query.replace('?', '')) : {},
            httpHandlerConfig: {
                headers: {
                    'Content-Type': HttpHandler.isPost(httpMethod) && query instanceof Object ? 'application/json; charset=UTF-8' : 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Ignore-Field-Encryption': true,
                    'AP-Agent': agent
                }
            },
            loadingIndicator: loadingIndicator,
            entityConfig: ServiceManager.serviceManagerConfig,
            entityId: serviceId,
            logTitle: 'Service Execution',
            expectedErrorLog: 'Service execution has finished with errors',
            unexpectedErrorLog: 'Something went wrong while executing service',
            successLog: serviceId + ' executed successfully!',
            ignoreStatusCode: true
            
        }).then(function (executionResponse) {
            if (angular.isDefined(executionResponse) && angular.isDefined(executionResponse.Response)) {
                ObjectUtils.iterateProperties(executionResponse.Response, '', transformPrimitive);
            }
            return executionResponse;
        });
    };
	
    function transformPrimitive(object, property) {
        object[property] = PrimitiveUtils.stringToPrimitive(object[property]);
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service('ServiceConverter', serviceConverterService);

function serviceConverterService(DbServices, HtmlDrivers, AuthenticationMethods, HttpResponseCodes, ValidationFunctions,
								 ConstantUtils, CollectionUtils, ObjectUtils, StringUtils) {
    var self = this;

	/*********************************
     ** fromServer *******************
     *********************************/
	
	this.identifyType = function(fileName) {
		if (fileName.endsWith('.orp')) {
			return 'Forms';
		} else if (fileName.endsWith('.html')) {
			return 'HTML';
		} else if (fileName.endsWith('@sql')) {
			return 'DB';
		} else if (fileName === '@js') {
			return 'JS';
		}
		return undefined;
	};
	
	this.isSpecialOutputParam = function(outputParam) {
		var name = outputParam.id.name;
		return name === 'Error' || name === 'PopupMessages' || name === 'StatusBarMessages';
	};
	
	function fixDescription(service) {
        service.description = ObjectUtils.defaultValue(service.description, '');
        service.description = service.description === 'null' ? '' : service.description;
    }
	
	function addSpecialOutputParamIfMissing(outputParams, name, label, validationFunction, serviceName) {
        var existing = CollectionUtils.findByProperty(outputParams, name, "id.name");

        if (angular.isDefined(existing)) {
            existing.paramLabel = label;
            existing.isSpecial = true;
        } else {
            outputParams.push({
                id: {
                    name: name,
                    serviceName: serviceName
                },
                name: name,
                paramLabel: label,
                validationFunction: validationFunction,
                isSpecial: true
            });
        }
    }
	
	var noneValidation = ValidationFunctions.getByValue("NONE");
	
	this.add3SpecialOutputParamsIfMissing = function(outputParams, serviceName) {
		addSpecialOutputParamIfMissing(outputParams, "PopupMessages", "PopupMessages", noneValidation, serviceName);
        addSpecialOutputParamIfMissing(outputParams, "StatusBarMessages", "StatusBarMessages", noneValidation, serviceName);
        addSpecialOutputParamIfMissing(outputParams, "Error", "Error", ValidationFunctions.getByValue("EMPTY"), serviceName);
	};
	
	function convertOutputParams(outputParams, serviceName) {
        if (CollectionUtils.isNotEmpty(outputParams)) {
            outputParams.forEach(function (outputParam) {
                outputParam.validationFunction = ValidationFunctions.getByValue(ObjectUtils.defaultValue(outputParam.validationFunction, ValidationFunctions.default));
            });
        }
        if (angular.isDefined(outputParams)) {
        	self.add3SpecialOutputParamsIfMissing(outputParams, serviceName);
        }
    }
	
	function sortLinkedApps(service) {
        if (CollectionUtils.isNotEmpty(service.linkedApps)) {
            service.linkedApps.sort();
        }
    }
	
	function fromServerProxy(service) {
		if (service.type === 'HTML' && !StringUtils.isNothing(service.proxy)) {
			var pos = service.proxy.lastIndexOf(":");
			service.proxyHost = service.proxy.substr(0, pos);
			service.proxyPort = +service.proxy.substr(pos + 1);
		}
	}
	
	this.fromServer = function (service) {
        if (ObjectUtils.isEmpty(service)) {
        	return service;
        }
        
        service.authenticationMethod = AuthenticationMethods.getByValue(ObjectUtils.defaultValue(service.authenticationMethod, AuthenticationMethods.default));
        service.validationResponseCode = HttpResponseCodes.getByValue(ObjectUtils.defaultValue(service.validationResponseCode, HttpResponseCodes.default));

        if (service.authenticationMethod.value === 'FieldEncryption') {
        	service.authenticationData.username = {'value': service.authenticationData.username};
            service.authenticationData.password = {'value': service.authenticationData.password};
        }
        
        service.type = self.identifyType(service.fileName);
        
        fromServerProxy(service);
        
        if (service.type === 'HTML') {
        	service.command = HtmlDrivers.getByValue(service.command);
        }
        if (service.type === 'DB') {
        	service.db = DbServices.parseConnectionString(service.formUrl);
        }
        
        fixDescription(service);
        convertOutputParams(service.outputParams, service.name);
        sortLinkedApps(service);

        return service;
    };
    
    this.fromServerList = function (service) {
    	service.type = self.identifyType(service.fileName);
    	sortLinkedApps(service);
    	return service;
    };
    
    this.fromServer_forLov = function (service) {
    	service.type = self.identifyType(service.fileName);
    	convertOutputParams(service.outputParams, service.name);
    	return service;
    };
    
    /*********************************
     ** toServer *********************
     *********************************/

    function fixParams(service, paramProperty) {
        var params = service[paramProperty];

        if (CollectionUtils.isNotEmpty(params)) {
            params.forEach(function (param) {
                param.paramLabel = StringUtils.defaultValue(param.paramLabel, param.id.name);
                param.validationFunction = ConstantUtils.defaultValue(param.validationFunction, ValidationFunctions);
            });
        }
    }
    
    function toServerProxy(service) {
    	if (service.type !== 'HTML' ||
    			StringUtils.isNothing(service.proxyHost) ||
    			StringUtils.isNothing(service.proxyPort)) {
    		service.proxy = undefined;
    	} else {
    		service.proxy = service.proxyHost + ':' + service.proxyPort;
    	}
    }
    
    this.toServer = function (service) {
        service.authenticationMethod = ConstantUtils.defaultValue(service.authenticationMethod, AuthenticationMethods);
        service.validationResponseCode = ConstantUtils.defaultValue(service.validationResponseCode, HttpResponseCodes);

        if (angular.isDefined(service.authenticationData)) {
        	service.authenticationData.username = service.authenticationMethod === 'FieldEncryption' ? service.authenticationData.username.value : undefined;
            service.authenticationData.password = service.authenticationMethod === 'FieldEncryption' ? service.authenticationData.password.value : undefined;
        }
        
        toServerProxy(service);
        
        if (service.type === 'HTML') {
        	service.command = ConstantUtils.flatten(service.command);
        }
        
        if (angular.isDefined(service.formUrl)) {	//when saving dataTypeInfo.service it will be undefined
	        service.formUrl = service.type === 'DB' ?
	        				  DbServices.generateConnectionString(service) :
	        				  service.formUrl.replace(/\\/g, "/");
        }

        fixParams(service, 'inputParams');
        fixParams(service, 'outputParams');

        return service;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service('DbServices', sqlServicesService);

function sqlServicesService($mdDialog, HttpHandler, AuthenticationManager, DbTypes, ObjectUtils) {
	var sqlServiceUrl = '/Macro/DbService';
    
	this.promptUsernamePassword = function (username, password, comment) {
		return $mdDialog.show({
            controller: 'UsernamePasswordDialogCtrl',
            templateUrl: 'app/modules/serviceManager/views/managers/service/usernamePasswordDialog.html',
            locals: {
            	title: 'DB Authentication',
            	comment: comment,
                username: ObjectUtils.defaultValue(username, ''),
                password: ObjectUtils.defaultValue(password, '')
            },
            bindToController: true
        });
	};
	
	function toConnectionString(host, port, dbName, type) {
		host =  host.replace(/^https:/,"").replace(/^http:/,"")
					.replace(/^\/\//,"").replace(/^\\\\/,"");
		
		switch (type) {
			case "Oracle":
				return 'jdbc:oracle:thin:@{0}:{1}:{2}'.format(host, port, dbName);
			case "MySQL":
				return 'jdbc:mysql://{0}:{1}/{2}'.format(host, port, dbName);
			case "PostgreSQL":
				return 'jdbc:postgresql://{0}:{1}/{2}'.format(host, port, dbName);
			default:
				return '';
		}
	}
	
	this.generateConnectionString = function (service) {
		return toConnectionString(	service.db.host, 
									service.db.port,
									service.db.name,
									service.db.type.value);
	};
	
	this.parseConnectionString = function (connectionString) {
		connectionString = connectionString.replace(/^jdbc:/,"");
		
		if (connectionString.startsWith('oracle:thin:')) {
			var tokens = connectionString.split(/[:@]+/);
			return {
				host: tokens[2],
				port: +tokens[3],
				name: tokens[4],
				type: DbTypes.getByValue('Oracle')
			};
		} else if (connectionString.startsWith('mysql:')) {
			return {
				host: connectionString.substring(connectionString.indexOf('//') + 2, connectionString.lastIndexOf(':')),
				port: +connectionString.substring(connectionString.lastIndexOf(':') + 1, connectionString.lastIndexOf('/')),
				name: connectionString.substring(connectionString.lastIndexOf('/') + 1),
				type: DbTypes.getByValue('MySQL')
			};
		} else if (connectionString.startsWith('postgresql:')) {
			return {
				host: connectionString.substring(connectionString.indexOf('//') + 2, connectionString.lastIndexOf(':')),
				port: +connectionString.substring(connectionString.lastIndexOf(':') + 1, connectionString.lastIndexOf('/')),
				name: connectionString.substring(connectionString.lastIndexOf('/') + 1),
				type: DbTypes.getByValue('PostgreSQL')
			};
		} else {
			return {};
		}
	};
	
    this.getColumns = function (connectionUrl, query, input) {
    	return HttpHandler.get(sqlServiceUrl, {
            headers: {
            	'AP-Url': connectionUrl,
                'AP-Query': encodeURIComponent(query),
                'AP-Input': encodeURIComponent(input)
            }
        });
    };
    
    this.testConnection = function (connectionUrl, username, password) {
    	return HttpHandler.patch(sqlServiceUrl, undefined, {
            headers: {
            	'AP-Url': connectionUrl,
            	'AP-Authorization': AuthenticationManager.toBase64(username, password)
            }
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service("MapManager", mapManagerService);

function mapManagerService(EntityManager) {
    var self = this;

    activate();

    function activate() {
        self.mapManagerConfig = {
            getUrl: "/Macro/Map/"
        };
    }

    this.getMapData = function (filename, app) {
        return EntityManager.get(self.mapManagerConfig, app + '/' + filename);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.auraTester')
    .service('ServiceCacheManager', serviceCacheManagerService);

function serviceCacheManagerService(EntityCacheManager) {
    var CACHE_KEY = 'services';

    this.cacheService = function (service) {
        EntityCacheManager.cacheEntity(CACHE_KEY, service);
    };

    this.getService = function (serviceName) {
        return EntityCacheManager.getEntity(CACHE_KEY, serviceName);
    };

    this.removeService = function (serviceName) {
        EntityCacheManager.removeEntity(CACHE_KEY, serviceName);
    };

    this.cacheServices = function (services) {
        EntityCacheManager.cacheEntities(CACHE_KEY, services);
    };

    this.getServices = function (requestServices) {
        return EntityCacheManager.getEntities(CACHE_KEY, requestServices);
    };

    this.removeServices = function (services) {
        EntityCacheManager.removeEntities(CACHE_KEY, services);
    };

    this.cacheContextService = function (service) {
        return EntityCacheManager.cacheContextEntity(CACHE_KEY, service);
    };

    this.getContextService = function () {
        return EntityCacheManager.getContextEntity(CACHE_KEY);
    };

    this.removeContextService = function () {
        EntityCacheManager.removeContextEntity(CACHE_KEY);
    };

    this.hasContextService = function () {
        return EntityCacheManager.hasContextEntity(CACHE_KEY);
    };

    this.clear = function () {
        EntityCacheManager.clear(CACHE_KEY);
    };

    this.getLastModification = function () {
        return EntityCacheManager.getLastModification(CACHE_KEY);
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service("RecordingsManager", recordingsManagerService);

function recordingsManagerService(NavigationManager, ObjectUtils, FileUploader, EntityManager, OrpFileConverter) {
    var self = this;

    activate();

    function activate() {
        self.recordingFileManagerConfig = {
            type: "recording file",
            getUrl: "/Macro/RecordingFile/",
            getAllUrl: "/Macro/RecordingFiles",
            deleteUrl: "/Macro/RecordingFile/",
            downloadUrl: "/Macro/RecordingFileDownload/",
            uploadUrl: "/Macro/RecordingFileUpload",
            fromServerConverter: OrpFileConverter.fromServer,
            toServerConverter: OrpFileConverter.toServer
        };
    }

    this.get = function (fileName) {
        return EntityManager.get(self.recordingFileManagerConfig, fileName);
    };

    this.getAll = function () {
        return EntityManager.getAll(self.recordingFileManagerConfig);
    };

    this.delete = function (fileName, loadingIndicator, overrideConfig) {
        return EntityManager.delete(ObjectUtils.override(self.recordingFileManagerConfig, overrideConfig),
        		fileName, loadingIndicator);
    };

    this.download = function (fileNames) {
        NavigationManager.goToServer(self.recordingFileManagerConfig.downloadUrl + fileNames);
    };

    this.upload = function (recordingFile, loadingIndicator) {
        return FileUploader.upload({
            type: 'Recording',
            uploadUrl: self.recordingFileManagerConfig.uploadUrl,
            file: recordingFile,
            loadingIndicator: loadingIndicator
        });
    };

    this.uploadAndGet = function (recordingFile, loadingIndicator) {
        return self.upload(recordingFile, loadingIndicator).then(function () {
            return self.get(recordingFile.name);
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service("ImageFileManager", imageFileManagerService);

function imageFileManagerService(NavigationManager, ObjectUtils, FileUploader, EntityManager, OrpFileConverter) {
	var self = this;
	
	activate();

    function activate() {
        self.imageFileManagerConfig = {
            uploadUrl: "/Macro/ImageUpload"
        };
    }
	
	this.upload = function (imageFile, loadingIndicator) {
        return FileUploader.upload({
            type: 'Image',
            uploadUrl: self.imageFileManagerConfig.uploadUrl,
            file: imageFile,
            loadingIndicator: loadingIndicator
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service('FileNavigator', fileNavigatorService);

function fileNavigatorService($http, $mdDialog, FileManager, ActionBuilder, FileItem, ObjectUtils) {
    var self = this;

    activate();

    function activate() {
        $http.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
        self.requesting = false;
        self.fileList = [];
        self.currentPath = [];
        self.history = [];
        self.error = '';
    }

    this.setLoadingIndicator = function (loader) {
        self.loader = loader;
    };

    this.list = function () {
        var path = self.currentPath.join('/');

        var listRequest = {
            action: 'list',
            path: path
        };

        self.requesting = true;
        self.fileList = [];
        self.error = '';

        return FileManager.list(listRequest, self.loader.indicator);
    };

    this.refresh = function () {
        var path = self.currentPath.join('/');

        return self.list({}).then(function (files) {
            if (angular.isDefined(files)) {
                self.fileList = (files || []).map(function (file) {
                    return new FileItem(file, self.currentPath, {
                        folderClick: self.folderClick,
                        previewFile: self.previewFile,
                        loader: self.loader
                    });
                });

                initFilesActions();

                self.buildTree(path);
            }
        });
    };

    this.previewFile = previewFile;

    function initFilesActions() {
        self.fileList.forEach(function (file) {
            initFileActions(file);
        });
    }

    function initFileActions(file) {
        if (angular.isUndefined(file)) {
            return;
        }

        var actions = [];

        if (file.isEditable()) {
            actions.push(ActionBuilder.build("Preview", "btn-teal", previewFile, false, "clip-eye"));
        }
        actions.push(ActionBuilder.build("Download", "btn-purple", downloadFile, false, "clip-download", true, true));
        actions.push(ActionBuilder.build("Delete", "btn-red", deleteFile, false, "clip-remove"));

        file.actionsData = {actions: actions};
    }

    this.folderClick = function (item) {
        self.currentPath = [];

        if (item && item.isFolder()) {
            self.currentPath = item.model.fullPath().split('/').splice(1);
        }

        self.refresh();
    };

    this.upDir = function () {
        if (self.currentPath[0]) {
            self.currentPath = self.currentPath.slice(0, -1);
            self.refresh();
        }
    };

    this.goTo = function (index) {
        self.currentPath = self.currentPath.slice(0, index + 1);
        self.refresh();
    };

    this.fileNameExists = function (fileName) {
        ObjectUtils.forEachProperty(self.fileList, function (item) {
            item = self.fileList[item];
            if (fileName.trim && item.model.name.trim() === fileName.trim()) {
                return true;
            }
        });
    };

    this.listHasFolders = function () {
        for (var item in this.fileList) {
            if (this.fileList[item].model.type === 'dir') {
                return true;
            }
        }
    };

    this.buildTree = function (path) {
        var flatNodes = [], selectedNode;

        function recursive(parent, item, path) {
            var absName = path ? (path + '/' + item.model.name) : item.model.name;
            if (parent.name.trim() && path.trim().indexOf(parent.name) !== 0) {
                parent.nodes = [];
            }
            if (parent.name !== path) {
                for (var i in parent.nodes) {
                    if (parent.nodes.hasOwnProperty(i)) {
                        recursive(parent.nodes[i], item, path);
                    }
                }
            } else {
                for (var e in parent.nodes) {
                    if (parent.nodes[e].name === absName) {
                        return;
                    }
                }
                parent.nodes.push({item: item, name: absName, nodes: []});
            }

            parent.nodes = parent.nodes.sort(function (a, b) {
                return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : a.name.toLowerCase() === b.name.toLowerCase() ? 0 : 1;
            });
        }

        function flatten(node, array) {
            array.push(node);
            for (var n in node.nodes) {
                if (node.nodes.hasOwnProperty(n)) {
                    flatten(node.nodes[n], array);
                }
            }
        }

        function findNode(data, path) {
            return data.filter(function (n) {
                return n.name === path;
            })[0];
        }

        if (!this.history.length) {
            this.history.push({name: '', nodes: []});
        }

        flatten(this.history[0], flatNodes);
        selectedNode = findNode(flatNodes, path);
        selectedNode.nodes = [];

        for (var o in this.fileList) {
            if (this.fileList.hasOwnProperty(o)) {
                var item = this.fileList[o];
                if (item.isFolder()) {
                    recursive(this.history[0], item, path);
                }
            }
        }
    };

    function deleteFile(fileItem) {
        fileItem.delete(self.loader.indicator).then(self.refresh);
    }

    function downloadFile(fileItem) {
        fileItem.download(self.loader.indicator);
    }

    function previewFile(fileItem) {
        var filePath = fileItem.tempModel.fullPath();

        var getContentRequest = {
            action: "get_content",
            path: filePath
        };

        FileManager.getContent(getContentRequest, self.loader.indicator)
            .then(function (fileContentResponse) {
                self.openContentPreview(fileItem.model.name, fileContentResponse.data);
            });
    }

    this.openContentPreview = function(fileName, fileContent) {
        $mdDialog.show({
            controller: 'FilePreviewDialogCtrl',
            templateUrl: 'app/modules/serviceManager/views/managers/file/filePreviewDialog.html',
            clickOutsideToClose: true,
            locals: {
                fileName: fileName,
                fileContent: fileContent
            },
            bindToController: true
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service("FileManager", fileManagerService);

function fileManagerService(EntityManager, HttpHandler, FileUploader, NavigationManager) {
    var self = this;

    activate();

    function activate() {
        self.fileManagerConfig = {
            type: "file",
            listUrl: "/Macro/FileManager",
            deleteUrl: '/Macro/FileManager',
            getContentUrl: '/Macro/FileManager',
            downloadUrl: '/Macro/FileManager',
            uploadUrl: '/Macro/FileManager',
            showSuccessLog: false
        };
    }

    this.list = function (listRequest, loadingIndicator) {
        return EntityManager.handleHttpRequest({
            executionLog: "Getting files...",
            httpHandlerFunction: HttpHandler.post,
            httpHandlerUrl: self.fileManagerConfig.listUrl,
            httpHandlerData: listRequest,
            loadingIndicator: loadingIndicator,
            entityConfig: self.fileManagerConfig,
            expectedErrorLog: "File list could not be fetched",
            unexpectedErrorLog: "Something went wrong while fetching file list :("
        }).then(function (fileManagerActionResponse) {
            return fileManagerActionResponse.data;
        });
    };

    this.delete = function (removeRequest, loadingIndicator) {
        return EntityManager.handleHttpRequest({
            executionLog: "Deleting file...",
            httpHandlerFunction: HttpHandler.post,
            httpHandlerUrl: self.fileManagerConfig.deleteUrl,
            httpHandlerData: removeRequest,
            loadingIndicator: loadingIndicator,
            entityConfig: self.fileManagerConfig,
            expectedErrorLog: "File could not be deleted",
            unexpectedErrorLog: "Something went wrong during file deletion :("
        });
    };

    this.getContent = function (getContentRequest, loadingIndicator) {
        return EntityManager.handleHttpRequest({
            executionLog: "Getting file content...",
            httpHandlerFunction: HttpHandler.post,
            httpHandlerUrl: self.fileManagerConfig.getContentUrl,
            httpHandlerData: getContentRequest,
            loadingIndicator: loadingIndicator,
            entityConfig: self.fileManagerConfig,
            expectedErrorLog: "File content could not be retrieved",
            unexpectedErrorLog: "Something went wrong while getting file content :("
        });
    };

    this.download = function (downloadRequest) {
        var downloadRequestString = $.param(downloadRequest);
        NavigationManager.goToServer(self.fileManagerConfig.downloadUrl +
            '?' + downloadRequestString);
    };

    this.upload = function (file, path, loadingIndicator) {
        return FileUploader.upload({
            type: 'file',
            uploadUrl: self.fileManagerConfig.uploadUrl,
            file: file,
            fields: {
                path: path
            },
            loadingIndicator: loadingIndicator
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .factory('FileItem', function ($http, $q, $mdDialog, FileManagerConfig, ObjectUtils, FileManager) {
        var FileItem = function (model, path, navigatorApi) {
            var rawModel = {
                name: model && model.name || '',
                path: path || [],
                type: model && model.type || 'file',
                size: model && parseInt(model.size || 0),
                lastModified: model && ObjectUtils.defaultValue(model.lastModified, 0),
                content: model && model.content || '',
                recursive: false,
                fullPath: function () {
                    return ('/' + this.path.join('/') + '/' + this.name).replace(/\/\//, '/');
                }
            };

            this.error = '';
            this.navigatorApi = navigatorApi;
            this.model = angular.copy(rawModel);
            this.tempModel = angular.copy(rawModel);
        };

        FileItem.prototype.update = function () {
            angular.extend(this.model, angular.copy(this.tempModel));
        };

        FileItem.prototype.revert = function () {
            angular.extend(this.tempModel, angular.copy(this.model));
            this.error = '';
        };

        FileItem.prototype.download = function () {
            FileManager.download(prepareDownloadRequest(this.model));
        };

        function prepareDownloadRequest(fileItemModel) {
            var path = fileItemModel.fullPath();
            return {
                action: 'download',
                path: path
            };
        }

        FileItem.prototype.delete = function (loadingIndicator) {
            var self = this;
            var removeRequest = {
                action: 'delete',
                path: self.tempModel.fullPath()
            };

            return FileManager.delete(removeRequest, loadingIndicator);
        };

        FileItem.prototype.isFolder = function () {
            return this.model.type === 'dir';
        };

        FileItem.prototype.isEditable = function () {
            return !this.isFolder() && FileManagerConfig.isEditableFilePattern.test(this.model.name);
        };

        FileItem.prototype.isImage = function () {
            return FileManagerConfig.isImageFilePattern.test(this.model.name);
        };

        FileItem.prototype.handleClick = function () {
            if (this.isFolder()) {
                this.navigatorApi.folderClick(this);
            } else if (this.isEditable()) {
                this.navigatorApi.previewFile(this);
            }
        };

        return FileItem;
    });
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .service("OrpFileConverter", orpFileConverterService);

function orpFileConverterService() {
    this.fromServer = function(orpFile){
        return orpFile;
    };

    this.toServer = function(orpFile){
        return orpFile;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.service')
    .controller('OutputParameterConfigDialogCtrl', serviceValidationOptionsCtrl);

function serviceValidationOptionsCtrl($scope, $mdDialog, mode, service, currentOutputParam, ObjectUtils, ValidationFunctions, ParameterValidationUtils) {
    activate();

    function activate() {
        $scope.validationFunctions = ValidationFunctions.values;
        $scope.localOutputParam = {};
        $scope.currentOutputParam = currentOutputParam;
        $scope.mode = mode;
        $scope.service = service;
        $scope.validValidation = true;
        ObjectUtils.copyInto($scope.currentOutputParam, $scope.localOutputParam);
    }

    $scope.isTestedValueRequired = function () {
        return ParameterValidationUtils.isTestedValueRequired(
            $scope.localOutputParam.validationFunction);
    };

    $scope.handleValidationFunctionSelect = function (validation) {
        if (!ParameterValidationUtils.isTestedValueRequired(validation)) {
            $scope.localOutputParam.testedValue = undefined;
            $scope.localOutputParam.parameterizedValue = undefined;
        }
    };

    $scope.hasParameterizedValue = function () {
        return angular.isDefined($scope.localOutputParam.parameterizedValue);
    };

    $scope.saveChanges = function () {
        ObjectUtils.copyInto($scope.localOutputParam, $scope.currentOutputParam);
        $mdDialog.hide();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller("ScenarioDetailsCtrl", scenarioDetailsCtrl);

function scenarioDetailsCtrl($scope, ScenarioManager, SystemPropertyManager, DataTypes, DataTypeHandler, FileUtils) {
    activate();

    function activate() {
        $scope.systemProperties = SystemPropertyManager.systemConfig.properties;
        initScenarioDetails();
    }

    function initScenarioDetails() {
        ScenarioManager.get($scope.service.fileName)
            .then(function (scenarioDetails) {
                $scope.scenarioDetails = fixScenarioDetails(scenarioDetails);
                detectInputList($scope.scenarioDetails);
            });
    }

    function fixScenarioDetails(scenarioDetails) {
        scenarioDetails.forEach(function (scenarioDetail) {
            scenarioDetail.paramName = scenarioDetail.fieldName;
            scenarioDetail.paramValue = scenarioDetail.value;
            scenarioDetail.dataTypeInfo = {
                dataType: DataTypes.getByValue(
                    DataTypeHandler.getDataTypeValue(scenarioDetail.paramName, scenarioDetail.dataType, $scope.systemProperties))
            };
        });

        return scenarioDetails;
    }

    function detectInputList(scenarioItems) {
		if ($scope.service.type !== 'HTML') {
			return;
		}

        var isInsideLoop = false;
        scenarioItems.forEach(function(scenarioItem) {
    		if (scenarioItem.actionType === 'ForJson') {
    			scenarioItem.inLoop = true;
    			isInsideLoop = true;
    		} else if (scenarioItem.actionType === 'EndForJson') {
    			scenarioItem.inLoop = true;
    			isInsideLoop = false;
    		} else if (isInsideLoop) {
    			scenarioItem.inLoop = true;
    		}
    	});
	}
    
    $scope.renameToCsvExt = function (scenarioName) {
        if (angular.isDefined(scenarioName)) {
            return FileUtils.renameExtension(scenarioName, "csv");
        }
    };

    $scope.getScenarioDetails = function () {
        return $scope.scenarioDetails;
    };
    
    $scope.isHtmlService = function () {
    	return $scope.service.fileName.endsWith(".html");
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceRecordPanelCtrl', serviceRecordPanelCtrl);

function serviceRecordPanelCtrl($scope, ServiceRecordManager) {

    function activate() {
        $scope.recordingTime = ServiceRecordManager.recordingTime;
        $scope.recordingProperties = ServiceRecordManager.recordingProperties;
        $scope.serviceOptions = ServiceRecordManager.serviceOptions;
        $scope.loadingIndicator = ServiceRecordManager.loadingIndicator;
    }

    $scope.captureParameters = function () {
        ServiceRecordManager.captureParameters();
    };

    $scope.saveAndContinue = function () {
        ServiceRecordManager.saveAndContinue();
    };

    $scope.exit = function () {
        ServiceRecordManager.stopRecord(true);
    };

    $scope.saveAndExit = function () {
        ServiceRecordManager.saveAndExit();
    };
    
    $scope.saveAndPause = function () {
    	ServiceRecordManager.saveAndPause();
    	$scope.recordingProperties.isPaused = true;
    	$scope.recordingProperties.isPartial = true;
    };
    
    $scope.resumeRecord = function () {
    	ServiceRecordManager.resumeRecord();
    	$scope.recordingProperties.isPaused = false;
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceRecordDialogCtrl', serviceRecordDialogCtrl);

function serviceRecordDialogCtrl($scope, $mdDialog, serviceOptions, context, Logger, ServiceRecordManager, DocumentNavigator) {
    activate();

    function activate() {
        $scope.serviceOptions = serviceOptions;
        $scope.context = context;
        $scope.shouldRecordWithoutInstallation = true;
    }

    $scope.onBegin = function () {
        Logger.info("starting service record..");
        DocumentNavigator.goTop('slow');
        $mdDialog.hide(true);
        
        ServiceRecordManager.executeRecord(	$scope.serviceOptions,
        									$scope.context,
        									$scope.shouldTestInstallation,
        									$scope.shouldRecordWithoutInstallation);
    };
    
    $scope.onCancel = function () {
    	$mdDialog.cancel();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('SupportCtrl', supportCtrl);

function supportCtrl($scope, DataManager) {
    activate();

    function activate() {
        DataManager.setIsLoading(false);
    }
    
    $scope.search = function() {
    	window.location = 'https://auraplayer.zendesk.com/hc/en-us/search?query=' + $scope.searchTerm + '&commit=Search';
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller("LoginCtrl", loginCtrl);

function loginCtrl($scope, $window, $location, DataManager, ObjectUtils, LoginManager, AuthenticationManager, SystemPropertyManager, UserManager) {
    activate();

    function activate() {
    	if (angular.isDefined(UserManager.user.username)) {
    		$location.path('/');
    		return;
    	}
    	
        $scope.userInfo = {};
        $scope.focusInfo = {username: true};
        $scope.loadingIndicator = {isLoading: false, loadingText: "Authenticating..."};
        $scope.systemConfig = SystemPropertyManager.getCachedSystemConfig();
        DataManager.setIsLoading(false);
    }

    $scope.login = function () {
        var loginSecurityBypass = ObjectUtils.defaultValue(
            $scope.systemConfig.properties.LOGIN_SECURITY_BYPASS, false);

        if (loginSecurityBypass === "true") {
            performBypassedLogin();
        } else {
            $scope.dataLoading = true;
            $scope.loadingIndicator.isLoading = true;
            LoginManager.login($scope.userInfo.username, $scope.userInfo.password)
                .then(function (response) {
                    if (response.success) {
                        performLogin(response.data);
                    } else {
                        $scope.error = response.message;
                        $scope.loadingIndicator.isLoading = false;
                        DataManager.setIsLoading(false);
                    }
                }, function () {
                    DataManager.setIsLoading(false);
                    $scope.loadingIndicator.isLoading = false;
                });
        }
    };

    function performBypassedLogin() {
        performLogin({
        	name: "LoginBypass",
            role: "webuser"
        });
    }

    function performLogin(adminData) {
    	LoginManager.logout();
    	
        $scope.userInfo.role = adminData.role;
        AuthenticationManager.setCredentials($scope.userInfo);
        UserManager.setUser(adminData.name, adminData.role);
        $window.location.reload();
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('LogViewerCtrl', logViewerCtrl);

function logViewerCtrl($scope, $route, $timeout, logData, LogLevels, ThreadContexts, DataManager, LogManager, UserManager, StringUtils) {
    var logDataLines = [];

    function activate() {
    	$scope.user = UserManager.getUser();
        $scope.logLevels = LogLevels.values;
        $scope.logLevel = {value: LogLevels.default};
        $scope.logContexts = ThreadContexts.values;
        $scope.logContext = {value: ThreadContexts.default};
        $scope.loadingIndicator = {isLoading: false};
        $scope.logTopIndex = {value: 0};
        $scope.logFilter = {value: ""};

        initLogData(logData);
        initDynamicLogs();
        buildCrumbs();

        DataManager.setIsLoading(false);
        $timeout($scope.scrollToEnd, 200);
    }
    
    function escapeHtml(unsafe) {
        return unsafe
	        .replace(/&/g, "&amp;")
	        .replace(/</g, "&lt;")
	        .replace(/>/g, "&gt;")
	        .replace(/"/g, "&quot;")
	        .replace(/'/g, "&#039;");
    }

    function initLogData(logData) {
        $scope.logLines = [];

        if (StringUtils.isNotEmpty(logData)) {
            logDataLines = logData.split("<br>20");		// when we reach year>=2100 we might have a problem with this
        }

        for (var i = 0; i <= logDataLines.length; i++) {
            if (angular.isDefined(logDataLines[i]) && StringUtils.isNotEmpty(logDataLines[i].trim())) {
                var logLine = {
                    index: i + 1,
                    value: '20' + escapeHtml(logDataLines[i]).replace(/ /g, "&nbsp;").replace(/&lt;br&gt;/g, '<br/>')
                };
                $scope.logLines.push(logLine);
            }
        }
        
        return logDataLines.length;
    }

    function initDynamicLogs() {
        var DynamicLogs = function () {
            this.loadedLogs = angular.copy($scope.logLines);
            this.logCount = $scope.logLines.length;
        };

        DynamicLogs.prototype.getItemAtIndex = function (index) {
            return this.loadedLogs[index];
        };

        DynamicLogs.prototype.getLength = function () {
            return this.logCount;
        };

        $scope.dynamicLogs = new DynamicLogs();
    }

    function buildCrumbs() {
        $scope.logViewerCrumbs = [
            {title: "Admin", url: "#/adminManager"},
            {title: "Log Viewer", active: true}
        ];
    }

    /**************************
     * 		Common Filter 	  *
     **************************/

    function filterByKeyword(filterValue) {
        if (angular.isUndefined(filterValue)) {
            return;
        }

        $scope.dynamicLogs.loadedLogs = [];
        $scope.dynamicLogs.loadedLogs = _.filter($scope.logLines, function (logLine) {
            return logLine.value.toUpperCase().indexOf(filterValue.toUpperCase()) !== -1;
        });

        if (angular.isDefined($scope.logLevel.value) && !StringUtils.compareToIgnoreCase($scope.logLevel.value.value, "ANY")) {
            $scope.dynamicLogs.loadedLogs = _.filter($scope.dynamicLogs.loadedLogs, function (loadedLog) {
                return LogLevels.isSevereThan(getLogLineLevel(loadedLog.value), $scope.logLevel.value.value);
            });
        }
        
        if (angular.isDefined($scope.logContext.value) && !StringUtils.compareToIgnoreCase($scope.logContext.value.value, "ANY")) {
            $scope.dynamicLogs.loadedLogs = _.filter($scope.dynamicLogs.loadedLogs, function (loadedLog) {
                return loadedLog.value.toUpperCase().indexOf('|&NBSP;' + $scope.logContext.value.value) !== -1;
            });
        }

        $scope.dynamicLogs.logCount = $scope.dynamicLogs.loadedLogs.length;
    }

    /**************************
     * 		Log Level 	 	  *
     **************************/
    
    function getLogLineLevel(logLine) {
        return logLine.split('&nbsp;')[2];
    }
    
    $scope.inferLogLevel = function (logLine) {
        if (!(angular.isDefined(logLine) && StringUtils.isNotEmpty(logLine.value))) {
            return "";
        }
        var declaredLogLevel = logLine.value.trim().split('&nbsp;')[2];

        if (StringUtils.isEmpty(declaredLogLevel)) {
        	return guessLogLevel(logLine.value.trim()).toLowerCase();
        }
        
        return  isValidLogLevel(declaredLogLevel) ?
        		declaredLogLevel.toLowerCase() :
                guessLogLevel(logLine.value.trim()).toLowerCase();
    };

    function isValidLogLevel(logLevel) {
        return StringUtils.isNotEmpty(logLevel) &&
            (logLevel === 'TRACE' || logLevel === 'DEBUG' ||
            logLevel === 'INFO' || logLevel === 'WARN' || logLevel === 'ERROR');
    }

    function guessLogLevel(logLine) {
        if (logLine.startsWith("at ")) {
            return "ERROR";
        }
        return "";
    }
    
    function filterByLogLevel() {
        filterByKeyword($scope.logFilter.value);
    }
    
    /**************************
     * 		Context 	 	  *
     **************************/
    
    function filterByContext() {
        filterByKeyword($scope.logFilter.value);
    }
    
    /**************************
     * 		  Buttons 		  *
     **************************/
    
    $scope.scrollToBeginning = function () {
        $scope.logTopIndex.value = 0;
    };

    $scope.scrollToEnd = function () {
        $scope.logTopIndex.value = $scope.dynamicLogs.loadedLogs.length;
    };
    
    $scope.refresh = function () {
        LogManager.get($scope.loadingIndicator).then(function (logData) {
            var count = initLogData(logData);
            initDynamicLogs();
            filterByKeyword($scope.logFilter.value);
            $timeout($scope.scrollToEnd, 200);
        });
    };
    
    $scope.rotate = function () {
        LogManager.rotate($scope.loadingIndicator).then($route.reload);
    };
    
    
    activate();
    
    $scope.$watch("logLevel.value", filterByLogLevel);
    $scope.$watch("logContext.value", filterByContext);
    $scope.$watch("logFilter.value", filterByKeyword);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('UsernamePasswordDialogCtrl', usernamePasswordDialogCtrl);

function usernamePasswordDialogCtrl($scope, $mdDialog, title, comment, username, password) {
    activate();

    function activate() {
        $scope.title = title;
        $scope.comment = comment;
        $scope.credentials = {
        	username: username,
        	password: password
        };
    }

    $scope.onConfirm = function () {
        $mdDialog.hide($scope.credentials);
    };
    
    $scope.onCancel = function () {
    	$mdDialog.cancel();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceTesterCtrl', serviceTesterCtrl);

function serviceTesterCtrl(	$scope, $routeParams, service, licenseDetails, ServiceManager, VbcsManager, HtmlServiceUtils,
							HttpHandler, HttpMethods, XmlFormatter, ServiceExecutor, DialogManager, ToastManager, NavigationManager, DocumentNavigator,
							SystemPropertyManager, DataManager, UserManager, HotkeyManager, CollectionUtils, ObjectUtils) {
	
	function activate() {
        $scope.testServiceResultTitle = '';
        $scope.loadingIndicator = {isLoading: false, isLoaded: false, loadingText: 'Executing service...', block: false};
        $scope.loadingSaveResponse = {isLoading: false, loadingText: 'Setting response as Mock..'};
        $scope.xmlResult = '';
        $scope.jsonResult = '';
        $scope.serviceId = $routeParams.serviceId;
        $scope.service = service;
        $scope.backupInputParams = angular.copy($scope.service.inputParams);
        $scope.httpMethods = HttpMethods.values;
        $scope.systemProperties = SystemPropertyManager.systemConfig.properties;
        
        $scope.postInput = {activated: false, example: undefined, value: ''};
        
        initService();
        initInputParamTableConfig();
        initTestServiceRequestInfo();
        initLoopColoring();
        
        buildCrumbs();
        initHotkeys();
        buildCollapseManager();
        
        DataManager.setIsLoading(false);
    }
	
    function initService() {
        $scope.service.inputParams = _.filter($scope.service.inputParams, function (inputParam) {
            return ObjectUtils.isNotEmpty(inputParam);
        });
    }

    function initInputParamTableConfig() {
        $scope.inputParamTableConfig = {
            label: {editable: false},
            visible: {visible: true, disabled: true},
            actions: {visible: false}
        };
    }

    function initTestServiceRequestInfo() {
        $scope.testServiceRequestInfo = {
            httpMethod: HttpMethods.default,
            showAsJson: $scope.service.isJson,
            handlePopups: $scope.service.isHandlePopups,
            showQuery: false,
            numOfRowsInTable: $scope.service.numOfRowsInTable,
            useLabelsAsKeys: $scope.service.useLabelsAsKeys
        };
    }
    
    function initLoopColoring() {
		if ($scope.service.hasInputList) {
			HtmlServiceUtils.markLoopParameters($scope.service).then(function(scenarioItems) {
	        	$scope.scenarioItems = scenarioItems;
	        });
		}
	}

    function buildCrumbs() {
        $scope.testServiceCrumbs = [
            {title: 'Service Manager', url: '#/'},
            {title: 'Service Tester'},
            {title: $scope.service.name, active: true}
        ];
    }

    function initHotkeys() {
        var testServiceHotkeys = [];
        testServiceHotkeys.push(HotkeyManager.buildHotkey('alt+t', 'Test Service', $scope.runTest));

        HotkeyManager.bindHotkeys($scope, testServiceHotkeys);
    }

    function buildCollapseManager() {
        $scope.collapseManager = {};
        handleDefaultCollapse();
    }
    
    $scope.resetToDefault = function () {
        angular.copy($scope.backupInputParams, $scope.service.inputParams);
        $scope.$broadcast('inputParamUpdate', $scope.service.inputParams);
    };
    
    function validateNoTicketReferences() {
    	return !$scope.service.inputParams.some(function(inputParam) {
    		return angular.isDefined(inputParam.paramValue) && inputParam.paramValue.indexOf('${ticket.') !== -1;
    	});
    }

    $scope.runTest = function () {
    	if (!validateNoTicketReferences()) {
    		ToastManager.showWarning('${ticket.*} references must be replaced with values before testing.', 'Service Tester');
    		return;
    	}
    	
        $scope.testServiceResultTitle = 'Getting service result for ' + $scope.service.name + '...';
        handleCollapse(false, false, false);
        
        $scope.xmlResult = '';
        $scope.jsonResult = '';

        ServiceExecutor.execute($scope.serviceId, 
        						$scope.postInput.activated ? JSON.parse($scope.postInput.value) : $scope.query,
        						$scope.testServiceRequestInfo.httpMethod.value,
        						$scope.loadingIndicator, 'ServiceTester').then(afterRunTest);
    };
    
    function afterRunTest(response) {
    	$scope.testServiceResponse = response;
        $scope.testServiceResultTitle = 'Service test result for ' + $scope.service.name;

        if ($scope.testServiceRequestInfo.showAsJson) {
            $scope.jsonResult = angular.toJson(response, true);
        } else {
            $scope.xmlResult = XmlFormatter.format(response);
        }
        DocumentNavigator.goBottom('slow');
    }
    
    $scope.calculateArraySize = function () {
    	try {
    		return $scope.testServiceResponse.Response[$scope.serviceId + 'TableArray'][$scope.serviceId + 'ArrayItem'].length + 'Array Items';
    	} catch (e) {
    		return '';
    	}
    };
    
    $scope.saveAsMock = function () {
    	ServiceManager.setMock($scope.serviceId, $scope.testServiceResponse, $scope.loadingSaveResponse);
    };
    
    $scope.saveAsVbcs = function () {
    	var resource = {
    		name: $scope.serviceId,
    		response: JSON.stringify($scope.testServiceResponse),
    		createdBy: UserManager.getUser().username
    	};
    	VbcsManager.update(resource, $scope.loadingSaveResponse).then(function() {
    		NavigationManager.goTo('integrationManager/vbcs');
    	});
    };

    function generateQuery() {
        $scope.query = '?';

        if ($scope.service.inputParams && $scope.service.inputParams.length > 0) {
        	$scope.service.inputParams.forEach(function(inputParam) {
        		if (inputParam.visible) {
        			$scope.query += getInputParamKey(inputParam) + '=' +
                    encodeURIComponent(angular.isDefined(inputParam.paramValue) && inputParam != null ? inputParam.paramValue : '') + '&';
        		}
        	});
        }

        $scope.query += 'numOfRowsInTable=' + $scope.testServiceRequestInfo.numOfRowsInTable +
            '&json=' + $scope.testServiceRequestInfo.showAsJson +
            '&handlePopups=' + $scope.testServiceRequestInfo.handlePopups +
            '&useLabelsAsKeys=' + $scope.testServiceRequestInfo.useLabelsAsKeys;
    }

    function getInputParamKey(inputParam) {
        return $scope.service.useLabelsAsKeys ? inputParam.paramLabel : inputParam.id.name;
    }

    $scope.isTestCaseManagementPrivileged = function () {
        return licenseDetails.testManagement;
    };

    function handleDefaultCollapse() {
        handleCollapse(true, true, false);
    }

    function handleCollapse(collapseServiceDetails, collapseInputParameters, collapseAdvancedSettings) {
        $scope.collapseManager.collapseServiceDetails = collapseServiceDetails;
        $scope.collapseManager.collapseInputParameters = collapseInputParameters;
        $scope.collapseManager.collapseAdvancedSettings = collapseAdvancedSettings;
    }
    
    $scope.onHttpMethodChange = function (constant) {
    	if (constant.value === 'GET') {
    		$scope.postInput.activated = false;
    	}
    };
    
    $scope.resetPostInput = function () {
    	$scope.postInput.value = $scope.postInput.example;
    };
    
    $scope.switchInputMethod = function () {
    	if (!$scope.postInput.activated) {
    		$scope.testServiceRequestInfo.httpMethod = HttpMethods.getByValue('POST');
    		$scope.postInput.value = $scope.postInput.example = ServiceManager.generateInputJson(service, $scope.scenarioItems);
    		$scope.postInput.activated = true;
    		
    	} else {
    		if ($scope.postInput.value !== $scope.postInput.example) {
    			DialogManager.openConfirmationDialog({
                    title: 'Switch to Query',
                    description: 'Your changes in the POST input will be lost. Continue?',
                    onConfirmCallback: function() {
                    	$scope.postInput.activated = false;
                    }
                });
    		} else {
    			$scope.postInput.activated = false;
    		}
    	}
    };

    $scope.$watch('service.inputParams', generateQuery, true);
    $scope.$watch('testServiceRequestInfo', generateQuery, true);

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceSelectorCtrl', serviceSelectorCtrl);

function serviceSelectorCtrl($scope, ServiceManager, ServiceRecordManager, ServiceCacheManager, HtmlServiceUtils, DbServiceUtils,
							 CollectionUtils, ObjectUtils) {
    activate();

    function activate() {
        $scope.context = ObjectUtils.defaultValue($scope.context, "services");
        initServices();

        if ($scope.context === 'testCases') {
            addServiceCreationOption();
        }
    }

    function initServices() {
    	$scope.services = ServiceCacheManager.getServices();
    	$scope.services = DbServiceUtils.filterNoSingleOutput($scope.services);
    	$scope.services = $scope.context === 'JsService' ? $scope.services : HtmlServiceUtils.filterNoLoop($scope.services);
    	
        if ($scope.context === 'testCases') {
            addServiceCreationOption();
        }
    }

    function addServiceCreationOption() {
        var serviceCreationOption = {
            isCreateOption: true,
            name: "Record new TestCase.."
        };

        if (!CollectionUtils.containsByProperty($scope.services, true, "isCreateOption")) {
            if (CollectionUtils.isEmpty($scope.services)) {
                $scope.services = [];
            }
            $scope.services.push(serviceCreationOption);
        }
    }

    $scope.handleServiceSelect = function (service) {
        if (angular.isDefined(service) && service.isCreateOption) {
            handleServiceCreatorOption();
        }

        if (angular.isDefined($scope.serviceSelectCallback)) {
            $scope.serviceSelectCallback({service: service});
        }
    };

    function handleServiceCreatorOption() {
        ServiceManager.showServiceRecorderDialog({},
            ServiceRecordManager.toggleRecordPanel, "testCase").then(function (recordEngageSuccess) {
            if (!recordEngageSuccess) {
                $scope.service.properties = {};
            }
        });
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceOutputParameterTableRowCtrl', serviceOutputParameterTableRowCtrl);

function serviceOutputParameterTableRowCtrl($scope, ParameterValidationUtils, StringUtils) {

    $scope.present = function (service, outputParam) {
    	var $ = [];
    	
    	if (outputParam.fromInput === true) {
    		$.push('From input');
    	}
    	
        var validation = ParameterValidationUtils.getPresentedValue(service, outputParam, function (service, outputParam) {
            return StringUtils.isEmpty(outputParam.testedValue) ? "" : " '{0}'".format(outputParam.testedValue);
        });
        if (StringUtils.isNotEmpty(validation)) {
        	$.push(validation);
        }
        
        return $.join(', ');
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceOutputParameterTableCtrl', serviceOutputParameterTableCtrl);

function serviceOutputParameterTableCtrl($scope, $mdDialog, ServiceConverter, SortableUtils, CollectionUtils, TableUtils,
                                         ObjectUtils, StringUtils, ActionBuilder, ToastManager, $timeout) {
    
    function activate() {
    	$scope.mode = ObjectUtils.defaultValue($scope.mode, {edit: true});
    	$scope.quantityReadOnly = ObjectUtils.defaultValue($scope.quantityReadOnly, false);
    	$scope.isBatch = false;
    	
        initTableConfig();
        initOutputParams();
        
        dynamicallyLoadOutputParams();
    }
    
    /*******************************
     * dynamicallyLoadOutputParams *
     *******************************/
    
    var MIN_NUM_OF_PARAMS_FOR_DYNAMIC_LOAD = 50;
    var PARAMS_TO_LOAD_PER_ITERATION = 3;
    var ITERATIONS_INTERVAL = 2;
    var backedUpParams;
    var nextIndexToLoad = 0;
    
    function dynamicallyLoadOutputParams() {
    	if ($scope.service.outputParams.length < MIN_NUM_OF_PARAMS_FOR_DYNAMIC_LOAD) {
    		return;
    	}
    	
    	backedUpParams = $scope.service.outputParams;
        $scope.service.outputParams = [];
        populateNext();
    }
    
    function populateNext() {
    	Array.prototype.push.apply($scope.service.outputParams, backedUpParams.slice(nextIndexToLoad, nextIndexToLoad + PARAMS_TO_LOAD_PER_ITERATION));
    	nextIndexToLoad = nextIndexToLoad + PARAMS_TO_LOAD_PER_ITERATION;
    	if (nextIndexToLoad < backedUpParams.length) {
    		$timeout(populateNext, ITERATIONS_INTERVAL);
    	}
    }
    
    /*******************************
     * Batch actions ***************
     *******************************/
    
    $scope.selectForDeleteMany = function() {
    	$scope.isBatch = true;
    };
    
    $scope.deleteMany = function() {
    	var deleteCount = 0;
    	for (var i = 0; i < $scope.service.outputParams.length;) {
    		if ($scope.service.outputParams[i]._isSelected && !$scope.service.outputParams[i].isSpecial) {
    			$scope.service.outputParams.splice(i, 1);
    			deleteCount++;
    		} else {
    			i++;
    		}
    	}
    	ToastManager.showInfo(deleteCount + ' output parameters deleted.');
    	$scope.isBatch = false;
    };
    
    $scope.cancelSelect = function() {
    	$scope.isBatch = false;
    	$scope.service.outputParams.forEach(function(outputParam) {
    		outputParam._isSelected = false;
    	});
    };
    
    /*******************************/

    function initOutputParams() {
    	if ($scope.service.type !== 'DB' || !$scope.service.isSingleOutput) {		
    		ServiceConverter.add3SpecialOutputParamsIfMissing($scope.service.outputParams, $scope.service.name);		
    	}
    	
        if (CollectionUtils.isNotEmpty($scope.service.outputParams)) {
            $scope.service.outputParams.forEach(initOutputParam);

            handleAllVisibleOption();
            handleOnlyMultiRecordOption();
        }
    }

    function initOutputParam(outputParam) {
        outputParam.createdBy = $scope.service.createdBy;
        outputParam.edited = false;
        outputParam.isNew = false;
        outputParam.paramLabel = StringUtils.defaultValue(outputParam.paramLabel, outputParam.id.name);
        outputParam.isSpecial = ObjectUtils.defaultValue(outputParam.isSpecial, false);
    }

    function handleAllVisibleOption() {
        if ($scope.tableConfig.dataConfig.makeAllVisibleByDefault) {
            $scope.service.outputParams.forEach(function (outputParam) {
                if (angular.isUndefined(outputParam.visible)) {
                    outputParam.visible = true;
                }
            });
        }
    }

    function handleOnlyMultiRecordOption() {
        if ($scope.tableConfig.dataConfig.showOnlyMultiRecordParams) {
            $scope.service.outputParams = _.filter($scope.service.outputParams,
                function (outputParam) {
                    return outputParam.inTable;
                });
        }
    }

    function initTableConfig() {
        var defaultTableConfig = {
            move: {visible: true, disabled: false},
            visible: {disabled: false, visible: true},
            name: {disabled: false},
            label: {disabled: false},
            multiRecord: {visible: true, disabled: false},
            actions: {visible: true, disabled: false},
            dataConfig: {showOnlyMultiRecordParams: false},
            addButton: {visible: true},
            batchRemove: {visible: false}
        };

        $scope.tableConfig = TableUtils.mergeColumnConfig(defaultTableConfig, $scope.tableConfig);
        $scope.tableSortingOptions = SortableUtils.getTableSortingOptions();
    }
    
    $scope.openInlineOutputParamEditor = function () {
        $scope.newParam = {
            edited: true,
            isNew: true,
            visible: true
        };
        $scope.newParamDestination = $scope.service.outputParams;
    };
    
    $scope.saveInlineParam = function () {
    	if (CollectionUtils.isEmpty($scope.service.outputParams)) {
            $scope.service.outputParams = [];
        }
    	$scope.service.outputParams.splice($scope.service.outputParams.length - 3, 0, $scope.newParam);
    	$scope.newParam = undefined;
    };
    
    $scope.cancelInlineParam = function () {
    	$scope.newParam = undefined;
    };
    
    $scope.deleteOutputParam = function (index) {
    	$scope.service.outputParams.splice(index, 1);
    };

    $scope.configureOutputParam = function (outputParam) {
        $mdDialog.show({
            controller: 'OutputParameterConfigDialogCtrl',
            templateUrl: 'app/modules/serviceManager/views/managers/service/parameters/outputParameterConfigDialog.html',
            clickOutsideToClose: true,
            locals: {
                mode: $scope.mode,
                service: $scope.service,
                currentOutputParam: outputParam
            },
            bindToController: true
        });
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceManagerCtrl', serviceManagerCtrl);

function serviceManagerCtrl($scope, $window, $location, $mdDialog, $q, services, SystemPropertyManager, licenseDetails, CollectionUtils, EntityUtils,
                            ServiceRecordManager, ToastManager, ServiceManager, ServiceCacheManager, UserManager, ServiceFactory, DialogManager,
                            RecordingsManager, DataManager, Permissions, HotkeyManager,
                            LicenseManager, StringUtils, PromiseUtils) {

	function activate() {
        DataManager.setIsLoading(false);
        $scope.loadingIndicator = {isLoading: false};
        $scope.systemProperties = SystemPropertyManager.systemConfig.properties;
        $scope.services = services;
        $scope.licenseDetails = licenseDetails;

        initGroupActions();
        initHotkeys();
        LicenseManager.validateServiceLimits($scope.services);
    }

    function initGroupActions() {
        $scope.serviceManagementGroupActions = [
            {
                name: "Activate",
                loadingIndicator: $scope.loadingIndicator,
                groupLoadingText: "Activating services...",
                map: EntityUtils.nameReducer,
                callback: activateServices
            },
            {
                name: "Disable",
                loadingIndicator: $scope.loadingIndicator,
                groupLoadingText: "Disabling services...",
                map: EntityUtils.nameReducer,
                callback: disableServices
            },
            {name: "Backup", callback: handleBackup, map: EntityUtils.nameReducer},
            {name: "Print", callback: handlePrint, isGlobalAction: true},
            {
                name: "Delete",
                loadingIndicator: $scope.loadingIndicator,
                groupLoadingText: "Deleting services...",
                map: EntityUtils.nameReducer,
                callback: deleteServices
            }];
    }
    
    function initHotkeys() {
        var hotkeys = [];

        hotkeys.push(HotkeyManager.buildHotkey('alt+n', 'Record new service', function () {
            if ($scope.isServiceManagementPrivileged) {
                $scope.recordNewService();
            }
        }));

        HotkeyManager.bindHotkeys($scope, hotkeys);
    }
    
    function enableOrDisableServices(serviceNames, isEnable) {
    	var user = UserManager.getUsername();
    	return ServiceManager.enableOrDisable(serviceNames, $scope.loadingIndicator, isEnable).then(function (actionedServiceNames) {
    		if (actionedServiceNames.length > 0) {
    			ToastManager.showSuccess((actionedServiceNames.length > 1 ? actionedServiceNames.length + ' services' : 'Service ' + actionedServiceNames[0]) + (isEnable ? ' enabled.' : ' disabled.'));
    		}
    		
    		actionedServiceNames.forEach(function(actionedServiceName) {
	    	    var service = CollectionUtils.findByProperty($scope.services, actionedServiceName, 'name');
	    	    service.isEnabled = isEnable;
	    	    service.createdBy = user;
    		});
    		LicenseManager.validateServiceLimits($scope.services);
        });
    }
    
    function activateServices(serviceNames) {
    	return enableOrDisableServices(serviceNames, true);
    }

    function disableServices(serviceNames) {
    	return enableOrDisableServices(serviceNames, false);
    }

    function handleBackup(services) {
        ServiceManager.backup(services);
    }

    function handlePrint() {
        $window.print();
    }
    
    function checkForceDelete(event) {
    	var isForceDelete = event.shiftKey;
    	
    	if (isForceDelete) {
    		var deferred = $q.defer();
    		DialogManager.openConfirmationDialog({
                title: 'Force Delete',
                description: 'Services will be deleted even if they are in use. Continue?',
                onConfirmCallback: function() {
                	deferred.resolve(true);
                }
            });
    		return deferred.promise;
    	} else {
    		return PromiseUtils.emptyPromise();
    	}
    }
    
    function deleteServices(serviceNames, event) {
    	var permittedServiceNames = [];
    	
    	serviceNames.forEach(function(serviceName){
    		var service = CollectionUtils.findByProperty($scope.services, serviceName, 'name');
    		if (Permissions.checkEntityAndToast(service)) {
    			permittedServiceNames.push(serviceName);
        	}
    	});
    	
    	if (permittedServiceNames.length === 0) {
    		return PromiseUtils.emptyPromise([]);
    	}
    	
    	checkForceDelete(event).then(function(isForceDelete) {
    		ServiceManager.delete(permittedServiceNames, isForceDelete, $scope.loadingIndicator).then(function (deletedServices) {
            	deletedServices.forEach(function(deletedService) {
            		$scope.services = CollectionUtils.removeByProperty($scope.services, 'name', deletedService);
            	});
            });
    	});
    }
    
    $scope.uploadRecording = function (orpFile) {
    	if (LicenseManager.isTotalServicesLimitReached($scope.licenseDetails, $scope.services.length)) {
    		return;
    	}
    	
        RecordingsManager.uploadAndGet(orpFile, $scope.loadingIndicator).then(function (fetchedRecordingFile) {
        	if (Object.keys(fetchedRecordingFile).length === 0) {
        		ToastManager.showError('Parsing failure, see log for more details.', 'Parse recording');
        		return;
        	}
            ServiceCacheManager.cacheContextService(ServiceFactory.buildBaseService(fetchedRecordingFile));
            $location.path('/serviceEditor/new/' + extractServiceName(orpFile));
        });
    };

    function extractServiceName(orpFile) {
        return angular.isDefined(orpFile) && StringUtils.isNotEmpty(orpFile.name) ?
            orpFile.name.split(".")[0] : "";
    }

    $scope.recordNewService = function (service) {
    	if (Permissions.blockOperator() || LicenseManager.isTotalServicesLimitReached($scope.licenseDetails, $scope.services.length)) {
    		return;
    	}
    	
        ServiceManager.showServiceRecorderDialog(service,
            ServiceRecordManager.toggleRecordPanel);
    };
    
    $scope.openHtmlInstructions = function () {
    	DialogManager.openInfoDialog({
            title: 'HTML Services',
            description: 'Record your scenario using Selenium IDE, and use the <i>"upload"</i> button on the services page to import it.<br/>' +
            			 'A list of Selenium IDE commands supported by your ServiceManager is available ' +
            			 '<a href="/ServiceManager/resources/docs/HtmlCommands.htm" target="_blank">here</a>.'
        });
    };
    
    $scope.createDbService = function () {
    	if (Permissions.blockOperator() || LicenseManager.isTotalServicesLimitReached($scope.licenseDetails, $scope.services.length)) {
    		return;
    	}
    	
    	var service = ServiceFactory.buildDbService();
        ServiceCacheManager.cacheContextService(service);
        $location.path('/serviceEditor/new/context/' + service.name);
    };
    
    $scope.createJsService = function () {
    	if (Permissions.blockOperator() || LicenseManager.isTotalServicesLimitReached($scope.licenseDetails, $scope.services.length)) {
    		return;
    	}
    	
    	var service = ServiceFactory.buildJsService();
        ServiceCacheManager.cacheContextService(service);
        $location.path('/serviceEditor/new/context/' + service.name);
    };
    
    $scope.createTicketService = function() {
    	if (Permissions.blockOperator() || LicenseManager.isTotalServicesLimitReached($scope.licenseDetails, $scope.services.length)) {
    		return;
    	}
    	
    	ServiceCacheManager.cacheServices(services);
    	
    	$mdDialog.show({
    		controller: 'ServiceSelectorDialogCtrl',
    		templateUrl: 'app/modules/auraTester/views/managers/testCase/serviceSelectorDialog.html',
    		clickOutsideToClose: false,
			bindToController: true,
			locals: {
				title: 'Select login service',
				context: 'services'
    		}
		}).then(function (serviceConstant) {
			ServiceManager.generateTicketService(serviceConstant.properties.name, $scope.loadingIndicator).then(function (jsService) {
				var service = ServiceFactory.buildJsService();
				service.name = serviceConstant.properties.name + 'Ticket';
				service.command = jsService.command;
				service.inputParams = jsService.inputParams;
				service.useLabelsAsKeys = jsService.useLabelsAsKeys;
		        ServiceCacheManager.cacheContextService(service);
		        $location.path('/serviceEditor/new/context/' + service.name);
            });
		});
    };
    
    $scope.isServiceManagementPrivileged = function () {
        return angular.isDefined($scope.licenseDetails) &&
            $scope.licenseDetails.serviceManagement;
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceInputParameterTableCtrl', serviceInputParameterTableCtrl);

function serviceInputParameterTableCtrl($scope, PromiseUtils, DataTypes, ToastManager, DataTypeHandler, SortableUtils,
										StringUtils, TableUtils, CollectionUtils, ObjectUtils) {
    var inputParameterBackup = [];

    activate();

    function activate() {
    	$scope.mode = ObjectUtils.defaultValue($scope.mode, {test: true});
    	$scope.quantityReadOnly = ObjectUtils.defaultValue($scope.quantityReadOnly, false);
    	
        initInputParams();
        backupInputParameters();
        initTableConfig();
    }

    function backupInputParameters() {
        angular.merge(inputParameterBackup, $scope.service.inputParams);
    }

    function initInputParams() {
        if (CollectionUtils.isNotEmpty($scope.service.inputParams)) {
            $scope.service.inputParams.forEach(initInputParam);
        }
    }

    function initInputParam(inputParam) {
        inputParam.edited = false;
        inputParam.isCustom = ObjectUtils.defaultValue(inputParam.isCustom, false);
        inputParam.paramLabel = StringUtils.defaultValue(inputParam.paramLabel, inputParam.id.name);
        inputParam.dataTypeInfo = {
            dataType: DataTypes.getByValue(
                DataTypeHandler.getDataTypeValue(inputParam.id.name, inputParam.dataTypeInfo, $scope.systemProperties))
        };
    }

    function initTableConfig() {
        var defaultTableConfig = {
            move: {visible: true, disabled: false},
            visible: {visible: true, disabled: false},
            name: {disabled: false},
            label: {editable: true, disabled: false},
            defaultValue: {disabled: false},
            actions: {visible: true, disabled: false},
            addButton: {visible: true}
        };

        $scope.tableConfig = TableUtils.mergeColumnConfig(defaultTableConfig, $scope.tableConfig);
        $scope.tableSortingOptions = SortableUtils.getTableSortingOptions();
    }

    $scope.moveToOutputParams = function (inputParam) {
        if (CollectionUtils.findByProperty($scope.service.outputParams, inputParam.id.name, 'id.name')) {
            ToastManager.showError(inputParam.id.name + ' is already an output parameter!');
        } else {
            var newOutputParam = angular.copy(inputParam);
            newOutputParam.inTable = false;
            newOutputParam.editable = true;
            newOutputParam.isNew = true;
            $scope.service.outputParams.splice($scope.service.outputParams.length - 3, 0, newOutputParam);
            ToastManager.showInfo(inputParam.id.name + ' copied.', 'Copy to Ouput');
        }
    };
    
    $scope.openInlineInputParamEditor = function () {
        $scope.newParam = {
            edited: true,
            isCustom: true,
            visible: true
        };
        $scope.newParamDestination = $scope.service.inputParams;
    };
    
    $scope.saveInlineParam = function () {
    	if (CollectionUtils.isEmpty($scope.service.inputParams)) {
            $scope.service.inputParams = [];
        }
    	$scope.service.inputParams.push($scope.newParam);
    	$scope.newParam = undefined;
    };
    
    $scope.cancelInlineParam = function () {
    	$scope.newParam = undefined;
    };
    
    $scope.deleteInputParam = function (index) {
    	$scope.service.inputParams.splice(index, 1);
    };

    $scope.resetInputParameterValues = function () {
        $scope.service.inputParams = [];
        angular.merge($scope.service.inputParams, inputParameterBackup);
    };

    $scope.clearInputParameterValues = function () {
        resetInputParamsTo('');
    };

    $scope.resetInputParametersToFormDefaultValues = function () {
        resetInputParamsTo('AP_FORM_DEFAULT');
    };

    function resetInputParamsTo(resetValue) {
        $scope.service.inputParams.forEach(function (inputParam) {
            inputParam.paramValue = resetValue;
        });
    }

    function handleInputParamUpdate(inputParamUpdateEvent, updatedInputParams) {
        $scope.service.inputParams = updatedInputParams;
        initInputParams();
    }

    $scope.$on('inputParamUpdate', handleInputParamUpdate);
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceGridCtrl', serviceGridCtrl);

function serviceGridCtrl($scope, $route, $location, uiGridConstants, ActionBuilder, ServiceManager, ServiceRecordManager, ToastManager, Permissions, ObjectUtils, LicenseManager) {
    activate();

    function activate() {
        initDefaults();
        initColumnVisibleConfig();
        initColumnDefs();
        initColumnFilter();
        
        if (angular.isDefined($scope.services)) {
        	initServices();
        	initServicesActions();
        }
    }

    function initDefaults() {
        $scope.readOnly = ObjectUtils.defaultValue($scope.readOnly, false);
        $scope.useSelection = ObjectUtils.defaultValue($scope.useSelection, true);
        $scope.enablePagination = ObjectUtils.defaultValue($scope.enablePagination, true);
        $scope.enableSelectAll = ObjectUtils.defaultValue($scope.enableSelectAll, true);
        $scope.enableClickableNames = ObjectUtils.defaultValue($scope.enableClickableNames, true);
    }
    
    function initServices() {
        $scope.services.forEach(function (service) {
            service.editingName = false;
        });
    }

    function initServicesActions() {
        if (!$scope.readOnly || angular.isDefined($scope.actions)) {
            $scope.services.forEach(function (service) {
                initServiceActions(service);
            });
        }
    }

    function initServiceActions(service) {
        if (angular.isUndefined(service)) {
            return;
        }
        if (angular.isDefined($scope.actions)) {
        	service.actionsData = {actions: $scope.actions};
        	return;
        }
        
        var actions = [];
        actions.push(ActionBuilder.buildLink('Details', 'btn-purple', '#/serviceEditor/details/' + service.name, false, 'clip-list-3'));
        actions.push(ActionBuilder.buildLink('Edit', 'btn-blue', '#/serviceEditor/edit/' + service.name, false, 'clip-pencil-3'));
        actions.push(ActionBuilder.buildLink('Test', 'btn-teal', '#/serviceTester/' + service.name, false, 'fa fa-check'));
        actions.push(ActionBuilder.buildLink('Duplicate', 'btn-green', '#/serviceEditor/duplicate/' + service.name, false, 'fa fa-copy', true, true));
        actions.push(ActionBuilder.build('Record', 'btn-red', recordAgain, false, 'fa fa-circle', true, true));
        service.actionsData = {actions: actions};
    }
    
    function initColumnVisibleConfig() {
        $scope.columnVisibleConfig = {
            formUrl: false
        };

        var columns = $scope.visibleColumns;
        if (angular.isDefined(columns)) {
        	if (!angular.isArray(columns)) {
        		columns = [columns];
        	}
            columns.forEach(function (column) {
                $scope.columnVisibleConfig[column] = true;
            });
        } else {
            $scope.columnVisibleConfig = {
                name: true,
                linkedApps: true,
                fileName: false,
                enabled: true,
                lastModified: true,
                createdBy: true,
                formUrl: false
            };
        }
    }

    function initColumnDefs() {
    	var nameCellTemplate = 	angular.isDefined($scope.nameCellTemplate) ? $scope.nameCellTemplate :
    							$scope.enableClickableNames ? "<a class='aura-grid-column' ng-href='#/serviceEditor/details/{{COL_FIELD}}'>{{COL_FIELD}}</a>" :
    							undefined;
    									
        $scope.columnDefs = [
            {
                name: 'name',
                displayName: 'Service Name',
                visible: isColumnVisible('name'),
                enableFiltering: false,
                width: '*',
                cellTemplate: nameCellTemplate
            },
            {
                name: 'apps',
                displayName: 'Linked Applications',
                visible: isColumnVisible('linkedApps'),
                enableFiltering: false,
                width: '*',
                cellTemplate: "<div>{{COL_FIELD.join(', ')}}</div>"
            },
            {
                name: 'fileName',
                displayName: 'Service Workflow',
                visible: isColumnVisible('fileName'),
                enableFiltering: false,
                width: '*'
            },
            {
            	name: 'formUrl',
                displayName: 'Form Url',
                visible: isColumnVisible('formUrl'),
                enableFiltering: false,
                width: '40%',
            },
            { 	
            	name: 'type', 
            	field: 'type',
            	width: '100',
            	filter: { selectOptions: [{ value: 'forms', label: 'Forms' },
  	                                      { value: 'html', label: 'HTML' },
  	                                      { value: 'db', label: 'DB' },
  	                                      { value: 'js', label: 'JS' }],
  	                      type: uiGridConstants.filter.SELECT }
  			},
            {
                name: 'isEnabled',
                displayName: 'Status',
                visible: isColumnVisible('enabled'),
                width: '70',
            	filter: { selectOptions: [{ value: 'true', label: 'Active' },
  	                                      { value: 'false', label: 'Disabled' }],
  	                      type: uiGridConstants.filter.SELECT },
                cellTemplate: "<div class='aura-grid-column'>{{COL_FIELD ? 'Active' : 'Disabled'}}</div>"
            },
            {
                name: 'lastModified',
                displayName: 'Modified',
                visible: isColumnVisible('lastModified'),
                enableFiltering: false,
                cellFilter: 'simpleDate',
                sort: {
                	ignoreSort: $scope.enableDraggable === true,
                    direction: uiGridConstants.DESC,
                    priority: 1
                },
                width: '140'
            },
            {
                name: 'createdBy',
                displayName: 'Created By',
                visible: isColumnVisible('createdBy'),
                enableFiltering: false,
                width: '120'
            }
        ];

        if (!$scope.readOnly || angular.isDefined($scope.actions)) {
            $scope.columnDefs.push({
                name: 'actionData',
                displayName: 'Actions',
                enableSorting: false,
                enableColumnMenu: false,
                enableFiltering: false,
                width: '205',
                cellTemplate: "<ap-action-panel action-data='row.entity.actionsData' action-context='row.entity'></ap-action-panel>"
            });
        }
    }

    function isColumnVisible(column) {
        return angular.isDefined($scope.columnVisibleConfig[column]) &&
            $scope.columnVisibleConfig[column];
    }

    function initColumnFilter() {
        $scope.filteredColumns = ['name', 'apps', 'createdBy'];
    }
    
    function recordAgain(service) {
    	if (Permissions.blockOperator()) {
    		return;
    	}
    	if (angular.isDefined($scope.licenseDetails) && LicenseManager.isTotalServicesLimitReached($scope.licenseDetails, $scope.services.length)) {
    		return;
    	}
    	if (service.type !== 'Forms') {
    		ToastManager.showError('Not supported for ' + service.type + ' services!', 'Record again');
    		return;
    	}
    	
        ServiceManager.showServiceRecorderDialog(service, ServiceRecordManager.toggleRecordPanel);
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('RecordingsManagerCtrl', recordingsManagerCtrl);

function recordingsManagerCtrl($scope, $route, recordings, numOfServices, licenseDetails, SystemPropertyManager, ToastManager,
                            StringUtils, CollectionUtils, RecordingsManager, DataManager) {

	function activate() {
        $scope.loadingIndicator = {isLoading: false};
        $scope.recordings = recordings;
        $scope.numOfServices = numOfServices;
        $scope.licenseDetails = licenseDetails;
        $scope.systemProperties = SystemPropertyManager.systemConfig.properties;
        DataManager.setIsLoading(false);

        initGroupActions();
        buildCrumbs();
    }

    function initGroupActions() {
        $scope.fileManagementGroupActions = [
            {name: 'Download', callback: downloadRecording, map: getFileName, reduce: concatFiles},
            {
                name: 'Delete',
                loadingIndicator: $scope.loadingIndicator,
                groupLoadingText: 'Deleting files...',
                callback: deleteRecording,
                onFinishCallback: afterDeleteRecording
            }
        ];
    }

    function buildCrumbs() {
        $scope.recordingsManagerCrumbs = [
            {title: 'Admin', url: '#/adminManager'},
            {title: 'Recordings Manager', active: true}
        ];
    }

    function downloadRecording(fileNames) {
    	RecordingsManager.download(fileNames);
    }

    function getFileName(recordingFile) {
        return recordingFile.fileName;
    }

    function concatFiles(fileNames) {
        return StringUtils.join(fileNames, ',');
    }

    function deleteRecording(recordingFile, totalActionedFiles) {
        return RecordingsManager.delete(recordingFile.fileName, $scope.loadingIndicator, getOverrideConfig(totalActionedFiles))
            .then(function () {
                $scope.recordings = CollectionUtils.removeObjectByReference($scope.recordings, recordingFile);
            });
    }

    function getOverrideConfig(totalActionedFiles) {
        return totalActionedFiles >= 3 ? {showSuccessLog: false} : {};
    }

    function afterDeleteRecording(totalActionedFiles) {
        if (totalActionedFiles >= 3) {
            ToastManager.showSuccess(totalActionedFiles + 'files deleted!!');
        }
    }

    $scope.uploadRecording = function (recordingFile) {
    	RecordingsManager.upload(recordingFile, $scope.loadingIndicator).then(function () {
            $route.reload();
        });
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('RecordingsGridCtrl', recordingsGridCtrl);

function recordingsGridCtrl($scope, $location, uiGridConstants, ActionBuilder, RecordingsManager,
                         ServiceCacheManager, ServiceFactory, LicenseManager) {
    function activate() {
        initRecordingsActions();
        initColumnDefs();
        initColumnFilter();
    }

    function initRecordingsActions() {
        $scope.recordings.forEach(function (recording) {
        	initRecordingActions(recording);
        });
    }

    function initRecordingActions(recording) {
        if (angular.isUndefined(recording)) {
            return;
        }

        var actions = [];
        actions.push(ActionBuilder.build("New service", "btn-green", createServiceFromFile, false, "glyphicon glyphicon-plus", true, true));

        recording.actionsData = {actions: actions};
        recording.type = recording.fileName.endsWith(".html") ? "HTML" : "ORP";
    }

    function initColumnDefs() {
        $scope.columnDefs = [
            {
                name: 'fileName',
                displayName: 'File Name',
                enableFiltering: false,
                width: '*'
            },
            {
                name: 'usedServices',
                displayName: 'Services using file',
                enableFiltering: false,
                width: '*'
            },
            { 	
            	name: 'type', 
            	field: 'type',
            	filter: { selectOptions: [{ value: 'orp', label: 'ORP' },
  	                                      { value: 'html', label: 'HTML'}],
  	                      type: uiGridConstants.filter.SELECT },
            	width: '100'
  			},
            {
                name: 'lastModified',
                displayName: 'Modified',
                cellFilter: 'simpleDate',
                sort: {
                    direction: uiGridConstants.DESC,
                    priority: 1
                },
                enableFiltering: false,
                width: "140"
            },
            {
                name: 'actionData',
                displayName: 'Actions',
                enableSorting: false,
                enableColumnMenu: false,
                enableFiltering: false,
                width: '80',
                cellTemplate: '<ap-action-panel action-data="row.entity.actionsData" action-context="row.entity"></ap-action-panel>'
            }
        ];
    }

    function initColumnFilter() {
        $scope.filteredColumns = ['fileName', 'usedServices', 'lastModified'];
    }
    
    function createServiceFromFile(recording) {
    	if (LicenseManager.isTotalServicesLimitReached($scope.licenseDetails, $scope.numOfServices)) {
    		return;
    	}
    	
        RecordingsManager.get(recording.fileName).then(function (recording) {
            var contextService = ServiceCacheManager.cacheContextService(
                ServiceFactory.buildBaseService(recording));
            $location.path('/serviceEditor/new/context/' + contextService.name);
        });
    }

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('FilePreviewDialogCtrl', filePreviewDialogCtrl);

function filePreviewDialogCtrl($scope, $mdDialog, fileContent, fileName) {
    activate();

    function activate() {
        $scope.fileContent = fileContent;
        $scope.fileName = fileName;
    }

    $scope.handleConfirm = function () {
        $mdDialog.hide();
    };

    $scope.handleCancel = function () {
        $mdDialog.cancel();
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('FileManagerCtrl', fileManagerCtrl);

function fileManagerCtrl($scope, DataManager, FileManagerConfig, FileItem, FileNavigator, FileManager) {
    activate();

    function activate() {
        $scope.config = FileManagerConfig;
        $scope.loader = {indicator: {isLoading: false, block: false}};
        $scope.query = '';
        $scope.temp = new FileItem();

        DataManager.setIsLoading(false);

        initFileNavigator();
        initFiles();
        buildCrumbs();
    }

    function initFileNavigator() {
        $scope.fileNavigator = FileNavigator;
        $scope.fileNavigator.setLoadingIndicator($scope.loader);
    }

    function initFiles() {
        $scope.fileNavigator.refresh();
    }

    function buildCrumbs() {
        $scope.fileManagementCrumbs = [
            {title: 'Admin', url: '#/adminManager'},
            {title: 'Server files', active: true}
        ];
    }

    $scope.handleFileUpload = function (file) {
        var path = $scope.fileNavigator.currentPath.join('/');

        FileManager.upload(file, path, $scope.loader.indicator).then(function () {
            $scope.fileNavigator.refresh();
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('FileGridCtrl', fileGridCtrl);

function fileGridCtrl($scope, uiGridConstants, StringUtils) {
    function activate() {
        initColumnDefs();
        initColumnFilter();
    }

    function initColumnDefs() {
        $scope.columnDefs = [
            {
                name: 'model.name',
                displayName: 'File Name',
                width: '*',
                sort: {
                    direction: uiGridConstants.DESC,
                    priority: 0
                },
                sortingAlgorithm: fileNameSorter,
                cellTemplate: '<a href="" ng-click="row.entity.handleClick()"><i class="glyphicon glyphicon-folder-close" ng-show="row.entity.model.type === \'dir\'"></i><i class="glyphicon glyphicon-file" ng-show="row.entity.model.type === \'file\'"></i>&nbsp; {{row.entity.model.name | strLimit : 64}}</a>'
            },
            {
                name: 'model.size',
                displayName: 'File Size',
                width: '140',
                cellFilter: 'humanReadableFileSize',
                sort: {
                    direction: uiGridConstants.DESC,
                    priority: 2
                }
            },
            {
                name: 'model.lastModified',
                displayName: 'Modified',
                cellFilter: 'simpleDate',
                width: '140',
                sort: {
                    direction: uiGridConstants.DESC,
                    priority: 1
                }
            },
            {
                name: 'actionData',
                displayName: 'Actions',
                enableSorting: false,
                enableColumnMenu: false,
                width: '120',
                cellTemplate: '<ap-action-panel action-data="row.entity.actionsData" action-context="row.entity"></ap-action-panel>'
            }
        ];
    }

    function fileNameSorter(a, b) {
        if (a === b) {
            return 0;
        }

        if (StringUtils.contains(a, ".") && StringUtils.contains(b, ".")) {
            return b.localeCompare(a);
        } else if (!StringUtils.contains(a, ".") && !StringUtils.contains(b, ".")) {
            return b.localeCompare(a);
        } else if (StringUtils.contains(a, ".")) {
            return -1;
        } else {
            return 1;
        }
    }

    function initColumnFilter() {
        $scope.filteredColumns = ['model.name'];
    }

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('FileExplorerBreadcrumbsCtrl', fileExplorerBreadcrumbsCtrl);

function fileExplorerBreadcrumbsCtrl($scope, FileNavigator) {
    activate();

    function activate() {
        $scope.fileNavigator = FileNavigator;
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('FileExplorerCtrl', fileExplorerCtrl);

function fileExplorerCtrl($scope, FileNavigator) {
    activate();

    function activate() {
        $scope.fileNavigator = FileNavigator;
    }

    $scope.isInThisPath = function (path) {
        var currentPath = FileNavigator.currentPath.join('/');
        return currentPath.indexOf(path) !== -1;
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin')
    .controller('SystemPropertiesCtrl', systemPropertiesCtrl);

function systemPropertiesCtrl($scope, $window, systemProperties, ServiceCacheManager, DataManager, HotkeyManager, AdminManager, SystemPropertyManager, ToastManager) {
    activate();

    function activate() {
    	$scope.propertiesHolder = {properties : systemProperties.toString()};
        $scope.loadingIndicator = {isLoading: false, loadingText: 'Updating system properties'};

        buildCrumbs();
        initHotkeys();

        DataManager.setIsLoading(false);
    }
    
    function buildCrumbs() {
        $scope.systemPropertiesCrumbs = [
            {title: 'Admin', url: '#/adminManager'},
            {title: 'System Properties', active: true}
        ];
    }

    function initHotkeys() {
        var hotkeys = [];
        
        hotkeys.push(HotkeyManager.buildHotkey('ctrl+s', 'Save service', function() {
	        $scope.updateProperties();
	    }));
        
        HotkeyManager.bindHotkeys($scope, hotkeys);
    }

    $scope.updateProperties = function () {
        SystemPropertyManager.update($scope.propertiesHolder.properties, $scope.loadingIndicator).then(function(response) {
        	SystemPropertyManager.restart($scope.loadingIndicator).then(function () {
        		ToastManager.showSuccess('Done.', 'Update Properties');
                ServiceCacheManager.clear();
                var isUserHomeChanged = response.data;
                if (isUserHomeChanged) {
                	AdminManager.askUserRestart('USER_HOME changed, please restart \'ServiceManager\' deployment on your server!');
                } else {
                	$window.location.reload(true);
                }
            });
    	});
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin')
    .controller('StatisticsManagerCtrl', statisticsManagerCtrl);

function statisticsManagerCtrl($scope, $rootScope, $window, statistics, systemProperties, StatisticsManager, DialogManager, CollectionUtils, DataManager) {

    function activate() {
        $scope.loadingIndicator = {isLoading: false};
        $scope.statistics = statistics;
        $scope.systemProperties = systemProperties;
        $scope.selectedService = {};
        
        buildCrumbs();
        
        DataManager.setIsLoading(false);
    }

    function buildCrumbs() {
        $scope.crumbs = [
            {title: 'Admin', url: '#/adminManager'},
            {title: 'Statistics', active: true}
        ];
    }
    
    $scope.resetExecutionLog = function() {
    	DialogManager.openConfirmationDialog({
            title: 'Reset Execution Log',
            saveLabel: 'Reset',
            description: 'Service execution log and statistics will be deleted. Continue?',
            onConfirmCallback: function(){
            	StatisticsManager.resetExecutionLog($scope.loadingIndicator).then(function() {
            		$window.location.reload();
            	});
            }
    	});
    };
    
    $scope.openChart = function (serviceName, type) {
    	$scope.selectedService.name = serviceName;
    	$scope.selectedService.type = type;
		$scope.selectedService.executionLogs = undefined;
		
    	StatisticsManager.getExecutionLogs(serviceName).then(function(executionLogs) {
    		$scope.selectedService.executionLogs = executionLogs;
        });
    };
    
    $scope.getChartTitle = function () {
        if (angular.isUndefined($scope.selectedService.name)) {
            return 'Service calls chart';
        }

        if (angular.isDefined($scope.selectedService.executionLogs)) {
            return "Calls for service {0}".format($scope.selectedService.name);
        } else {
            return "Waiting for data on {0} ...".format($scope.selectedService.name);
        }
    };

    $scope.onChartOpen = function () {
        $rootScope.$emit('serviceExecutionChartOpen', {});
    };

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin')
    .controller('SessionManagerCtrl', sessionManagerCtrl);

function sessionManagerCtrl($scope, $interval, sessionData, AdminManager, DataManager) {
    var refreshInterval;

    function activate() {
    	$scope.loadingIndicator = {isLoading: false};
    	$scope.sessionData = sessionData;
    	
        buildCrumbs();
        refreshInterval = $interval(reloadSessions, 1000);
        
        DataManager.setIsLoading(false);
    }

    function buildCrumbs() {
        $scope.systemPropertiesCrumbs = [
            {title: 'Admin', url: '#/adminManager'},
            {title: 'Session Manager', active: true}
        ];
    }

    function reloadSessions() {
        return AdminManager.getSessions().then(function (sessionData) {
            $scope.sessionData = sessionData;
        });
    }
    
    $scope.killSession = function(sessionId) {
    	return AdminManager.killSession(sessionId);
    };

    $scope.$on('$destroy', function () {
        $interval.cancel(refreshInterval);
    });

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin')
    .controller('FormUrlManagerCtrl', formUrlManagerCtrl);

function formUrlManagerCtrl($scope, $filter, $route, $timeout, formUrls, DataManager, StringUtils, FormUrls,
							 	HotkeyManager, ToastManager, HttpProtocols, ObjectUtils, HttpConstants, SelectionUtils, CollectionUtils) {
    
	function activate() {
        $scope.loadingIndicator = {isLoading: false, loadingText: "Updating service Form URLs.."};
        $scope.httpProtocols = HttpProtocols.values;
        $scope.hasSelected = false;
        DataManager.setIsLoading(false);

        buildCrumbs();
        initHotkeys();
        
        initFormUrls();
    }

    function buildCrumbs() {
        $scope.crumbs = [
            {title: "Admin", url: "#/adminManager"},
            {title: "Form URLs", active: true}
        ];
    }
    
    function initHotkeys() {
        var hotkeys = [];
        hotkeys.push(HotkeyManager.buildHotkey('ctrl+s', 'Save Changes', $scope.updateFormUrls));
        HotkeyManager.bindHotkeys($scope, hotkeys);
    }
    
    function hasSelection() {
    	for (var i = 0; i < $scope.formUrls.length; i++) {
    		if ($scope.formUrls[i].selected) {
    			return true;
    		}
    	}
    	return false;
    }
    
    $scope.onCheckboxChange = function() {
    	$timeout(function() {
    		$scope.hasSelection = hasSelection();
    	}, 50);
    };
    
    
    ///////////////////////
    /// FormUrl parsing ///
    ///////////////////////
    
    function initFormUrls() {
    	$scope.formUrls = CollectionUtils.removeDuplicates(formUrls.map(function (formUrl) {
			return {
				url: formUrl.connectionKey.url,
                newUrl: formUrl.connectionKey.url,
                type: formUrl.type
            };
        }));
    }
    
    
    //////////////////////
    /// Update FormUrls //
    //////////////////////
    
    function needsUpdate(formUrl) {
    	return formUrl.newUrl !== formUrl.url;
    }
    
    $scope.updateFormUrls = function () {
    	var formUrlsToUpdate = SelectionUtils.filterSelected($scope.formUrls);
    	formUrlsToUpdate = _.filter(formUrlsToUpdate, needsUpdate);
    	if (formUrlsToUpdate.length === 0) {
    		ToastManager.showWarning("No updates needed in selected rows.");
    		return;
    	}

    	$scope.loadingIndicator.isLoading = true;
    	
        FormUrls.update(formUrlsToUpdate).then(function() {
        	ToastManager.showSuccess('Update performed.', "Form URLs update");
        	$route.reload();
        	
        }).catch(function(reason) {
        	$scope.loadingIndicator.isLoading = false;
            ToastManager.showError(reason, "Form URLs update failed.");
        });
    };

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin')
    .controller('DomainManagerCtrl', domainManagerCtrl);

function domainManagerCtrl($scope, $filter, $route, $timeout, formUrls, DataManager, StringUtils, FormUrls,
							 	HotkeyManager, ToastManager, HttpProtocols, ObjectUtils, HttpConstants, SelectionUtils, CollectionUtils) {
    
	function activate() {
        $scope.loadingIndicator = {isLoading: false, loadingText: "Updating service domains.."};
        $scope.httpProtocols = HttpProtocols.values;
        $scope.hasSelected = false;
        DataManager.setIsLoading(false);

        buildCrumbs();
        initHotkeys();
        
        initFormDomains();
    }

    function buildCrumbs() {
        $scope.formDomainManagerCrumbs = [
            {title: "Admin", url: "#/adminManager"},
            {title: "Domains", active: true}
        ];
    }
    
    function initHotkeys() {
        var formDomainManagerHotkeys = [];
        formDomainManagerHotkeys.push(HotkeyManager.buildHotkey('ctrl+s', 'Save Changes', $scope.updateFormDomains));
        HotkeyManager.bindHotkeys($scope, formDomainManagerHotkeys);
    }
    
    function hasSelection() {
    	for (var i = 0; i < $scope.domains.length; i++) {
    		if ($scope.domains[i].selected) {
    			return true;
    		}
    	}
    	return false;
    }
    
    $scope.onCheckboxChange = function() {
    	$timeout(function() {
    		$scope.hasSelection = hasSelection();
    	}, 50);
    };
    
	//////////////////////
    /// Domain parsing ///
    //////////////////////
    
    function parseDomainFromUrl(formUrl) {
        var urlInfo = $filter('urlParser')(formUrl);
        var protocol = HttpProtocols.parse(urlInfo.protocol);
        return angular.isUndefined(protocol) ? undefined : {
            protocol: protocol,
            hostname: urlInfo.hostname,
            port: ObjectUtils.defaultValue(urlInfo.port, protocol.text === "http" ?
                HttpConstants.defaultHttpPort : HttpConstants.defaultHttpsPort, parseInt)
        };
    }
    
    function initFormDomains() {
    	$scope.domains = CollectionUtils.removeDuplicates(formUrls.map(function (formUrl) {
    		if (formUrl.type === 'DB') {
    			return {
                    oldDomainInfo: {hostname: formUrl.connectionKey.url},
                    newDomainInfo: {hostname: formUrl.connectionKey.url},
                    type: formUrl.type
                };
    		} else {
    			var domainInfo = parseDomainFromUrl(formUrl.connectionKey.url);
                return angular.isUndefined(domainInfo) ? undefined : {
                    oldDomainInfo: angular.copy(domainInfo),
                    newDomainInfo: angular.copy(domainInfo),
                    type: formUrl.type
                };
    		}
            
        }).filter(function(value) {return angular.isDefined(value);}), "oldDomainInfo.hostname", "oldDomainInfo.port");
    }
    
    //////////////////////
    /// Update domains ///
    //////////////////////
    
    $scope.assembleUrl = function (urlInfo, type) {
    	if (type === 'DB') {
    		return urlInfo.hostname;
    	}
    	
        var protocol = angular.isDefined(urlInfo.protocol) ? urlInfo.protocol.value : "http";
        var port = (angular.isDefined(urlInfo.port) && (urlInfo.port === 80 || urlInfo.port === 443)) ? "" : urlInfo.port;
        return StringUtils.isEmpty(port.toString()) ? "{0}//{1}".format(protocol, urlInfo.hostname) :
            "{0}//{1}:{2}".format(protocol, urlInfo.hostname, port);
    };
    
    function needsUpdate(domain) {
    	return 	$scope.assembleUrl(domain.oldDomainInfo, domain.type) !==
    			$scope.assembleUrl(domain.newDomainInfo, domain.type);
    }
    
    $scope.updateFormDomains = function () {
    	var domainsToUpdate = SelectionUtils.filterSelected($scope.domains);
    	domainsToUpdate = _.filter(domainsToUpdate, needsUpdate);
    	if (domainsToUpdate.length === 0) {
    		ToastManager.showWarning("No updates needed in selected rows.");
    		return;
    	}
    	
    	var prefixesToUpdate = domainsToUpdate.map(function (domainToUpdate) {
    		return {
    			old: $scope.assembleUrl(domainToUpdate.oldDomainInfo, domainToUpdate.type),
    			new: $scope.assembleUrl(domainToUpdate.newDomainInfo, domainToUpdate.type),
    			type: domainToUpdate.type
    		};
    	});
    	
    	var formUrlsToUpdate = [];
    	formUrls.forEach(function (formUrl) {
    		var relatedPrefixUpdate = _.find(prefixesToUpdate, function (prefixToUpdate) {
    			return formUrl.connectionKey.url.startsWith(prefixToUpdate.old) && formUrl.type === prefixToUpdate.type;
    		});
    		if (angular.isDefined(relatedPrefixUpdate)) {
    			formUrlsToUpdate.push({
    				url: formUrl.connectionKey.url,
    				newUrl: relatedPrefixUpdate.new + formUrl.connectionKey.url.substring(relatedPrefixUpdate.old.length),
    				type: relatedPrefixUpdate.type
    			});
    		}
    	});

    	$scope.loadingIndicator.isLoading = true;
    	
        FormUrls.update(formUrlsToUpdate).then(function() {
        	ToastManager.showSuccess('Update performed.', "Domains update");
        	$route.reload();
        	
        }).catch(function(reason) {
        	$scope.loadingIndicator.isLoading = false;
            ToastManager.showError(reason, "Domains update failed.");
        });
    };

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('DailyBackupDialogCtrl', dailyBackupDialogCtrl);

function dailyBackupDialogCtrl($scope, $mdDialog, loadingIndicator, dailyBackups, AdminManager, NavigationManager) {
    activate();

    function activate() {
        $scope.loadingIndicator = loadingIndicator;
        $scope.dailyBackups = dailyBackups;
        $scope.dailyBackupHolder = {dailyBackup: {}};
    }

    $scope.restoreDailyBackup = function (dailyBackup) {
        if (angular.isDefined(dailyBackup)) {
        	$mdDialog.hide();
            return AdminManager.restoreDailyBackup(dailyBackup.name, $scope.loadingIndicator).then(function () {
            	NavigationManager.goTo('domainManager');
            });
        }
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin')
    .controller('ChangelogCtrl', changelogCtrl);

function changelogCtrl($scope, /*versionData,*/ DataManager) {

    function activate() {
        buildCrumbs();
        DataManager.setIsLoading(false);
        $scope.versionData = {
            apiVersion: 1,
            releases: [
            	{
                    name: "Release2018-06",
                    version: "1.8.1",
                    date: "May 28th - 2018, 18:55",
                    changelog: [
                    	"Partial services: support for partial recording and playback.",
                    	"Statistics: call logging and charts per each service.",
                    	"Ticket Authentication: new authentication type for services.",
                    	"DBService: Support for OUT and INOUT parameters",
                    	"JsService & Process: various usability improvements.",
                    	"TestCase: Support for AP_SERVICE_DEFAULT",
                    	"Offline Capabilities (Beta): limited support.",
                    	"App: export as standalone.",
                        "AppVisualizer: dependencies reduced to a single file to boost performance.",
                        "MailClient: TLS1.2 protocol support.",
                        "Improved Unicode multi-language support in DBService, AppVisualizer Pages and more."
                    ]
                },
                {
                    name: "Release2017-11",
                    version: "1.6.100",
                    date: "November 26th - 2017, 15:30",
                    changelog: [
                        "AppVisualizer: support for background image, hamburger menu & new datatypes - fileupload, camera, map, qr barcode, static LOV, link.",
                        "AppVisualizer: remodeled action dialog, reordering of actions, configurable button sizes and positions.",
                        "AppVisualizer: revised logic for regeneration of js handler fuctions.",
                        "LOV data type: remodeled configuration dialog, and added choosable dropdown/combo layout.",
                        "HTML service new actions: StoreVisible, AssertTitle / AssertNotTitle",
                        "HTML service: support for AP_FORM_DEFAULT value.",
                        "HTML player: support for ChromeDriver and PhantomJs drivers in Java8 releases.",
                        "Process: support for conditions and throwing errors.",
                        "Process: usability boost, and transformation to JavaScript service.",
                        "JavaScript service: new type of service to implement custom logic or chain advanced service calls.",
                        "Multiple user experience improvements & bug fixes.",
                        "TestCase: new export to standalone JUnit.",
                        "LDAP authentication support in web services.",
                        "Statistics: logging & analytics on service calls.",
                        "Changelog display."
                    ]
                }
            ]
        };
    }

    function buildCrumbs() {
        $scope.crumbs = [
            {title: 'Admin', url: '#/adminManager'},
            {title: 'Changelog', active: true}
        ];
    }

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('BackupSelectorCtrl', backupSelectorCtrl);

function backupSelectorCtrl($scope, ObjectUtils) {
    activate();

    function activate() {
        if (ObjectUtils.isEmpty($scope.backup)) {
            $scope.backup = {properties: undefined};
        }
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin')
    .controller('ApiManagerCtrl', apiManagerCtrl);

function apiManagerCtrl($scope, $route, services, AdminManager, DataManager, ToastManager) {
    
	function activate() {
		$scope.loadingIndicator = {isLoading: false, loadingText: "Working.."};
		DataManager.setIsLoading(false);
		initDefaultValuesEditor();
		initServiceReplace();
		buildCrumbs();
	}
	
	function initDefaultValuesEditor() {
		$scope.holder = {
			paramName: '',
			newValue: ''
		};
	}
	
	function initServiceReplace() {
		$scope.serviceConstants = [];
    	services.forEach(function(service) {
    		service.value = service.name;
    		service.text = service.name;
    		$scope.serviceConstants.push(service);
    	});
    	
    	$scope.replaceHolder = {
    		service1: '',
    		service2: '',
    		service1NewName: ''
    	};
	}
	
	$scope.updateDefaultValues = function() {
		$scope.loadingIndicator.isLoading = true;
		
		AdminManager.updateDefaultValues($scope.holder.paramName, $scope.holder.newValue)
			.success(function (response) {
	            if (angular.isDefined(response.success) && !response.success) {
	            	ToastManager.showError('Failed: ' + response.errors.errorDescription, 'Update Default Values');
	            } else {
	            	ToastManager.showSuccess('Updated ' + response.data + ' services.', 'Update Default Values');
	            	$scope.holder.paramName = '';
	            	$scope.holder.newValue = '';
	            }
	            $scope.loadingIndicator.isLoading = false;
	        })
	        .error(function (status) {
	        	ToastManager.showError('Failed with status ' + status, 'Update Default Values');
	        	$scope.loadingIndicator.isLoading = false;
	        });
	};
	
	$scope.replaceService = function() {
		$scope.loadingIndicator.isLoading = true;
		var service1 = $scope.replaceHolder.service1.name;
		var service2 = $scope.replaceHolder.service2.name;
		var service1NewName = $scope.apiManagerForm.replaceServiceForm.serviceNameForm.serviceName.$$rawModelValue;
		
		if (service1 === service2) {
			ToastManager.showError('Services cannot be identical.', 'Replace Service');
			$scope.loadingIndicator.isLoading = false;
			return;
		}
		
		AdminManager.replaceService(service1, service2, service1NewName)
			.success(function (response) {
	            if (angular.isDefined(response.success) && !response.success) {
	            	ToastManager.showError('Failed: ' + response.errors.errorDescription, 'Replace Service');
	            } else {
	            	ToastManager.showSuccess('Done ' + response.data, 'Replace Service');
	            	$scope.replaceHolder.service1 = '';
	            	$scope.replaceHolder.service2 = '';
	            	$scope.replaceHolder.service1NewName = '';
	            	$route.reload();
	            }
	            $scope.loadingIndicator.isLoading = false;
	        })
	        .error(function (status) {
	        	ToastManager.showError('Failed with status ' + status, 'Replace Service');
	        	$scope.loadingIndicator.isLoading = false;
	        });
	};
	
	function buildCrumbs() {
        $scope.breadcrumbs = [
            {title: "Admin", url: "#/adminManager"},
            {title: "APIs", active: true}
        ];
    }
	
	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.admin')
    .controller('AdminManagerCtrl', adminManagerCtrl);

function adminManagerCtrl($scope, $mdDialog, licenseDetails, systemInfo, dailyBackups, DataManager,
                          MailConfigManager, NavigationManager, AdminManager, FileDownloader,
                          DateUtils, ServiceCacheManager, LogManager, LicenseManager, CollectionUtils,
                          TestCaseCacheManager, TestGroupCacheManager, AppCacheManager, McsCacheManager, ToastManager, UserManager) {
    activate();

    function activate() {
        $scope.user = UserManager.getUser();
        $scope.licenseDetails = licenseDetails;
        $scope.systemInfo = systemInfo;
        $scope.dailyBackups = dailyBackups;
        $scope.loadingIndicator = {isLoading: false};
        $scope.renewLicenseLink = LicenseManager.getRenewLicenseLink();

        DataManager.setIsLoading(false);
    }

    $scope.uploadLicense = function (licenseFile) {
        AdminManager.updateLicense(licenseFile, $scope.loadingIndicator).then(function () {
        	AdminManager.askUserRestart('License uploaded, please restart \'ServiceManager\' deployment on your server!');
        });
    };

    $scope.restoreUploadedBackup = function (backupFile) {
        AdminManager.restoreSystem(backupFile, $scope.loadingIndicator).then(function () {
        	NavigationManager.goTo('domainManager');
        });
    };

    $scope.restoreDailyBackup = function () {
        if (CollectionUtils.isNotEmpty($scope.dailyBackups)) {
            $mdDialog.show({
                controller: 'DailyBackupDialogCtrl',
                templateUrl: 'app/modules/serviceManager/views/managers/admin/dailyBackupDialog.html',
                locals: {
                    dailyBackups: $scope.dailyBackups,
                    loadingIndicator: $scope.loadingIndicator
                },
                clickOutsideToClose: true,
                bindToController: true
            });
        } else {
            ToastManager.showWarning('No daily backups to restore were found', 'Daily Backup Manager');
        }
    };
    
    function reset() {
    	AdminManager.reset($scope.loadingIndicator).then(function () {
            ServiceCacheManager.clear();
            TestCaseCacheManager.clear();
            TestGroupCacheManager.clear();
            AppCacheManager.clear();
            McsCacheManager.clear();
        });
    }
    
    $scope.confirmAndReset = function () {
    	$mdDialog.show({
            controller: 'ResetDialogCtrl',
            templateUrl: 'app/modules/admin/views/dialogs/resetDialog.html',
            clickOutsideToClose: false,
            bindToController: true
        }).then(function (isCreateBackup) {
        	if (isCreateBackup) {
		    	AdminManager.backupSystem($scope.loadingIndicator).then(function(backupContent) {
		    		var fileName = DateUtils.stringifyDate(new Date().getTime(), 'yyyyMMdd-HHmm') + '_reset_backup.zip';
		    		FileDownloader.saveContent(backupContent, 'application/zip', fileName);
		    		reset();
		    	});
        	} else {
        		reset();
        	}
        });
    };

    $scope.sync = function () {
        AdminManager.sync($scope.loadingIndicator);
    };
    
    $scope.rotateLog = function () {
        LogManager.rotate($scope.loadingIndicator);
    };

    $scope.openJarReplaceDialog = function () {
        $mdDialog.show({
            controller: 'JarReplaceDialogCtrl',
            templateUrl: 'app/modules/admin/views/dialogs/jarReplaceDialog.html',
            clickOutsideToClose: false,
            bindToController: true
        });
    };
    
    $scope.openMailConfigurator = function () {
        $mdDialog.show({
            controller: 'MailConfiguratorCtrl',
            templateUrl: 'app/modules/core/views/user/mail/mailConfigurator.html',
            clickOutsideToClose: false,
            locals: {
            	loadingIndicator: $scope.loadingIndicator
            },
            resolve: {
                mailConfig: function () {
                    return MailConfigManager.get();
                }
            },
            bindToController: true
        });
    };
    
    $scope.generateMaxActiveServicesString = function() {
    	return 'Forms:' + ($scope.licenseDetails.formMaxServices === -1 ? 'Unlimited' : $scope.licenseDetails.formMaxServices) +
    		' , HTML:' + ($scope.licenseDetails.htmlMaxServices === -1 ? 'Unlimited' : $scope.licenseDetails.htmlMaxServices) +
    		' , DB:' + ($scope.licenseDetails.dbMaxServices === -1 ? 'Unlimited' : $scope.licenseDetails.dbMaxServices) +
    		' , JS/Process: Unlimited';
    };
    
    $scope.checkForUpdates = function() {
    	DataManager.setIsLoading(true, 'Checking for updates...');
    	
    	AdminManager.getVersions().then(function (versionData) {
    		DataManager.setIsLoading(false);
    		if (versionData === '') {
    			ToastManager.showError('Unable to check for updates, view log for more details.', 'Check for Updates');
    			return;
    		}
    		
    		$scope.systemInfo.hasUpdate = (versionData.versionDifference > 0);
    		if ($scope.systemInfo.hasUpdate) {
    			ToastManager.showInfo('Update available! Contact our support team to upgrade.', 'Check for Updates');
    		} else {
    			ToastManager.showSuccess('No updates found.', 'Check for Updates');
    		}
        });
    };
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceNameEditorCtrl', serviceNameEditorCtrl);

function serviceNameEditorCtrl($scope, $routeParams, $q, DialogManager, PromiseUtils, NavigationManager) {
	var ignoreDeps;
	
	function activate() {
		if ($scope.mode.rename) {
			ignoreDeps = $routeParams.ignoreDeps;
		}
	}
	
	function checkIsignoreDeps(event) {
		var isignoreDeps = event.shiftKey;
    	
    	if (isignoreDeps) {
    		var deferred = $q.defer();
    		DialogManager.openConfirmationDialog({
                title: 'Unsafe Rename',
                description: 'Service\'s new name won\'t be updated in any entities that might be using it. Continue?',
                onConfirmCallback: function() {
                	deferred.resolve(true);
                }
            });
    		return deferred.promise;
    	} else {
    		return PromiseUtils.emptyPromise();
    	}
    }
	
	$scope.onRenameClick = function(event) {
		checkIsignoreDeps(event).then(function(isignoreDeps) {
			var url = "serviceEditor/rename/" + $scope.service.name;
			if (isignoreDeps) {
				url += '/ignoreDeps';
			}
			NavigationManager.goTo(url);
		});
	};
	
	$scope.rename = function() {
		$scope.renameCallback({ignoreDeps: ignoreDeps});
	};
	
	activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceEditorHeaderCtrl', serviceEditorHeaderCtrl);

function serviceEditorHeaderCtrl($scope, HotkeyManager, NavigationManager) {
    function activate() {
        $scope.loadingIndicator = {isLoading: false};
        initHotkeys();
    }

    function initHotkeys() {
        var hotkeys = [];
        
        if ($scope.mode.details) {
	        hotkeys.push(HotkeyManager.buildHotkey('alt+e', 'Edit service', function() {
	        	NavigationManager.goTo('serviceEditor/edit/' + $scope.service.name);
	        }));
	        hotkeys.push(HotkeyManager.buildHotkey('alt+t', 'Test service', function() {
	        	NavigationManager.goTo('serviceTester/' + $scope.service.name);
		    }));
	        if ($scope.isTestCaseManagementPrivileged()) {
		        hotkeys.push(HotkeyManager.buildHotkey('alt+c', 'Create Test Case', function() {
		        	NavigationManager.goTo('testCaseEditor/new?/' + $scope.service.name);
		    }));
	        }
        }
        if ($scope.mode.edit) {
	        hotkeys.push(HotkeyManager.buildHotkey('ctrl+s', 'Save service', function() {
	        	if ($scope.saveAllowed) {
	        		$scope.saveService();
	        	}
	        }));
        }
        
        HotkeyManager.bindHotkeys($scope, hotkeys);
    }

    $scope.isTestCaseManagementPrivileged = function () {
        return angular.isDefined($scope.licenseDetails) &&
            $scope.licenseDetails.testManagement;
    };

    $scope.getSaveTitle = function () {
        return $scope.mode.new ? 'Create Service' : $scope.mode.duplicate ?
            'Duplicate Service' : 'Update Service';
    };

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceEditorCtrl', serviceEditorCtrl);

function serviceEditorCtrl($scope, $routeParams, service, systemProperties, licenseDetails,
						   ServiceManager, ServiceCacheManager, HtmlServiceUtils, JsServiceUtils, DbServiceUtils,
						   NavigationManager, DataManager, UserManager, ModeParser, XmlFormatter,
						   ToastManager, BreadcrumbsBuilder, FunctionUtils, CollectionUtils) {
	
    /**************************
     *   Init                 *
     **************************/

    function activate() {
        DataManager.setIsLoading(false);
        $scope.loadingIndicator = {isLoading: false};
        $scope.service = service;
        $scope.licenseDetails = licenseDetails;
        $scope.systemProperties = systemProperties;
        $scope.outputParamsTableConfig = {
        	visible: {visible: false},
        	batchRemove: {visible: true}
        };
        $scope.mockEditorHolder = {
        	mode: service.mockResponse !== undefined && service.mockResponse.trim()[0] === '<' ? 'xml' : 'json',
        	value: prettyMock(service.mockResponse, true)
        };

        initByMode();
        initByServiceType();
        buildCrumbs();
        buildCollapseManager();
    }

    function initService() {
        $scope.service.inputParams = CollectionUtils.filterEmptyEntities($scope.service.inputParams);
        $scope.service.outputParams = CollectionUtils.filterEmptyEntities($scope.service.outputParams);
    }

    function initByMode() {
        $scope.mode = {};
        ModeParser.parse($scope.mode, $routeParams.mode);
        
        if (!$scope.mode.new) {
        	initService();
        }
        if ($scope.mode.duplicate) {
        	$scope.duplicatedService = $scope.service.name;
        }
        if ($scope.mode.rename) {
        	$scope.service.originalName = $scope.service.name;
        }
    }
    
    function initByServiceType() {
    	if (service.type === 'HTML') {
    		initHtmlService();
    	} else if (service.type === 'DB') {
    		initDbService();
    	} else if (service.type === 'JS') {
    		initJsService();
    	}
    }
    
    function buildCrumbs() {
        $scope.serviceEditorCrumbs = BreadcrumbsBuilder.buildBasicBreadcrumbs(
            'Service Manager',
            'Service Configuration',
            $scope.mode.new ? 'New' : $scope.mode.duplicate ? 'Duplicate ' + $scope.duplicatedService : $scope.service.name);
    }

    function buildCollapseManager() {
        var isEditMode = $scope.mode.new || $scope.mode.edit;

        $scope.collapseManager = {};
        $scope.collapseManager.collapseServiceDetails = true;
        $scope.collapseManager.collapseInputParameters = isEditMode;
        $scope.collapseManager.collapseOutputParameters = isEditMode;
        $scope.collapseManager.collapseScenarioView = false;
        $scope.collapseManager.collapseAdvancedDetails = isEditMode;
    }

    /**************************
     *   HTML services        *
     **************************/
    
    function initHtmlService() {
    	if ($scope.service.hasInputList) {
			HtmlServiceUtils.markLoopParameters($scope.service);
		}
		if ($scope.mode.new && !$scope.service.isPartial) {
			HtmlServiceUtils.confirmBaseUrl($scope.service);
		}
    }
    
    /**************************
     *   DB services         *
     **************************/
    
    function initDbService() {
    	$scope.service._hasDbOutputTypes = false;
    	
    	if ($scope.mode.edit) {
			$scope.outputParamsTableConfig.type = {visible: true};
		}
		if ($scope.service.isSingleOutput) {
			$scope.service.outputParams[0].type = 'BLOB';
			$scope.service._hasDbOutputTypes = true;
		}
    }
    
    $scope.getOutputColumns = function(suppressNewColumns) {
    	DbServiceUtils.getOutputColumns($scope.service, $scope.loadingIndicator, suppressNewColumns);
    };
    
    $scope.onIsBlobOutputChange = function() {
    	DbServiceUtils.onIsBlobOutputChange($scope.service, $scope.loadingIndicator);
    };
    
    /**************************
     *   JS services          *
     **************************/
    
    var originalJs;
    
    function initJsService() {
    	$scope.service._hasServices = false;
    	$scope.service._isEditingJs = false;
    	$scope.jsEditorHolder = {};
    	
    	if ($scope.mode.new) {
    		if (angular.isUndefined($scope.service.command)) {
    			$scope.service.command = 'return {\r\n};';
    		} else {
    			JsServiceUtils.updateOutputParameters($scope.service);
    		}
    	}
    }
    
    function initEditorContextMenu() {
		$scope.jsContextMenu = [
            ['Refer input', JsServiceUtils.initEditorParamsContextMenu($scope.service, $scope.jsEditorHolder.editor)],
            ['Call service', FunctionUtils.partial(JsServiceUtils.onCallService, $scope.service, $scope.jsEditorHolder.editor)],
            ['Generate ticket', onGenerateTicket],
            ['Reset value', onResetClick]
        ];
	}
	
	function onGenerateTicket() {
		if (!$scope.service._isEditingJs) {
			return;
		}
		
		var code = 'var ticket = ServiceManager.generateTicket({';
		code += '\r\n\t"key1": "value1"';
		code += '\r\n}, 30);';
		
		var editor = $scope.jsEditorHolder.editor;
		editor.session.insert(editor.getCursorPosition(), code);
		editor.focus();
	}
	
	function onResetClick() {
		if (!$scope.service._isEditingJs) {
			return;
		}
		$scope.jsEditorHolder.editor.setValue(originalJs, 1); // moves cursor to the end
	}
    
	function lockJs() {
		if (!$scope.jsEditorHolder.editor.$valid) {
			ToastManager.showError('JavaScript Syntax Error', 'Lock edit');
			return false;
		}
		
		try {
			JsServiceUtils.updateOutputParameters($scope.service);
		} catch (error) {
			ToastManager.showError(error.message, 'JavaScript Output Parsing');
			return false;
		}
		$scope.service._isEditingJs = false;
		return true;
	}
	
	$scope.unlockJs = function () {
		if (!$scope.service._isEditingJs) {
			originalJs = $scope.service.command;
			initEditorContextMenu();
			$scope.service._isEditingJs = true;
		}
	};
	
	$scope.toggleEditingJs = function () {
		if ($scope.service._isEditingJs) {
			lockJs();
		} else {
			$scope.unlockJs();
		}
	};
    
	
	/**************************
     *   Mock response        *
     **************************/
    
	function prettyMock(string, shouldPretty) {
		var isXml = string !== undefined && string.trim()[0] === '<';
    	try {
    		return 	isXml ?
    				XmlFormatter.format(string) :
    				JSON.stringify(JSON.parse(string), shouldPretty ? null : undefined, shouldPretty ? 2 : undefined);
    	} catch (e) {
    		return string;
    	}
    }
	
	
    /**************************
     *   Functionality        *
     **************************/

    function prepareAuthenticationData() {
    	if ($scope.service.authenticationMethod.value === 'FieldEncryption') {
    		CollectionUtils.findByProperty($scope.service.inputParams, $scope.service.authenticationData.username.value, 'id.name').paramValue = '';
    		CollectionUtils.findByProperty($scope.service.inputParams, $scope.service.authenticationData.password.value, 'id.name').paramValue = '';
        }
    }
    
    function preSaveValidations() {
    	if ($scope.service.type === 'HTML') {
    		return HtmlServiceUtils.serviceEditorValidations($scope.service.command.value, $scope.systemProperties, $scope.systemProperties.javaCompileVersion, $scope.service.command);
    		
    	} else if ($scope.service.type === 'DB') {
    		return DbServiceUtils.serviceEditorValidations($scope.service);
    	
	    } else if ($scope.service.type === 'JS') {
	    	return !service._isEditingJs || lockJs();
	    }
    	
    	return true;
    }
    
    function rearangeSpecialOutputParameters() {
    	CollectionUtils.moveToEnd($scope.service.outputParams, 'id.name', 'Error');
    	CollectionUtils.moveToEnd($scope.service.outputParams, 'id.name', 'PopupMessages');
    	CollectionUtils.moveToEnd($scope.service.outputParams, 'id.name', 'StatusBarMessages');
    }
    
    $scope.saveService = function () {
    	if (!preSaveValidations()) {
    		return;
    	}
    	
    	rearangeSpecialOutputParameters();
    	
        ServiceCacheManager.removeContextService();
        prepareAuthenticationData();
        $scope.service.mockResponse = prettyMock($scope.mockEditorHolder.value, false);
        
        if ($scope.mode.new || $scope.mode.duplicate) {
        	$scope.service.createdBy = UserManager.getUser().username;
            ServiceManager.create($scope.service, $scope.loadingIndicator).then(afterSaveService);
        } else {
            ServiceManager.update($scope.service, $scope.loadingIndicator).then(afterSaveService);
        }
    };

    function afterSaveService() {
        $scope.serviceForm.$setPristine();
        NavigationManager.goTo('serviceEditor/details/' + $scope.service.name);
    }
    
    $scope.renameService = function (isIgnoreDeps) {
    	if (angular.isUndefined($scope.service.name)) {
    		NavigationManager.goTo('serviceEditor/details/' + $scope.service.originalName);
    		return;		// new name and original name are the same
    	}
    	
        ServiceManager.rename($scope.service.originalName, $scope.service.name, $scope.loadingIndicator, isIgnoreDeps).then(function () {
        	$scope.serviceForm.$setPristine();
            NavigationManager.goTo('serviceEditor/details/' + $scope.service.name);
        });
    };
    
    $scope.cancelRenameService = function () {
    	NavigationManager.goTo('serviceEditor/details/' + $scope.service.originalName);
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceDetailsCtrl', serviceDetailsCtrl);

function serviceDetailsCtrl($scope, StringUtils) {

	$scope.hasProxy = function () {
		return !StringUtils.isNothing($scope.service.proxyHost) &&
			   !StringUtils.isNothing($scope.service.proxyPort);
	};
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceDbDetailsCtrl', serviceDbDetailsCtrl);

function serviceDbDetailsCtrl($scope, ServiceFactory, DbTypes, SqlTypes, DbServices, ToastManager, CollectionUtils) {

    function activate() {
    	$scope.hintsVisible = false;
        $scope.dbTypeConstants = DbTypes.values;
        $scope.sqlTypes = SqlTypes.values;
    }
    
    $scope.showHints = function() {
    	$scope.hintsVisible = true;
    };

    function getUsernamePassword() {
    	var usernameParam = CollectionUtils.findByProperty($scope.service.inputParams, ServiceFactory.USERNAME_INPUT_PARAMETER, 'id.name'),
    		passwordParam = CollectionUtils.findByProperty($scope.service.inputParams, ServiceFactory.PASSWORD_INPUT_PARAMETER, 'id.name');
    	
    	return DbServices.promptUsernamePassword(	
    			usernameParam.paramValue, 
    			passwordParam.paramValue,
    			'<i class="clip clip-notification"></i> Your credentials will be stored as input parameters,<br/>but you may clear them after closing the dialog.')
    		.then(function (credentials) {
	        	usernameParam.paramValue = credentials.username;
	        	passwordParam.paramValue = credentials.password;
	        	return credentials;
        });
    }
    
    $scope.testConnection = function() {
        getUsernamePassword().then(function(credentials) {
        	
        	$scope.loadingIndicator.isLoading = true;
            $scope.loadingIndicator.loadingText = 'Testing db connection...';
            
            var connectionString = DbServices.generateConnectionString($scope.service);
            
            DbServices.testConnection(connectionString, credentials.username, credentials.password).then(function(response) {
            	if (response.data.success) {
            		ToastManager.showSuccess('Success', 'Test connection');
            	} else {
            		ToastManager.showError(response.data.errors.errorDescription, 'Test connection');
            	}
        		$scope.loadingIndicator.isLoading = false;
        	});
        });
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ServiceAdvancedDetailsCtrl', serviceAdvancedDetailsCtrl);

function serviceAdvancedDetailsCtrl($scope, HtmlDrivers, AuthenticationMethods, HttpResponseCodes, ObjectUtils, StringUtils, CollectionUtils) {

    function activate() {
        $scope.authenticationMethods = AuthenticationMethods.values;
        $scope.inputParamNames = prepareInputParamNames($scope.service);
        $scope.httpResponseCodes = HttpResponseCodes.values;
        $scope.service.validationResponseCode = ObjectUtils.defaultValue($scope.service.validationResponseCode, HttpResponseCodes.default);
        initInputParamNames();
        
        if ($scope.service.type === 'HTML') {
        	$scope.service.useLabelsAsKeys = true;
        	$scope.htmlDrivers = HtmlDrivers.values;
        	if (StringUtils.isEmpty($scope.service.command)) {
        		$scope.service.command = $scope.systemProperties.javaCompileVersion === 8 ? HtmlDrivers.default8 : HtmlDrivers.default6;
        	}
        }
    }

    $scope.onAuthenticationMethodSelect = function (authenticationMethod) {
        if (authenticationMethod !== 'FieldEncryption') {
            $scope.service.authenticationData = undefined;
        } else {
            initInputParamNames();
        }
    };

    function filterOutInputParam(inputParamName) {
    	return  angular.isDefined(inputParamName) && angular.isDefined(inputParamName.value) ?
    			CollectionUtils.removeByProperty($scope.inputParamNames, 'value', inputParamName.value) :
    			$scope.inputParamNames;
    }

    $scope.onFieldEncryptionUsernameSelect = function (inputParamConstant) {
        $scope.passwordParamNames = filterOutInputParam(inputParamConstant);
    };

    $scope.onFieldEncryptionPasswordSelect = function (inputParamConstant) {
        $scope.usernameParamNames = filterOutInputParam(inputParamConstant);
    };

    $scope.onValidationResponseCodeSelect = function (validationResponseCode) {
        $scope.validationResponseCode = validationResponseCode;
    };
    
    function prepareInputParamNames(service) {
        return _.map(service.inputParams, function (inputParam) {
            return {
                value: inputParam.id.name
            };
        });
    }

    function initInputParamNames() {
        $scope.usernameParamNames = $scope.service.authenticationMethod.value === 'FieldEncryption' ? filterOutInputParam($scope.service.authenticationData.password) : $scope.inputParamNames;
        $scope.passwordParamNames = $scope.service.authenticationMethod.value === 'FieldEncryption' ? filterOutInputParam($scope.service.authenticationData.username) : $scope.inputParamNames;
    }

    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('MainCtrl', mainCtrl);

function mainCtrl($scope, $route, $location, UserManager, ServiceRecordManager, DataManager) {
    activate();

    function activate() {
    	if (angular.isUndefined(UserManager.getUser().username)) {
    		$location.path('/login.html');
    		return;
    	}
    	
        $scope.isLogged = UserManager.isLogged;
        $scope.recordingProperties = ServiceRecordManager.recordingProperties;
        $scope.loadingIndicator = DataManager.loadingIndicator;
        $scope.navProperties = {miniMode: false};

        // for ng-view to re-render inside the main directive
        $route.reload();
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.app')
    .controller('ServicesSelectorDialogCtrl', servicesSelectorDialogCtrl);

function servicesSelectorDialogCtrl($scope, $mdDialog, services, initialSelection, systemProperties, Permissions, SelectionUtils) {
    activate();

    function activate() {
        $scope.systemProperties = systemProperties;
        $scope.services = services;
        initTableActions();
        
        selectServices(initialSelection);
    }
    
    function initTableActions() {
        $scope.tableActions = [{
            name: 'Select',
            click: function () {
                $mdDialog.hide($scope.services);
            }
        },{
            name: 'Cancel',
            isCancel: true,
            click: function () {
               $mdDialog.cancel();
            }
        }];
    }
    
    function selectServices(selection) {
        SelectionUtils.markAsSelected($scope.services, selection, true);
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .controller('ParametersSelectorDialogCtrl', parametersSelectorDialogCtrl);

function parametersSelectorDialogCtrl($scope, $mdDialog, title, isSelectingTable, tableConfig, selectMultiple, required, services, initialSelection,
									  ToastManager, TreeViewUtils, CollectionUtils, ObjectUtils) {

	function activate() {
    	$scope.title = title;
    	$scope.isSelectingTable = isSelectingTable; 
    	$scope.services = filterOutSpecialFields(services);
    	if (isSelectingTable) {
    		$scope.tableConfig = tableConfig;
    		$scope.tableConfig.isHidden = ObjectUtils.defaultValue($scope.tableConfig.isHidden, false);
    		$scope.tableConfig.startIndex = ObjectUtils.defaultValue($scope.tableConfig.startIndex, 0);
    	}
    }
	
	$scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {
		checkExact(initialSelection);
		renderChecks();
	});
    
    function filterOutSpecialOutputParams(outputParams) {
    	if (angular.isUndefined(outputParams)) {
    		return undefined;
    	}
    	var $ = outputParams;
    	$ = CollectionUtils.removeByProperty($, 'id.name', 'StatusBarMessages');
    	$ = CollectionUtils.removeByProperty($, 'id.name', 'PopupMessages');
    	$ = CollectionUtils.removeByProperty($, 'id.name', 'Error');
    	return $;
    }
    
    function filterOutSpecialFields(services) {
    	var $ = [];
    	for (var i = 0, l = services.length; i < l; i++) {
    		var service = services[i];
    		if (angular.isDefined(service.type) && (service.type === 'Condition' || service.type === 'ThrowError')) {
    			continue;
    		}
    		var outputFields = filterOutSpecialOutputParams(service.outputParams);
            $.push({
    			name: service.name,
    			inputParams: service.inputParams,
    			outputParams: outputFields
    		});
    	}
    	
    	return $;
    }

    $scope.expandIfOnlyOneService = function() {
    	if ($scope.services.length === 1) {
    		var name = $scope.services[0].name;
    		TreeViewUtils.expandOrCollapse(name + 'ServiceToggle', true);
    		if ($scope.services[0].outputParams.length === 0) {
    			TreeViewUtils.expandOrCollapse(name + 'InputParamsToggle', true);
    		}
    	}
    };
    
    $scope.undefinedOrTrue = function (value) {
    	return value === undefined || value === true || value === 1;
    };
    
    $scope.undefinedOrFalse = function (value) {
    	return value === undefined || value === false || value === 0;
    };
    
    $scope.onConfirm = function () {
    	var selection = getSelection();
    	if (required && selection.all.length === 0) {
    		ToastManager.showWarning('Click "Cancel" to abort.', 'Nothing selected');
    		return;
    	}
        $mdDialog.hide(selection);
    };
    
    $scope.onCancel = function () {
    	$mdDialog.cancel();
    };
    
    
    /**************************
     *   JQuery TreeView      *
     **************************/
    
    $scope.onNodeToggleClick = function(id) {
    	var leaf = $('#' + id).siblings('.leaf'), parent = $('#' + id).parent('li'), node = $(leaf.parents('.node')[0]);
        var result;

        parent.toggleClass('collapsed');
        if (!parent.hasClass('collapsed')) {
            parent.children('ul').fadeIn('fast');
        } else {
            parent.children('ul').fadeOut('fast');
        }
    };
    
    $scope.toggleCheckbox = function($event) {
    	var checkbox = $($event.currentTarget);
    	checkbox.prop("checked", !checkbox.prop("checked"));
    	$scope.onCheckboxClick($event);
    };
    
    function checkSameName(checkbox) {
    	if (!selectMultiple) {
    		return;
    	}
    	
    	var instances = $("input[name=" + checkbox[0].name.replace(/\s/g, '') + "]").not(checkbox);
    	$.each(instances, function(){
    		if ($(this)[0].checked !== checkbox[0].checked) {
    			$(this).prop('checked', checkbox[0].checked);
    			checkChildren($(this));
    		}
    	});
    }
    
    function checkChildren(checkbox) {
    	if (!selectMultiple) {
        	return;
        }
        var parent = $(checkbox.parent().parent());
        var children_checks = parent.children('ul').find('[type="checkbox"]');
        children_checks.push(checkbox[0]);
        
        $.each(children_checks, function() {
        	var child = $(this);
        	child.prop('checked', checkbox[0].checked).removeClass('indeterminate');
        	checkSameName(child);
        });
    }
    
    function renderChecks() {
        $.each($('#paramsTree').find('.node[data-mode=checkbox]').get().reverse(), function(){
            var node = $(this),
                ch = node.children('.input-control').find('[type="checkbox"]'),
                children_all = node.children('ul').find('[type="checkbox"]'),
                children_checked = node.children('ul').find('[type="checkbox"]:checked');

            ch.removeClass('indeterminate');
            if (children_checked.length === 0) {
                ch.prop("checked", false);
                ch.removeClass('indeterminate');
            } else
            if (children_checked.length > 0 && children_all.length > children_checked.length) {
                ch.prop('checked', true);
                ch.addClass('indeterminate');
            }
            if (children_checked.length > 0 && children_all.length === children_checked.length) {
            	ch.prop("checked", true);
            }
        });
    }
    
    function checkExact(names) {
    	$.each($('#paramsTree').find('[data-mode=checkbox]').get().reverse(), function(){
            var checkbox = $(this).children('.input-control').find('[type="checkbox"]');
            checkbox.prop("checked", names.indexOf(checkbox[0].name) !== -1);
    	});
    }
    
    $scope.onCheckboxClick = function($event) {
    	var checkbox = $($event.currentTarget);
    	
    	if (checkbox[0].nodeName === 'SPAN') {
    		checkbox = $(checkbox[0].previousSibling.firstChild);
    		checkbox[0].checked = !checkbox[0].checked;
    	}
    	
    	if (selectMultiple) {
    		checkChildren(checkbox);
    	} else {
    		checkExact([checkbox[0].name]);
    	}
    	
    	renderChecks();
    	$event.stopPropagation();
    };
    
    function getSelection() {
    	
        function isRoot(checkbox) {		// Is an element with the given checkbox is direct child of the tree view?
        	try {
        		return checkbox.parent().parent().parent().parent()[0].className === "treeview";
        	} catch (e) {
        		return false;
        	}
        }
        
        function isLeaf(checkbox) {		// Is an element with the given checkbox has no other elements (with checkboxes) underneath it?
        	return checkbox.parent().parent()[0].childElementCount <= 2;
        }
        
        function unique(array) {
            return array.filter(function(el, index, arr) {
                return index === arr.indexOf(el);
            });
        }
        
        function sliceEnd(array, howMany) {
        	return array.length > howMany ? array.slice(array.length - howMany, array.length) : array;
        }
    	
    	var leafs = [];
    	var roots = [];
    	var all = [];
    	$.each($('#paramsTree').find('input[type="checkbox"]:checked').get(), function() {
            var checkbox = $(this);
            if (isLeaf(checkbox)) {
            	leafs.push(checkbox[0].name);
            } else if (isRoot(checkbox)) {
            	roots.push(checkbox[0].name);
            }
            all.push(checkbox[0].name);
    	});
    	
    	all = selectMultiple ? unique(all) : sliceEnd(all, 3);
    	if (roots.length > 0) {
    		all[0] = roots[roots.length - 1];
    	}
    	
    	return {
    		leafs: 	selectMultiple ? unique(leafs) : sliceEnd(leafs, 1),
    		roots: 	selectMultiple ? unique(roots) : sliceEnd(roots, 1),
    		all: 	all
    	};
    }
    
    activate();
}

angular.module('ap.serviceManager.app')
	.filter('serviceParametersTreeFilter', function (TreeViewUtils, StringUtils) {
		
		var oldFilterValue;
		
		/**
		 * Filter input/output parameters.
		 * Decides whether each parameter should be visible or not, and if the entire input/output parameters sub-tree should be expanded or collapsed.
		 * A parameter is visible if the service name already contains the search term, or the parameter itself contains the search term.
		 * The parameters sub-tree should be expanded iff it has at least one parameter whose name contains the search term.
		 * @param {params} input/output parameters array.
		 * @param {isServiceStatisfiesFilter} true if service name already matches the filter and should be visible.
		 * @param {filterValue} text typed at the search box.
		 * @return true iff there is at least one visible parameter.
		 */
		function filterParams(params, isServiceStatisfiesFilter, filterValue) {
			if (angular.isUndefined(params) || params.length === 0) {
				return false;
			}
			
			var $ = false;
			var hasMatches = false;
			
			params.forEach(function (param) {
				var isCurrentMatches = StringUtils.contains(param.id.name, filterValue);
				param.ui_isVisibleInSearch = isServiceStatisfiesFilter ? true : isCurrentMatches;
				hasMatches |= isCurrentMatches;
				$ |= param.ui_isVisibleInSearch;
			});
			params[0].ui_hasSearchMatches = hasMatches;
			return $;
		}
		
		/**
		 * Filter services.
		 * Decides whether each parameter should be visible or not, and if the entire input/output parameters sub-tree should be expanded or collapsed.
		 * A service is visible if the service name already contains the search term, or any of its parameters contains the search term.
		 * The service sub-tree should be expanded iff it has at least one parameter whose name contains the search term.
		 * @param {services} array of services.
		 * @param {filterValue} text typed at the search box.
		 * @return true iff there is at least one visible service.
		 */
		function filterServices(services, filterValue) {
			var $ = false;
			services.forEach(function (service) {
				//visibility control
				service.ui_isVisibleInSearch = angular.isUndefined(filterValue) || StringUtils.contains(service.name, filterValue);
				service.ui_hasVisibleInputParams = filterParams(service.inputParams, service.ui_isVisibleInSearch, filterValue);
				service.ui_hasVisibleOutputParams = filterParams(service.outputParams, service.ui_isVisibleInSearch, filterValue);
				service.ui_isVisibleInSearch = service.ui_hasVisibleInputParams || service.ui_hasVisibleOutputParams;
				$ |= service.ui_isVisibleInSearch;
				
				//expand/collapse control
				var shouldServiceExpand = false;
				if (angular.isDefined(service.inputParams) && service.inputParams.length > 0) {
					TreeViewUtils.expandOrCollapse(service.name + 'InputParamsToggle', service.inputParams[0].ui_hasSearchMatches && filterValue !== '');
					shouldServiceExpand |= service.inputParams[0].ui_hasSearchMatches;
				}
				if (angular.isDefined(service.outputParams) && service.outputParams.length > 0) {
					TreeViewUtils.expandOrCollapse(service.name + 'OutputParamsToggle', service.outputParams[0].ui_hasSearchMatches && filterValue !== '');
					shouldServiceExpand |= service.outputParams[0].ui_hasSearchMatches;
				}
				TreeViewUtils.expandOrCollapse(service.name + 'ServiceToggle', shouldServiceExpand && (filterValue !== ''));
			});
			return $;
		} 
		
		/**
		 * Filter services according to search term.
		 * @param {services} array of services.
		 * @param {filterValue} text typed at the search box.
		 * @return the services array, after setting some fields with 'ui_' prefix on some of the elements.
		 */
		return function (services, filterValue) {
			if (services.length === 0 || filterValue === oldFilterValue) {
				return services;
			}
			services[0].ui_hasVisibleServices = filterServices(services, filterValue);
			oldFilterValue = filterValue;
		    return services;
		};
});

angular.module('ap.serviceManager.app')
	.directive('onFinishRender', function ($timeout) {
		return {
			restrict: 'A',
			link: function (scope, element, attr) {
		        if (scope.$last === true) {
		            $timeout(function () {
		                scope.$emit(attr.onFinishRender);
		            });
		        }
			}
		};
});
}());

;(function() {
"use strict";

angular.module('ap.serviceManager.service')
    .controller('BaseUrlDialogCtrl', baseUrlDialogCtrl);

function baseUrlDialogCtrl($scope, initialUrl, $mdDialog) {
    var hostname, fullpath;

    function extractUrlParts() {
    	var parser = document.createElement('a');
    	parser.href = initialUrl;
    	hostname = parser.protocol + "//" + (initialUrl.indexOf(parser.host) !== -1 ? parser.host : parser.hostname);
    	fullpath = initialUrl;
    }
    
    function activate() {
        $scope.holder = {url: ''};
        extractUrlParts();
        $scope.setToHostname();
    }
    
    $scope.setToHostname = function () {
    	$scope.holder.url = hostname;
    };
    
    $scope.setToFullpath = function () {
    	$scope.holder.url = fullpath;
    };

    $scope.onSave = function () {
    	$mdDialog.hide($scope.holder.url);
    };
    
    activate();
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager').run(loginConfigurator);

function loginConfigurator($rootScope, $cookies, $http, Logger, UserManager) {
    activate();

    function activate() {
        initGlobals();
        tryAutoLogin();
    }

    function initGlobals() {
        $rootScope.globals = $cookies.getObject('globals') || {};
        if ($rootScope.globals.currentUser) {
            UserManager.setUser($rootScope.globals.currentUser.username, $rootScope.globals.currentUser.role);
            $http.defaults.headers.common.Authorization = 'Basic ' + $rootScope.globals.currentUser.authdata;
        }
    }

    function tryAutoLogin() {
        if (UserManager.isInitialized()) {
            Logger.info('performing auto login with: ' + UserManager.getUsername());
        } else {
            Logger.warn('user is not found, waiting for user login information..');
        }
    }
}
}());

;(function() {
"use strict";

angular.module('ap.serviceManager')
    .config(routeConfig);

function routeConfig($routeProvider, RouteWrapperProvider) {
    $routeProvider
        .when('/serviceManager', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/managers/service/serviceManager.html',
            controller: 'ServiceManagerCtrl',
            resolve: {
            	services: function (ServiceManager, ServiceConverter) {
            		return ServiceManager.getAll(ServiceManager.filters.SERVICES_LIST, undefined, ServiceConverter.fromServerList);
            	}
            },
            withLicenseDetails: true
        }))
        .when('/serviceEditor/new/:serviceId', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/editors/service/serviceEditor.html',
            controller: 'ServiceEditorCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn', 'operator|details'],
            withLicenseDetails: true,
            resolve: {
                service: function ($route, ServiceCacheManager, ServiceFactory, ObjectUtils) {
                    $route.current.params.mode = 'new';
                    var cachedService = ServiceCacheManager.getService($route.current.params.serviceId);
                    return  ObjectUtils.isNotEmpty(cachedService) ? cachedService : 
                    		ServiceCacheManager.hasContextService() ? ServiceCacheManager.getContextService() :
                    		ServiceFactory.buildDefaultService();
                },
                systemProperties: function (SystemPropertyManager) {
                	return SystemPropertyManager.get(true);
                }
            }
        }))
        .when('/serviceEditor/new/context/:serviceId', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/editors/service/serviceEditor.html',
            controller: 'ServiceEditorCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn', 'operator|details'],
            withLicenseDetails: true,
            resolve: {
                service: function ($route, ServiceCacheManager, ServiceFactory) {
                    $route.current.params.mode = 'new';
                    return ServiceCacheManager.hasContextService() ? 
                    		ServiceCacheManager.getContextService() :
                    		ServiceFactory.buildDefaultService();
                },
                systemProperties: function (SystemPropertyManager) {
                	return SystemPropertyManager.get(true);
                }
            }
        }))
        .when('/serviceEditor/:mode/:serviceId', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/editors/service/serviceEditor.html',
            controller: 'ServiceEditorCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn', 'operator|details'],
            withLicenseDetails: true,
            withService: true,
            resolve: {
                systemProperties: function (SystemPropertyManager) {
                	return SystemPropertyManager.get(true);
                }
            }
        }))
        .when('/serviceEditor/rename/:serviceId/ignoreDeps', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/editors/service/serviceEditor.html',
            controller: 'ServiceEditorCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn', 'operator|details'],
            withLicenseDetails: true,
            withService: true,
            resolve: {
                systemProperties: function ($route, SystemPropertyManager) {
                	$route.current.params.mode = 'rename';
                	$route.current.params.ignoreDeps = true;
                	return SystemPropertyManager.get(true);
                }
            }
        }))
        .when('/serviceTester/:serviceId', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/managers/service/serviceTester.html',
            controller: 'ServiceTesterCtrl',
            withService: true,
            withLicenseDetails: true
        }))
        
        
        
        .when('/auraTesterManager/:context/:previousEditedGroup?/:createdTestCase?', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/auraTester/views/managers/auraTester/auraTesterManager.html',
            controller: 'AuraTesterManagerCtrl',
            withLicenseDetails: true,
            withTestCases: true,
            withTestGroups: true,
            resolve: {
            	services: function (ServiceManager, ServiceCacheManager) {
            		var converter = function(service) {
            			service.context = 'Services';
            			return service;
            		};
            		return ServiceManager.getAll(ServiceManager.filters.NAMES, undefined, converter).then(function(services) {
            			ServiceCacheManager.cacheServices(services);
            		});
            	}
            }
        }))
        .when('/testCaseEditor/:mode/:serviceId/:testCaseId/:createdTestCaseContext?', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/auraTester/views/editors/testCase/testCaseEditor.html',
            controller: 'TestCaseEditorCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn', 'operator|details'],
            withLicenseDetails: true,
            resolve: {
                testCase: function ($route, Permissions, TestCaseManager, ServiceManager, PromiseUtils) {
                    return TestCaseManager.get($route.current.params.testCaseId).then(function (testCase) {
                        return ServiceManager.get($route.current.params.serviceId).then(function (service) {
                        	if (service.hasInputList) {
                        		$route.current.params.accessDeniedReason = 'Unavailable for HTML services using input in loop.';
                        		return PromiseUtils.rejectedPromise();
                        	} else if (service.isSingleOutput) {
                        		$route.current.params.accessDeniedReason = 'Unavailable for DB services with BLOB output.';
                        		return PromiseUtils.rejectedPromise();
                        	}
                        	
                            testCase.service = service;
                            return Permissions.resolve(testCase.createdBy, testCase);
                        });
                    });
                },
                systemProperties: function (SystemPropertyManager) {
                	return SystemPropertyManager.get(true);
                }
            }
        }))
        .when('/testCaseEditor/:mode/:serviceId', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/auraTester/views/editors/testCase/testCaseEditor.html',
            controller: 'TestCaseEditorCtrl',
            authorizedRoles: ['webuser', 'manager', 'operator|details'],
            resolve: {
                testCase: function ($route, ServiceManager, PromiseUtils) {
                    return ServiceManager.get($route.current.params.serviceId).then(function (service) {
                    	if (service.hasInputList) {
                    		$route.current.params.accessDeniedReason = 'Unavailable for HTML services using input in loop.';
                    		return PromiseUtils.rejectedPromise();
                    	} else if (service.isSingleOutput) {
                    		$route.current.params.accessDeniedReason = 'Unavailable for DB services with BLOB output.';
                    		return PromiseUtils.rejectedPromise();
                    	}
                    	
                        var testCase = {};
                        testCase.service = service;
                        return testCase;
                    });
                },
                systemProperties: function (SystemPropertyManager) {
                	return SystemPropertyManager.get(true);
                }
            }
        }))
        .when('/testGroupManagement/:previousEditedGroup?/:createdTestCase?', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/auraTester/views/managers/testGroup/testGroupManagement.html',
            controller: 'TestGroupManagementCtrl',
            withLicenseDetails: true
        }))
        .when('/testGroupEditor/:mode/:testGroupEditorContext/:testGroupId?', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/auraTester/views/editors/testGroup/testGroupEditor.html',
            controller: 'TestGroupEditorCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn', 'operator|details'],
            withLicenseDetails: true,
            withPermissions: true,
            resolve: {
            	services: function (ServiceManager, ServiceCacheManager) {
            		return ServiceManager.getAll(ServiceManager.filters.NAMES, undefined, null).then(function(services) {
            			ServiceCacheManager.cacheServices(services);
            		});
            	},
            	testGroup: function ($route, Permissions, ObjectUtils, TestGroupManager) {
                    var testGroupId = $route.current.params.testGroupId;
                    return TestGroupManager.get(testGroupId).then(function (testGroup) {
                        return Permissions.resolve(testGroup.createdBy, testGroup);
                    });
                }
            }
        }))
        .when('/monitoringManager/:agentId?', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/auraTester/views/managers/testCase/monitor/monitoringManager.html',
            controller: 'MonitoringManagerCtrl',
            withLicenseDetails: true,
            withTestCases: true,
            withTestGroups: true,
            withTestAgents: true,
            resolve: {
            	services: function (ServiceManager, ServiceCacheManager) {
            		return ServiceManager.getAll(ServiceManager.filters.NAMES, undefined, null).then(function(services) {
            			ServiceCacheManager.cacheServices(services);
            		});
            	},
            	systemProperties: function (SystemPropertyManager) {
                	return SystemPropertyManager.get(true);
                }
            }
        }))
        .when('/testAgentEditor/:mode/:agentId?', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/auraTester/views/editors/testCase/monitor/agent/testAgentEditor.html',
            controller: 'TestAgentEditorCtrl',
            withLicenseDetails: true,
            resolve: {
                testAgent: function ($route, TestAgentManager) {
                    return TestAgentManager.get($route.current.params.agentId);
                }
            }
        }))
        
        
        .when('/pageManager', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/page/views/managers/page/pageManager.html',
            controller: 'PageManagerCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn', 'operator'],
            resolve: {
                pages: function (PageManager) {
                    return PageManager.getAll();
                }
            }
        }))
        .when('/pageEditor/:mode/:app/:filename', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/page/views/editors/page/pageEditor.html',
            controller: 'PageEditorCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn', 'operator|details'],
            withPages: true,
            resolve: {
            	services: function (ServiceManager) {
            		return ServiceManager.getAll(ServiceManager.filters.NAMES, undefined, null);
            	},
            	page: function ($route, Permissions, PageManager) {
                    return PageManager.get($route.current.params.filename, $route.current.params.app).then(function (page) {
                        return Permissions.resolve(page.createdBy, page);
                    });
                }
            }
        }))
        .when('/showMap/:app/:filename', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/page/views/managers/page/map/showMap.html',
            controller: 'ShowMapCtrl',
            authorizedRoles: ['webuser', 'manager'],
            resolve: {
                mapData: function ($route, MapManager) {
                    return MapManager.getMapData($route.current.params.filename, $route.current.params.app);
                }
            }
        }))
        
        
        .when('/appManager', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/app/views/managers/appManager.html',
            controller: 'AppManagerCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn', 'operator'],
            withLicenseDetails: true,
            resolve: {
                apps: function (AppManager) {
                    return AppManager.getAll();
                }
            }
        }))
        .when('/appVisualizer/:mode/:appId?', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/app/views/visualizer/appVisualizer.html',
            controller: 'AppVisualizerCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn'],
            withLicenseDetails: true,
            resolve: {
            	services: function (ServiceManager, ServiceConverter, ServiceCacheManager) {
            		return ServiceManager.getAll(ServiceManager.filters.APP_VISUALIZER, undefined, ServiceConverter.fromServer_forLov).then(function(services) {
            			ServiceCacheManager.cacheServices(services);	// services needed if selecting datatype 'LOV' to some input parameter.
            			return services;
            		});
            	},
            	app: function ($route, AppManager, Permissions, PromiseUtils) {
                    var appId = $route.current.params.appId;
                    if (angular.isUndefined(appId)) {
                        return PromiseUtils.emptyPromise();
                    }
                    return AppManager.get(appId).then(function (app) {
                        /*return Permissions.resolve(app.createdBy, app);*/
                        return app;
                    });
                },
                systemProperties: function (SystemPropertyManager) {
                	return SystemPropertyManager.get(true);
                }
            }
        }))

        
        
        .when('/integrationManager/:tab?', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/integration/views/managers/integrationManager.html',
            controller: 'IntegrationManagerCtrl',
            authorizedRoles: ['webuser', 'manager'],
            resolve: {
                processes: function (ProcessManager) {
                	return ProcessManager.getAll();
                },
                mcsResources: function (McsManager) {
                    return McsManager.getAll();
                },
                vbcsResources: function (VbcsManager) {
                    return VbcsManager.getAll();
                }
            }
        }))
        .when('/processWizard/:mode/:processId?', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/integration/views/wizard/processWizard.html',
            controller: 'ProcessWizardCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn'],
            resolve: {
            	services: function (ServiceManager, ServiceCacheManager) {
            		return ServiceManager.getAll(ServiceManager.filters.NAMES, undefined, null).then(function(services) {
            			ServiceCacheManager.cacheServices(services);
            			return services;
            		});
            	},
            	process: function ($route, ProcessManager, ProcessConverter, ServiceManager, PromiseUtils, EntityUtils) {
                    var processId = $route.current.params.processId;
                    if (angular.isUndefined(processId)) {
                        return PromiseUtils.emptyPromise();
                    }
                    return ProcessManager.get(processId).then(function (process) {
                    	var serviceNames = process.services.map(EntityUtils.nameReducer);
                		return ServiceManager.getAll(ServiceManager.filters.SPECIFIED, serviceNames).then(function(services) {
                			return ProcessConverter.fromServer(process, services);
                		});
                    });
                },
                systemProperties: function (SystemPropertyManager) {
                	return SystemPropertyManager.get(true);
                }
            }
        }))
        .when('/mcsWizard/:mode/:mcsId?', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/integration/views/wizard/mcsWizard.html',
            controller: 'McsWizardCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn'],
            resolve: {
            	services: function (ServiceManager) {
            		return ServiceManager.getAll(ServiceManager.filters.MCS, undefined, null);
            	},
            	resource: function ($route, McsManager, Permissions, PromiseUtils) {
                    var mcsId = $route.current.params.mcsId;
                    if (angular.isUndefined(mcsId)) {
                        return PromiseUtils.emptyPromise();
                    }
                    return McsManager.get(mcsId).then(function (mcs) {
                        return mcs;
                    });
                },
                allResources: function (McsManager) {
                    return McsManager.getAll();
                }
            }
        }))
        .when('/vbcsEditor/details/:vbcsId', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/integration/views/editors/vbcsEditor.html',
            controller: 'VbcsEditorCtrl',
            authorizedRoles: ['webuser', 'manager|editOwn', 'operator|details'],
            withLicenseDetails: true,
            resolve: {
                resource: function ($route, VbcsManager) {
                	var vbcsId = $route.current.params.vbcsId;
                	return VbcsManager.get(vbcsId);
                }
            }
        }))
        
        
        
        .when('/testCaseRunner/:testCaseId', RouteWrapperProvider.prepareRoute({
            template: 'testCaseReport: {{testCaseReport}}',
            withLicenseDetails: true,
            resolve: {
                testCaseReport: function ($route, TestCaseManager, TestCaseExecutor) {
                    return TestCaseManager.get($route.current.params.testCaseId).then(function (testCase) {
                        return TestCaseExecutor.execute(testCase).then(function (testCaseReport) {
                            return testCaseReport.data;
                        });
                    });
                }
            }
        }))
        
        
        
        .when('/adminManager', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/managers/admin/adminManager.html',
            controller: 'AdminManagerCtrl',
            withLicenseDetails: true,
            resolve: {
                systemInfo: function (AdminManager) {
                    return AdminManager.getSystemInfo();
                },
                dailyBackups: function (AdminManager) {
                    return AdminManager.getDailyBackups();
                }
            }
        }))
        .when('/recordingsManager', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/managers/file/recordingsManager.html',
            controller: 'RecordingsManagerCtrl',
            authorizedRoles: ['webuser', 'manager'],
            withLicenseDetails: true,
            resolve: {
            	numOfServices: function(ServiceManager) {
            		return ServiceManager.getNumberOfServices();
            	},
            	recordings: function (RecordingsManager) {
                    return RecordingsManager.getAll();
                }
            }
        }))
        .when('/serverFiles', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/managers/file/fileManager.html',
            controller: 'FileManagerCtrl',
            authorizedRoles: ['webuser']
        }))
        
        .when('/systemProperties', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/managers/admin/systemProperties.html',
            controller: 'SystemPropertiesCtrl',
            authorizedRoles: ['webuser'],
            withSystemProperties: true
        }))
        .when('/sessionManager', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/managers/admin/sessionManager.html',
            controller: 'SessionManagerCtrl',
            resolve: {
                sessionData: function (AdminManager) {
                    return AdminManager.getSessions();
                }
            }
        }))
        .when('/domainManager', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/managers/admin/domainManager.html',
            controller: 'DomainManagerCtrl',
            authorizedRoles: ['webuser'],
            resolve: {
            	formUrls: function (FormUrls) {
            		return FormUrls.getAll();
            	}
            }
        }))
        .when('/formUrlManager', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/managers/admin/formUrlManager.html',
            controller: 'FormUrlManagerCtrl',
            authorizedRoles: ['webuser'],
            resolve: {
            	formUrls: function (FormUrls) {
            		return FormUrls.getAll();
            	}
            }
        }))
        .when('/apis', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/managers/admin/apiManager.html',
            controller: 'ApiManagerCtrl',
            authorizedRoles: ['webuser'],
            resolve: {
            	services: function (ServiceManager, ServiceConverter) {
            		return ServiceManager.getAll(ServiceManager.filters.NAMES, undefined, null);
            	}
            }
        }))
        .when('/login', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/user/login/login.html',
            controller: 'LoginCtrl',
            withSystemProperties: true
        }))
        .when('/support', {
            templateUrl: 'app/modules/serviceManager/views/user/support/support.html',
            controller: 'SupportCtrl'
        })
        .when('/logViewer', {
            templateUrl: 'app/modules/serviceManager/views/user/log/logViewer.html',
            controller: 'LogViewerCtrl',
            resolve: {
                logData: function (LogManager) {
                    return LogManager.get();
                }
            }
        })
        .when('/statisticsManager', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/managers/admin/statisticsManager.html',
            controller: 'StatisticsManagerCtrl',
            resolve: {
                statistics: function (StatisticsManager) {
                    return StatisticsManager.getStatistics();
                },
                systemProperties: function (SystemPropertyManager) {
                	return SystemPropertyManager.get(true);
                }
            }
        }))
        .when('/changelog', RouteWrapperProvider.prepareRoute({
            templateUrl: 'app/modules/serviceManager/views/managers/admin/changelog.html',
            controller: 'ChangelogCtrl'/*,
            resolve: {
                versionData: function (AdminManager) {
                    return AdminManager.getVersions();
                }
            }*/
        }))
        
        
        .otherwise({
            redirectTo: '/serviceManager'
        });
}
}());
